<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MyDBA学习笔记</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mydba.xyz/"/>
  <updated>2019-05-21T09:03:02.000Z</updated>
  <id>http://mydba.xyz/</id>
  
  <author>
    <name>冬日暖阳</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL优化 -- 9 非SPJ的优化</title>
    <link href="http://mydba.xyz/mysql/optimization/op9.html"/>
    <id>http://mydba.xyz/mysql/optimization/op9.html</id>
    <published>2019-05-21T09:03:02.000Z</published>
    <updated>2019-05-21T09:03:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-SPJ-and-Non-SPJ"><a href="#1-SPJ-and-Non-SPJ" class="headerlink" title="1. SPJ and Non SPJ"></a>1. SPJ and Non SPJ</h2><p><img src="/img/op9-e1179425.png" alt=""></p><h2 id="2-Non-SPJ-optimization"><a href="#2-Non-SPJ-optimization" class="headerlink" title="2. Non SPJ optimization"></a>2. Non SPJ optimization</h2><h3 id="2-1-Why-do-Non-SPJ-Optimization"><a href="#2-1-Why-do-Non-SPJ-Optimization" class="headerlink" title="2.1 Why do Non SPJ Optimization ?"></a>2.1 Why do Non SPJ Optimization ?</h3><p>为什么要做非 SPJ 优化 ?<br>历史:<br>早期的关系数据库系如 System-R ，对 GROUPBY 和聚集等操作一般都放在其所在的查询的最后进行处理，即在执行完所有的连接和选择操作之后再执行 GROUPBY 和聚集。</p><p>优缺点 :<br>   处理方式比较简单，编码容易，但执行效率会比较低。  </p><h3 id="2-2-GROPUP-BY-Optimization"><a href="#2-2-GROPUP-BY-Optimization" class="headerlink" title="2.2 GROPUP BY Optimization"></a>2.2 GROPUP BY Optimization</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(s.classID) as StudentNum, s.classID <span class="keyword">FROM</span> STUDENT AS s, CLASS AS c</span><br><span class="line">WHERE S.<span class="attribute">ID</span>=c.SID</span><br><span class="line">GROUP BY s.classID</span><br></pre></td></tr></table></figure><p>优化方式:<br>分组转换技术:<br>即对分组操作、聚集操作与连接操作的<code>位置进行交换</code></p><p>常见分组转换技术 :  </p><ol><li><p>分组操作下移:GROUPBY操作可能较大幅度减小关系元组的个数，如果能够 对某个关系先进行分组操作，然后再进行表之间的连接，很可能提高连接效率。这种优化方式是<code>把分组操作提前执行</code>。下移的含义，是在查询树上，让分组操作尽量靠近叶子结点，使得分组操作的结点低于一些选择操作。</p></li><li><p>分组操作上移:如果连接操作能够过滤掉大部分元组，则先进行连接后进行 GROUPBY 操作，可能提高分组操作的效率。这种优化方式是<code>把分组操作置后执行</code>。上移的含义，和下移正好相反。<br>对于带有 GROUPBY 等操作的非 SPJ 格式的 SQL 语句，在本节之前提及的技术都 适用，只是结合了 GROUPBY 操作的语义进行分组操作。因为 GROUPBY 操作下移 或上移均不能保证重写后的查询效率一定更好，所以，要在查询优化器中采用<code>基于代价的方式来估算某几种路径的优劣</code>。</p></li></ol><h3 id="2-3-ORDER-BY-Optimization"><a href="#2-3-ORDER-BY-Optimization" class="headerlink" title="2.3 ORDER BY Optimization"></a>2.3 ORDER BY Optimization</h3><p>常见 ORDER BY 优化技术 :  </p><ol><li><code>排序消除( Order By Elimination ， OBYE )</code><br>优化器在生成执行计划前，将语句中没有必要的排序操作消除(如利用索<br>引)，避免在执行计划中出现排序操作或由排序导致的操作(如在索引列上排<br>序，可以利用索引消除排序操作)。</li><li><code>排序下推( Sort push down )</code><br><code>把排序操作尽量下推到基表中</code>，有序的基表进行连接后的结果符合排序的语<br>义，这样能避免在最终的大的连接结果集上执行排序操作。</li></ol><h3 id="2-4-DISTINCT-Optimization"><a href="#2-4-DISTINCT-Optimization" class="headerlink" title="2.4 DISTINCT Optimization"></a>2.4 DISTINCT Optimization</h3><p>常见 DISTINCT 优化技术 :</p><ol><li><code>DISTINCT 消除( Distinct Elimination )</code><br>如果表中存在主键、唯一约束、索引等，则可以消除查询语句中的 DISTINCT (这种优化方式，在语义优化中也涉及，本质上是语义优化研究的范畴)。</li><li><code>DISTINCT 推入( Distinct Push Down )</code><br>生成含 DISTINCT 的反半连接查询执行计划时，先进行反半连接再进行 DIS TICT 操作;也许先执行 DISTICT 操作然后再执行反半连接，可能更优;这是利 用连接语义上确保唯一功能特性进行 DISTINCT 的优化。</li><li><code>DISTINCT 迁移( Distinct Placement )</code><br>对连接操作的结果执行 DISTINCT ，可能把 DISTINCT 移到一个子查询中优 先进行(有的书籍把这项技术称为“ DISTINCT 配置”)。</li></ol><h2 id="3-Non-SPJ-optimization-of-MySQL"><a href="#3-Non-SPJ-optimization-of-MySQL" class="headerlink" title="3. Non SPJ optimization of MySQL"></a>3. Non SPJ optimization of MySQL</h2><h3 id="3-1-GROPUP-BY-Optimization"><a href="#3-1-GROPUP-BY-Optimization" class="headerlink" title="3.1 GROPUP BY Optimization"></a>3.1 GROPUP BY Optimization</h3><p><code>MySQL 的 GROUP BY 优化技术:</code><br>MySQL 对于 GROUPBY 的处理，通常采用的方式是扫描整个表、创建一个临时表 用以执行分组操作。<br>查询执行计划中出现“ Using temporary” 字样表示 MySQL 采用了常规的处理方式。<br><code>MySQL 不支持分组转换技术</code>。<br><code>对于 GROUPBY 的优化，则尽量利用索引</code>。</p><p>利用索引的条件是:分组子句中的列对象源自同一个 btree 索引(不支持利用 Hash 索引进行优化)的全部或前缀部分的部分有序的键(分组使用的索引列与 索引建立的顺序不匹配则不能使用索引)。<br>主要的方式有 :  </p><ol><li>Loose Index Scan :<br>直接用索引完成分组操作中对分组列的检索，不必考虑索引的全部键满足 WHER E 子句，只要有部分匹配 WHERE 中的列对象即可( loose ，利用索引中部分列为“松散”)</li><li>Tight Index Scan :<br>索引中的全部键与 WHERE 子句中的列对象匹配( tight ，利用索引中的全部列为“严密”)</li></ol><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> TABLE t_god (a INT, b INT, c INT, d INT, <span class="built_in">e</span> INT);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> t_god_idx_1 <span class="keyword">ON</span> t_god (a,b,c);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> t_god_idx_2 <span class="keyword">ON</span> t_god (d);</span><br><span class="line"></span><br><span class="line">示例 1 :索引列上执行 GROUPBY ，支持 GROUPBY 优化(没有使用“ Using file sort” 类似的操作进行排序):</span><br><span class="line">mysql&gt; <span class="keyword">EXPLAIN</span>  <span class="keyword">SELECT</span> a <span class="keyword">FROM</span> t_god <span class="keyword">GROUP</span> <span class="keyword">BY</span> a;</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+-------------+---------+------+------+----------+-------------+</span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys | key         | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+-------------+---------+------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | t_god | NULL       | <span class="keyword">index</span> | t_god_idx_1   | t_god_idx_1 | <span class="number">15</span>      | <span class="literal">NULL</span> |    <span class="number">1</span> |   <span class="number">100.00</span> | <span class="keyword">Using</span> <span class="keyword">index</span> |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+-------------+---------+------+------+----------+-------------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">show</span> warnings \G</span><br><span class="line">*************************** <span class="number">1.</span> row ***************************</span><br><span class="line">  Level: Note</span><br><span class="line">   Code: <span class="number">1003</span></span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="symbol">`op`</span>.<span class="symbol">`t_god`</span>.<span class="symbol">`a`</span> <span class="keyword">AS</span> <span class="symbol">`a`</span> <span class="keyword">from</span> <span class="symbol">`op`</span>.<span class="symbol">`t_god`</span> <span class="keyword">group</span> <span class="keyword">by</span> <span class="symbol">`op`</span>.<span class="symbol">`t_god`</span>.<span class="symbol">`a`</span></span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">示例 <span class="number">2</span> :索引列上执行 ORDERBY ， MySQL 支持 ORDERBY 优化:</span><br><span class="line">mysql&gt; <span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> a <span class="keyword">FROM</span> t_god <span class="keyword">ORDER</span> <span class="keyword">BY</span> a;</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+-------------+---------+------+------+----------+-------------+</span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys | key         | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+-------------+---------+------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | t_god | NULL       | <span class="keyword">index</span> | <span class="literal">NULL</span>          | t_god_idx_1 | <span class="number">15</span>      | <span class="literal">NULL</span> |    <span class="number">1</span> |   <span class="number">100.00</span> | <span class="keyword">Using</span> <span class="keyword">index</span> |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+-------------+---------+------+------+----------+-------------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">show</span> warnings \G</span><br><span class="line">*************************** <span class="number">1.</span> row ***************************</span><br><span class="line">  Level: Note</span><br><span class="line">   Code: <span class="number">1003</span></span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="symbol">`op`</span>.<span class="symbol">`t_god`</span>.<span class="symbol">`a`</span> <span class="keyword">AS</span> <span class="symbol">`a`</span> <span class="keyword">from</span> <span class="symbol">`op`</span>.<span class="symbol">`t_god`</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="symbol">`op`</span>.<span class="symbol">`t_god`</span>.<span class="symbol">`a`</span></span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">示例<span class="number">3</span> 索引列上执行ORDERBY、GROUPBY，MySQL支持ORDERBY优化也支持G ROUPBY 优化</span><br><span class="line">mysql&gt; <span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> a <span class="keyword">FROM</span> t_god <span class="keyword">GROUP</span> <span class="keyword">BY</span> a <span class="keyword">ORDER</span> <span class="keyword">BY</span> a;</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+-------------+---------+------+------+----------+-------------+</span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys | key         | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+-------------+---------+------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | t_god | NULL       | <span class="keyword">index</span> | t_god_idx_1   | t_god_idx_1 | <span class="number">15</span>      | <span class="literal">NULL</span> |    <span class="number">1</span> |   <span class="number">100.00</span> | <span class="keyword">Using</span> <span class="keyword">index</span> |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+-------------+---------+------+------+----------+-------------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">show</span> warnings \G</span><br><span class="line">*************************** <span class="number">1.</span> row ***************************</span><br><span class="line">  Level: Note</span><br><span class="line">   Code: <span class="number">1003</span></span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="symbol">`op`</span>.<span class="symbol">`t_god`</span>.<span class="symbol">`a`</span> <span class="keyword">AS</span> <span class="symbol">`a`</span> <span class="keyword">from</span> <span class="symbol">`op`</span>.<span class="symbol">`t_god`</span> <span class="keyword">group</span> <span class="keyword">by</span> <span class="symbol">`op`</span>.<span class="symbol">`t_god`</span>.<span class="symbol">`a`</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="symbol">`op`</span>.<span class="symbol">`t_god`</span>.<span class="symbol">`a`</span></span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">示例<span class="number">4</span> 带有聚集操作，索引列上执行GROUPBY，MySQL支持GROUPBY优化:</span><br><span class="line">mysql&gt; <span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> a, <span class="built_in">MIN</span>(b) <span class="keyword">FROM</span> t_god <span class="keyword">WHERE</span> c&gt;<span class="number">2</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> a;</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+-------------+---------+------+------+----------+--------------------------+</span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys | key         | key_len | ref  | rows | filtered | Extra                    |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+-------------+---------+------+------+----------+--------------------------+</span><br><span class="line">|  1 | SIMPLE      | t_god | NULL       | <span class="keyword">index</span> | t_god_idx_1   | t_god_idx_1 | <span class="number">15</span>      | <span class="literal">NULL</span> |    <span class="number">1</span> |   <span class="number">100.00</span> | <span class="keyword">Using</span> <span class="keyword">where</span>; Using <span class="keyword">index</span> |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+-------------+---------+------+------+----------+--------------------------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">show</span> warnings \G</span><br><span class="line">*************************** <span class="number">1.</span> row ***************************</span><br><span class="line">  Level: Note</span><br><span class="line">   Code: <span class="number">1003</span></span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="symbol">`op`</span>.<span class="symbol">`t_god`</span>.<span class="symbol">`a`</span> <span class="keyword">AS</span> <span class="symbol">`a`</span>,<span class="built_in">min</span>(<span class="symbol">`op`</span>.<span class="symbol">`t_god`</span>.<span class="symbol">`b`</span>) <span class="keyword">AS</span> <span class="symbol">`MIN(b)`</span> <span class="keyword">from</span> <span class="symbol">`op`</span>.<span class="symbol">`t_god`</span> <span class="keyword">where</span> (<span class="symbol">`op`</span>.<span class="symbol">`t_god`</span>.<span class="symbol">`c`</span> &gt; <span class="number">2</span>) <span class="keyword">group</span> <span class="keyword">by</span> <span class="symbol">`op`</span>.<span class="symbol">`t_god`</span>.<span class="symbol">`a`</span></span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="3-2-ORDER-BY-Optimization"><a href="#3-2-ORDER-BY-Optimization" class="headerlink" title="3.2 ORDER BY Optimization"></a>3.2 ORDER BY Optimization</h3><p><code>MySQL 的 ORDER BY 优化技术:</code></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">创建表，命令如下:</span><br><span class="line"><span class="keyword">CREATE</span> TABLE t_o1 (a1 INT <span class="keyword">UNIQUE</span>, b1 INT);</span><br><span class="line"><span class="keyword">CREATE</span> TABLE t_o2 (a2 INT <span class="keyword">UNIQUE</span>, b2 INT);</span><br><span class="line"></span><br><span class="line">示例1 在索引列上进行排序操作，MySQL支持利用索引进行排序优化。</span><br><span class="line">mysql&gt; <span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> a1 <span class="keyword">FROM</span> t_o1 <span class="keyword">ORDER</span> <span class="keyword">BY</span> a1;</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | t_o1  | NULL       | <span class="keyword">index</span> | <span class="literal">NULL</span>          | a1   | <span class="number">5</span>       | <span class="literal">NULL</span> |    <span class="number">1</span> |   <span class="number">100.00</span> | <span class="keyword">Using</span> <span class="keyword">index</span> |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">show</span> warnings \G</span><br><span class="line">*************************** <span class="number">1.</span> row ***************************</span><br><span class="line">  Level: Note</span><br><span class="line">   Code: <span class="number">1003</span></span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="symbol">`op`</span>.<span class="symbol">`t_o1`</span>.<span class="symbol">`a1`</span> <span class="keyword">AS</span> <span class="symbol">`a1`</span> <span class="keyword">from</span> <span class="symbol">`op`</span>.<span class="symbol">`t_o1`</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="symbol">`op`</span>.<span class="symbol">`t_o1`</span>.<span class="symbol">`a1`</span></span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">示例<span class="number">2</span> 排序下推，MySQL不支持。在非索引列上执行连接，然后排序:</span><br><span class="line">mysql&gt; <span class="keyword">EXPLAIN</span>  <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_o1, t_o2 <span class="keyword">WHERE</span> b1=b2 <span class="keyword">ORDER</span> <span class="keyword">BY</span> b1;</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                              |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><br><span class="line">|  1 | SIMPLE      | t_o1  | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    1 |   100.00 | Using temporary; Using filesort                    |</span><br><span class="line">|  1 | SIMPLE      | t_o2  | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    1 |   100.00 | Using where; Using join buffer (Block Nested Loop) |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><br><span class="line">2 rows in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show warnings \G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">  Level: Note</span><br><span class="line">   Code: 1003</span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="symbol">`op`</span>.<span class="symbol">`t_o1`</span>.<span class="symbol">`a1`</span> <span class="keyword">AS</span> <span class="symbol">`a1`</span>,<span class="symbol">`op`</span>.<span class="symbol">`t_o1`</span>.<span class="symbol">`b1`</span> <span class="keyword">AS</span> <span class="symbol">`b1`</span>,<span class="symbol">`op`</span>.<span class="symbol">`t_o2`</span>.<span class="symbol">`a2`</span> <span class="keyword">AS</span> <span class="symbol">`a2`</span>,<span class="symbol">`op`</span>.<span class="symbol">`t_o2`</span>.<span class="symbol">`b2`</span> <span class="keyword">AS</span> <span class="symbol">`b2`</span> <span class="keyword">from</span> <span class="symbol">`op`</span>.<span class="symbol">`t_o1`</span> <span class="keyword">join</span> <span class="symbol">`op`</span>.<span class="symbol">`t_o2`</span> <span class="keyword">where</span> (<span class="symbol">`op`</span>.<span class="symbol">`t_o2`</span>.<span class="symbol">`b2`</span> = <span class="symbol">`op`</span>.<span class="symbol">`t_o1`</span>.<span class="symbol">`b1`</span>) <span class="keyword">order</span> <span class="keyword">by</span> <span class="symbol">`op`</span>.<span class="symbol">`t_o1`</span>.<span class="symbol">`b1`</span></span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="3-3-DISTINCT-Optimization"><a href="#3-3-DISTINCT-Optimization" class="headerlink" title="3.3 DISTINCT Optimization"></a>3.3 DISTINCT Optimization</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">示例 1 MySQL 支持对于 DISTINCT 消除的优化技术。</span><br><span class="line">在有主键的 e1 列上执行 DISTINCT ，查询执行计划如下:</span><br><span class="line">mysql&gt; <span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> e1 <span class="keyword">FROM</span> <span class="built_in">E</span>;</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | E     | NULL       | <span class="keyword">index</span> | <span class="keyword">PRIMARY</span>,e2    | e2   | <span class="number">5</span>       | <span class="literal">NULL</span> |    <span class="number">5</span> |   <span class="number">100.00</span> | <span class="keyword">Using</span> <span class="keyword">index</span> |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">show</span> warnings \G</span><br><span class="line">*************************** <span class="number">1.</span> row ***************************</span><br><span class="line">  Level: Note</span><br><span class="line">   Code: <span class="number">1003</span></span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="keyword">distinct</span> <span class="symbol">`op`</span>.<span class="symbol">`e`</span>.<span class="symbol">`e1`</span> <span class="keyword">AS</span> <span class="symbol">`e1`</span> <span class="keyword">from</span> <span class="symbol">`op`</span>.<span class="symbol">`e`</span></span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">示例 <span class="number">2</span> MySQL 不支持对于 <span class="keyword">DISTINCT</span> 推入的优化技术。</span><br><span class="line">a2 列是唯一列，又处于反半连接的语义( <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> )，完全可以把 DISTIN CT 下推到表 t_o2 中先执行，然后再执行反半连接操作:</span><br><span class="line">mysql&gt; <span class="keyword">EXPLAIN</span>  <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> b1 <span class="keyword">FROM</span> t_o1 <span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> t_o2 <span class="keyword">WHERE</span> b1=a2);</span><br><span class="line">+----+--------------------+-------+------------+------+---------------+------+---------+------------+------+----------+------------------------------+</span><br><span class="line">| id | select_type        | table | partitions | type | possible_keys | key  | key_len | ref        | rows | filtered | Extra                        |</span><br><span class="line">+----+--------------------+-------+------------+------+---------------+------+---------+------------+------+----------+------------------------------+</span><br><span class="line">|  1 | PRIMARY            | t_o1  | NULL       | ALL  | NULL          | NULL | NULL    | NULL       |    1 |   100.00 | Using where; Using temporary |</span><br><span class="line">|  2 | DEPENDENT SUBQUERY | t_o2  | NULL       | ref  | a2            | a2   | 5       | op.t_o1.b1 |    1 |   100.00 | Using <span class="keyword">index</span>                  |</span><br><span class="line">+----+--------------------+-------+------------+------+---------------+------+---------+------------+------+----------+------------------------------+</span><br><span class="line"><span class="number">2</span> rows <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">2</span> warnings (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">show</span> warnings \G</span><br><span class="line">*************************** <span class="number">1.</span> row ***************************</span><br><span class="line">  Level: Note</span><br><span class="line">   Code: <span class="number">1276</span></span><br><span class="line">Message:</span><br><span class="line">*************************** <span class="number">2.</span> row ***************************</span><br><span class="line">  Level: Note</span><br><span class="line">   Code: <span class="number">1003</span></span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="keyword">distinct</span> <span class="symbol">`op`</span>.<span class="symbol">`t_o1`</span>.<span class="symbol">`b1`</span> <span class="keyword">AS</span> <span class="symbol">`b1`</span> <span class="keyword">from</span> <span class="symbol">`op`</span>.<span class="symbol">`t_o1`</span> <span class="keyword">where</span> (<span class="keyword">not</span>(<span class="keyword">exists</span>(<span class="comment">/* select#2 */</span> <span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> <span class="symbol">`op`</span>.<span class="symbol">`t_o2`</span> <span class="keyword">where</span> (<span class="symbol">`op`</span>.<span class="symbol">`t_o1`</span>.<span class="symbol">`b1`</span> = <span class="symbol">`op`</span>.<span class="symbol">`t_o2`</span>.<span class="symbol">`a2`</span>))))</span><br><span class="line"><span class="number">2</span> rows <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="3-4-LIMIT-Optimization"><a href="#3-4-LIMIT-Optimization" class="headerlink" title="3.4 LIMIT Optimization"></a>3.4 LIMIT Optimization</h3><p>MySQL 的 LIMIT 优化技术 :</p><ol><li>LIMIT 对单表扫描的影响:如果索引扫描可用且花费低于全表扫描，则用索引<br>扫描实现 LIMIT ( LIMIT 取很少量的行，否则优化器更倾向于使用全表扫描)。</li></ol><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">create table t3<span class="params">(a1 int , a2 int , a3 int, key id3(a3)</span>) ;</span><br><span class="line">insert into t3 values<span class="params">(1, 2, 11)</span> ;</span><br><span class="line">insert into t3 values<span class="params">(2, 3, 12)</span> ;</span><br><span class="line">insert into t3 values<span class="params">(3, 4, 13)</span> ;</span><br><span class="line">mysql&gt; explain select * from t3 where a3 &gt; 10 ;</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-------</span>+<span class="params">------------</span>+<span class="params">------</span>+<span class="params">---------------</span>+<span class="params">------</span>+<span class="params">---------</span>+<span class="params">------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">-------------</span>+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-------</span>+<span class="params">------------</span>+<span class="params">------</span>+<span class="params">---------------</span>+<span class="params">------</span>+<span class="params">---------</span>+<span class="params">------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">-------------</span>+</span><br><span class="line">|  1 | SIMPLE      | t3    | NULL       | ALL  | id3           | NULL | NULL    | NULL |    3 |   100.00 | Using where |</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-------</span>+<span class="params">------------</span>+<span class="params">------</span>+<span class="params">---------------</span>+<span class="params">------</span>+<span class="params">---------</span>+<span class="params">------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">-------------</span>+</span><br><span class="line">1 row in <span class="keyword">set</span>, 1 warning <span class="params">(0.00 sec)</span></span><br><span class="line"></span><br><span class="line">mysql&gt; explain select * from t3 where a3 &gt; 10 limit 1;</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-------</span>+<span class="params">------------</span>+<span class="params">-------</span>+<span class="params">---------------</span>+<span class="params">------</span>+<span class="params">---------</span>+<span class="params">------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">-----------------------</span>+</span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys | key  | key_len | ref  | rows | filtered | Extra                 |</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-------</span>+<span class="params">------------</span>+<span class="params">-------</span>+<span class="params">---------------</span>+<span class="params">------</span>+<span class="params">---------</span>+<span class="params">------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">-----------------------</span>+</span><br><span class="line">|  1 | SIMPLE      | t3    | NULL       | range | id3           | id3  | 5       | NULL |    3 |   100.00 | Using index condition |</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-------</span>+<span class="params">------------</span>+<span class="params">-------</span>+<span class="params">---------------</span>+<span class="params">------</span>+<span class="params">---------</span>+<span class="params">------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">-----------------------</span>+</span><br><span class="line">1 row in <span class="keyword">set</span>, 1 warning <span class="params">(0.00 sec)</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>LIMIT 对排序的影响:<br>如果 LIMIT 和 ORDERBY 子句协同使用，当取到 LIMIT<br>设定个数的有序元组数后，后续的排序操作将不再进行。</p></li><li><p>LIMIT 对去重的影响:<br>如果 LIMIT 和 DISTINCT 子句协同使用，当取到 LIMIT 设定个数的唯一的元组数后，后续的去重操作将不再进行。</p></li><li><p>LIMIT 受分组的影响:<br>如果 LIMIT 和 GROUPBY 子句协同使用， GROUPBY 按索引有序计算每个组的总数的过程中， LIMIT 操作不必计数直到下一个分组开始 计算。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GROUP    LIMIT</span><br><span class="line"> <span class="number">1</span>----    +<span class="number">1</span></span><br><span class="line"> <span class="number">1</span></span><br><span class="line"> <span class="number">1</span></span><br><span class="line"> <span class="number">2</span>----    +<span class="number">1</span></span><br><span class="line"> <span class="number">2</span></span><br><span class="line"> <span class="number">3</span>----    +<span class="number">1</span></span><br><span class="line"> ...      ...</span><br></pre></td></tr></table></figure></li><li><p>LIMIT 0 :<br>直接返回空结果集。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from t3 where a1 &gt; 10 order by a3 limit 0;</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-------</span>+<span class="params">------------</span>+<span class="params">------</span>+<span class="params">---------------</span>+<span class="params">------</span>+<span class="params">---------</span>+<span class="params">------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">------------</span>+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra      |</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-------</span>+<span class="params">------------</span>+<span class="params">------</span>+<span class="params">---------------</span>+<span class="params">------</span>+<span class="params">---------</span>+<span class="params">------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">------------</span>+</span><br><span class="line">|  1 | SIMPLE      | NULL  | NULL       | NULL | NULL          | NULL | NULL    | NULL | NULL |     NULL | Zero limit |</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-------</span>+<span class="params">------------</span>+<span class="params">------</span>+<span class="params">---------------</span>+<span class="params">------</span>+<span class="params">---------</span>+<span class="params">------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">------------</span>+</span><br><span class="line">1 row in <span class="keyword">set</span>, 1 warning <span class="params">(0.00 sec)</span></span><br></pre></td></tr></table></figure></li><li><p>MySQL 支持对不带 HAVING 子句的 LIMIT 进行优化。</p></li></ol><h3 id="3-5-SET-Optimization"><a href="#3-5-SET-Optimization" class="headerlink" title="3.5 SET Optimization"></a>3.5 SET Optimization</h3><p>MySQL 的集合操作优化技术:  </p><ol><li><p>MySQL 语法:  </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ...</span><br><span class="line"><span class="keyword">UNION</span> [<span class="keyword">ALL</span> | <span class="keyword">DISTINCT</span>] <span class="keyword">SELECT</span> ...</span><br><span class="line">[<span class="keyword">UNION</span> [<span class="keyword">ALL</span> | <span class="keyword">DISTINCT</span>] <span class="keyword">SELECT</span> ...]</span><br></pre></td></tr></table></figure></li><li><p>查询重写规则: OR重写并集规则 —MySQL不支持</p></li><li>需要引入代价估算的去评估重写后的代价，比较复杂</li></ol><p>ORDER BY 子句去除<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">create table tk1 (a int, b int , c int);</span><br><span class="line">create table tk2 (a int, b int , c int);</span><br><span class="line"></span><br><span class="line">EXPLAIN</span><br><span class="line">(SELECT c FROM tk1 WHERE c&lt;<span class="number">21</span> ORDER BY c)</span><br><span class="line">UNION</span><br><span class="line">(SELECT c FROM tk2 WHERE c&lt;<span class="number">11</span> ORDER BY c);</span><br><span class="line"></span><br><span class="line">mysql&gt; EXPLAIN</span><br><span class="line">    -&gt; (SELECT c FROM tk1 WHERE c&lt;<span class="number">21</span> ORDER BY c)</span><br><span class="line">    -&gt; UNION</span><br><span class="line">    -&gt; (SELECT c FROM tk2 WHERE c&lt;<span class="number">11</span> ORDER BY c);</span><br><span class="line">+----+--------------+------------+------------+------+---------------+------+---------+------+------+----------+-----------------+</span><br><span class="line">| <span class="type">id</span> | <span class="type">select_type</span>  | <span class="type">table</span>      | <span class="type">partitions</span> | <span class="type">type</span> | <span class="type">possible_keys</span> | <span class="type">key</span>  | <span class="type">key_len</span> | <span class="type">ref</span>  | <span class="type">rows</span> | <span class="type">filtered</span> | <span class="type">Extra</span>           |<span class="type"></span></span><br><span class="line"><span class="type">+----+--------------+------------+------------+------+---------------+------+---------+------+------+----------+-----------------+</span></span><br><span class="line"><span class="type">|  1</span> | <span class="type">PRIMARY</span>      | <span class="type">tk1</span>        | <span class="type">NULL</span>       | <span class="type">ALL</span>  | <span class="type">NULL</span>          | <span class="type">NULL</span> | <span class="type">NULL</span>    | <span class="type">NULL</span> |    <span class="type">1</span> |   <span class="type">100</span><span class="number">.00</span> | <span class="type">Using</span> <span class="keyword">where</span>     |<span class="type"></span></span><br><span class="line"><span class="type">|  2</span> | <span class="type">UNION</span>        | <span class="type">tk2</span>        | <span class="type">NULL</span>       | <span class="type">ALL</span>  | <span class="type">NULL</span>          | <span class="type">NULL</span> | <span class="type">NULL</span>    | <span class="type">NULL</span> |    <span class="type">1</span> |   <span class="type">100</span><span class="number">.00</span> | <span class="type">Using</span> <span class="keyword">where</span>     |<span class="type"></span></span><br><span class="line"><span class="type">| NULL</span> | <span class="type">UNION</span> RESULT | <span class="type">&lt;union1</span>,<span class="number">2</span>&gt; | <span class="type">NULL</span>       | <span class="type">ALL</span>  | <span class="type">NULL</span>          | <span class="type">NULL</span> | <span class="type">NULL</span>    | <span class="type">NULL</span> | <span class="type">NULL</span> |     <span class="type">NULL</span> | <span class="type">Using</span> temporary |<span class="type"></span></span><br><span class="line"><span class="type">+----+--------------+------------+------------+------+---------------+------+---------+------+------+----------+-----------------+</span></span><br><span class="line"><span class="type"></span></span><br><span class="line"><span class="type">mysql</span>&gt; EXPLAIN</span><br><span class="line">    -&gt; (SELECT c FROM tk1 WHERE c&lt;<span class="number">21</span> ORDER BY c limit <span class="number">3</span>)</span><br><span class="line">    -&gt; UNION</span><br><span class="line">    -&gt; (SELECT c FROM tk2 WHERE c&lt;<span class="number">11</span> ORDER BY c limit <span class="number">5</span>);</span><br><span class="line">+----+--------------+------------+------------+------+---------------+------+---------+------+------+----------+-----------------------------+</span><br><span class="line">| <span class="type">id</span> | <span class="type">select_type</span>  | <span class="type">table</span>      | <span class="type">partitions</span> | <span class="type">type</span> | <span class="type">possible_keys</span> | <span class="type">key</span>  | <span class="type">key_len</span> | <span class="type">ref</span>  | <span class="type">rows</span> | <span class="type">filtered</span> | <span class="type">Extra</span>                       |<span class="type"></span></span><br><span class="line"><span class="type">+----+--------------+------------+------------+------+---------------+------+---------+------+------+----------+-----------------------------+</span></span><br><span class="line"><span class="type">|  1</span> | <span class="type">PRIMARY</span>      | <span class="type">tk1</span>        | <span class="type">NULL</span>       | <span class="type">ALL</span>  | <span class="type">NULL</span>          | <span class="type">NULL</span> | <span class="type">NULL</span>    | <span class="type">NULL</span> |    <span class="type">1</span> |   <span class="type">100</span><span class="number">.00</span> | <span class="type">Using</span> <span class="keyword">where</span>; Using filesort |<span class="type"></span></span><br><span class="line"><span class="type">|  2</span> | <span class="type">UNION</span>        | <span class="type">tk2</span>        | <span class="type">NULL</span>       | <span class="type">ALL</span>  | <span class="type">NULL</span>          | <span class="type">NULL</span> | <span class="type">NULL</span>    | <span class="type">NULL</span> |    <span class="type">1</span> |   <span class="type">100</span><span class="number">.00</span> | <span class="type">Using</span> <span class="keyword">where</span>; Using filesort |<span class="type"></span></span><br><span class="line"><span class="type">| NULL</span> | <span class="type">UNION</span> RESULT | <span class="type">&lt;union1</span>,<span class="number">2</span>&gt; | <span class="type">NULL</span>       | <span class="type">ALL</span>  | <span class="type">NULL</span>          | <span class="type">NULL</span> | <span class="type">NULL</span>    | <span class="type">NULL</span> | <span class="type">NULL</span> |     <span class="type">NULL</span> | <span class="type">Using</span> temporary             |<span class="type"></span></span><br><span class="line"><span class="type">+----+--------------+------------+------------+------+---------------+------+---------+------+------+----------+-----------------------------+</span></span><br><span class="line"><span class="type">3</span> rows <span class="built_in">in</span> <span class="built_in">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><h3 id="3-6-Other-Optimization"><a href="#3-6-Other-Optimization" class="headerlink" title="3.6 Other Optimization"></a>3.6 Other Optimization</h3><p>MySQL 的其他优化技术:  </p><ol><li>SELECT DISTINCT a FROM t1 LIMIT 1;</li><li>SELECT DISTICT MAX(a) FROM t1;</li></ol><h2 id="4-Logical-query-optimization-and-Heuristics-Rule"><a href="#4-Logical-query-optimization-and-Heuristics-Rule" class="headerlink" title="4. Logical query optimization and Heuristics Rule"></a>4. Logical query optimization and Heuristics Rule</h2><ol><li>Logical query optimization—relational algebra, 数学规则<br>理论依据,公式推导(定理)</li><li>Heuristics Rule— 经验规则<br>实践中检验得出的经验 ( 公理 )</li></ol><p>示例 : 常见的一些启发式规则</p><ol><li>嵌套连接消除 : 如果都是内连接 , 则可以把表示嵌套关系的括号去掉 Ajoin(BjoinC) == AjoinBjoinC</li><li>选择操作下推</li><li>投影操作下推</li></ol><p>示例 : 常见的一些经验规则</p><ol><li>在索引键上执行排序操作 , 通常利用索引的有序性按序读取数据而不 进行排序</li><li>选择率低于 <code>10%</code> 时 , 利用索引的效果通常比读表数据的效果好</li><li>当表的数据量较少时,全表扫描可能优于其它方式(如利用索引的<br>方式)</li></ol><hr><p>Good luck!<br>冬日暖阳</p>]]></content>
    
    <summary type="html">
    
      MySQL优化
    
    </summary>
    
      <category term="MySQL" scheme="http://mydba.xyz/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL优化 -- 8 数据库的约束规则与语义优化</title>
    <link href="http://mydba.xyz/mysql/optimization/op8.html"/>
    <id>http://mydba.xyz/mysql/optimization/op8.html</id>
    <published>2019-05-20T06:12:19.000Z</published>
    <updated>2019-05-20T06:12:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Data-Integrity-Constraint-数据完整性约束"><a href="#1-Data-Integrity-Constraint-数据完整性约束" class="headerlink" title="1. Data Integrity Constraint (数据完整性约束)"></a>1. Data Integrity Constraint (数据完整性约束)</h2><h3 id="1-1-What-is-Data-Integrity-Constraint"><a href="#1-1-What-is-Data-Integrity-Constraint" class="headerlink" title="1.1  What is Data Integrity Constraint ?"></a>1.1  What is Data Integrity Constraint ?</h3><p>数据完整性（Data Integrity）:<br>是指数据的精确性（Accuracy） 和可靠性（Reliability）。</p><p>作用:<br>1．防止用户向数据库中添加不合语义的数据。<br>2．利用基于DBMS的完整性控制机制来实现业务规则，易于定义，容易理解，而且可以降低应用程序的复杂性，提高应用程序的运行效率。同时，基于DBMS的完整性控制机制是集中管理的，因此比应用程序更容易实现数据库的完整性。</p><h3 id="1-2-The-type-of-Data-Integrity-Constraint"><a href="#1-2-The-type-of-Data-Integrity-Constraint" class="headerlink" title="1.2  The type of Data Integrity Constraint"></a>1.2  The type of Data Integrity Constraint</h3><p>数据完整性分为四类：</p><ol><li><p>实体完整性（Entity Integrity）:自己</p><blockquote><p>一个关系对应现实世界中一个实体集。–ER模型<br>现实世界中的实体具有某种惟一性标识。–主键<br>主关键字是多个属性的组合，则所有主属性均不得取空值。–隐含的索引</p></blockquote></li><li><p>域完整性（Domain Integrity）: 自己的局部</p><blockquote><p>保证数据库字段取值的合理性。<br>属性值应是域中的值，这是关系模式规定了的。<br>包括：<br>1 检查（CHECK）<br>2 默认值（DEFAULT）<br>3 不为空（NOT NULL）<br>4 可为空（NULL）等  </p></blockquote></li></ol><ol start="3"><li>参照完整性（Referential Integrity）: 自己与其他”实体”的关系<blockquote><p>参照完整性是定义建立关系之间联系的主关键字与外部关键字引用的约束条件。<br>1 关系数据库中通常都包含多个存在相互联系的关系，关系与关系之间的联系是通过公共属性来实现的。<br>2 所谓公共属性，它是一个关系R(称为被参照关系或目标关系)的主关键字，同时又是另一关系K(称为参照关系)的外部关键字。如果参照关系K中外部关键字的取值，要么与被参照关系R中某元组主关键字的值相同，要么取空值，那么，在这两个关系间建立关联的主关键字和外部关键字引用，符合参照完整性规则要求。如果参照关系K的外部关键字也是其主关键字，根据实体完整性要求，主关键字不得取空值，因此，参照关系K外部关键字的取值实际上只能取相应被参照关系R中已经存在的主关键字值。</p></blockquote></li></ol><ol start="4"><li>用户自定义完整性（User-definedIntegrity）:用户增加的限制<blockquote><p>用户定义完整性则是根据应用环境的要求和实际的需要，对某一具体应用所涉及的数据提出约束性条件。<br>这一约束机制一般不应由应用程序提供，而应有由关系模型提供定义并检验。<br>用户定义完整性主要包括字段有效性约束和记录有效性。</p></blockquote></li></ol><h2 id="2-Sematic-Optimization"><a href="#2-Sematic-Optimization" class="headerlink" title="2. Sematic Optimization"></a>2. Sematic Optimization</h2><h3 id="2-1-What-is-Semantic-Optimization"><a href="#2-1-What-is-Semantic-Optimization" class="headerlink" title="2.1 What is Semantic Optimization ?"></a>2.1 What is Semantic Optimization ?</h3><p>因为语义的原因，使得SQL可以被优化。包括两个基本概念：</p><ol><li><p>语义转换。因为完整性限制等的原因使得一个转换成立的情况称为语义转换。</p></li><li><p>语义优化。因为语义转换形成的优化称为语义优化。</p><p> 语义转换其实是根据完整性约束等信息对“某特定语义”进行推理，进而得到的一种查询效率不同但结果相同的查询。</p><p> 语义优化是从语义的角度对SQL进行优化，不是一种形式上的优化，所以其优化的范围，可能覆盖其他类型的优化范围。</p></li></ol><p>语义优化常见的方式：</p><ol><li><p>连接消除（Join Elimination）：</p><p> 对一些连接操作先不必评估代价，根据已知信息（主要依据完整性约束等，但不全是依据完整性约束）能推知结果或得到一个简化的操作。</p><p> 例如：<br>   利用A、B两个基表做自然连接，创建一个视图V，如果在视图V上执行查询只涉及其中一个基表的信息，则对视图的查询完全可以转化为对某个基表的查询。</p></li><li><p>连接引入（Join Introduction）。</p><p>   增加连接有助于原始关系变小或原关系的选择率降低。</p></li><li><p>谓词引入（Predicate Introduction）：</p><p>   根据完整性约束等信息，引入新谓词，如引入基于索引的列，可能使得查询更快；</p><p>   例如：<br>   一个表上，有“c1&lt;c2”的列约束，c2列上存在一个索引，查询语句中的WHERE条件有“c1&gt;200”，则可以推知“c2&gt;200”，</p><p>   WHER条件变更为“c1&gt;200 AND c2&gt;200 AND c1&lt;c2”，</p><p>   由此可以利用c2列上的索引，对查询语句进行优化；如果c2列上的索引的选择率很低，则优化效果会更高。</p></li><li><p>检测空回答集（Detecting the Empty Answer Set）：</p><p> 查询语句中的谓词与约束相悖，可以推知条件结果为FALSE，也许最终的结果集能为空；</p><p> 例如：<br> CHECK约束限定“score”列的范围是60到100，而一个查询条件是“score&lt;60”，则能立刻推知条件不成立。</p></li><li><p>排序优化（Order Optimizer）：</p><p> ORDERBY操作通常由索引或排序（sort）完成；如果能够利用索引，则排序操作可省略；另外，结合分组等操作，考虑ORDERBY操作的优化。</p></li><li><p>唯一性使用（Exploiting Uniqueness）：</p><p> 利用唯一性、索引等特点，检查是否存在不必要的DISTINCT操作</p><p> 例如：<br> 在主键上执行DISTINCT操作，若有则可以把DISTINCT消除掉。</p></li></ol><h3 id="2-2-How-to-do-Semantic-Optimization-for-MySQL"><a href="#2-2-How-to-do-Semantic-Optimization-for-MySQL" class="headerlink" title="2.2 How to do Semantic Optimization for MySQL ?"></a>2.2 How to do Semantic Optimization for MySQL ?</h3><p>示例1<br>语义优化中的检测空回答集技术，MySQL支持。<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">创建表，name列非空，对name列进行非空判断，并插入一些数据，具体命令如下：</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> TABLE student (name VARCHAR(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, age INT);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span> (<span class="string">'tom'</span>,<span class="number">19</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span> (<span class="string">'Marry'</span>,<span class="number">17</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span> (<span class="string">'Jack'</span>,<span class="number">19</span>);</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">explain</span> EXTENDED <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> name <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">AND</span> age&gt;<span class="number">18</span>;</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra            |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------------+</span><br><span class="line">|  1 | SIMPLE      | NULL  | NULL       | NULL | NULL          | NULL | NULL    | NULL | NULL |     NULL | Impossible WHERE |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------------+</span><br><span class="line">1 row in set, 2 warnings (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; mysql warnings \G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">  Level: Warning</span><br><span class="line">   Code: 1681</span><br><span class="line">Message:</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">  Level: Note</span><br><span class="line">   Code: 1003</span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="symbol">`op`</span>.<span class="symbol">`student`</span>.<span class="symbol">`name`</span> <span class="keyword">AS</span> <span class="symbol">`name`</span>,<span class="symbol">`op`</span>.<span class="symbol">`student`</span>.<span class="symbol">`age`</span> <span class="keyword">AS</span> <span class="symbol">`age`</span> <span class="keyword">from</span> <span class="symbol">`op`</span>.<span class="symbol">`student`</span> <span class="keyword">where</span> <span class="number">0</span></span><br><span class="line"><span class="number">2</span> rows <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">创建表，增加CHECK约束，MySQL不能利用CHECK约束做优化。创建表：</span><br><span class="line"><span class="keyword">CREATE</span> TABLE SC (score INT, CHECK(score&lt;<span class="number">100</span> <span class="keyword">AND</span> score&gt;<span class="number">60</span>));</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">EXPLAIN</span>  <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> SC <span class="keyword">WHERE</span> score&lt;<span class="number">60</span>;</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | SC    | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    1 |   100.00 | Using where |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show warnings\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">  Level: Note</span><br><span class="line">   Code: 1003</span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="symbol">`op`</span>.<span class="symbol">`sc`</span>.<span class="symbol">`score`</span> <span class="keyword">AS</span> <span class="symbol">`score`</span> <span class="keyword">from</span> <span class="symbol">`op`</span>.<span class="symbol">`sc`</span> <span class="keyword">where</span> (<span class="symbol">`op`</span>.<span class="symbol">`sc`</span>.<span class="symbol">`score`</span> &lt; <span class="number">60</span>)</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p>示例2<br>语义优化中的谓词引入技术，MySQL不支持。<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">创建表如下，列c2有唯一索引存在，并创建CHECK约束：</span><br><span class="line"><span class="keyword">CREATE</span> TABLE C (c1 INT, c2 INT <span class="keyword">UNIQUE</span>, CHECK(c1&lt;c2));</span><br><span class="line"></span><br><span class="line">在c1列上进行条件查询，查询执行计划:</span><br><span class="line">mysql&gt; <span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> C <span class="keyword">WHERE</span> c1&gt;<span class="number">60</span>;</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | C     | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    1 |   100.00 | Using where |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show warnings \G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">  Level: Note</span><br><span class="line">   Code: 1003</span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="symbol">`op`</span>.<span class="symbol">`c`</span>.<span class="symbol">`c1`</span> <span class="keyword">AS</span> <span class="symbol">`c1`</span>,<span class="symbol">`op`</span>.<span class="symbol">`c`</span>.<span class="symbol">`c2`</span> <span class="keyword">AS</span> <span class="symbol">`c2`</span> <span class="keyword">from</span> <span class="symbol">`op`</span>.<span class="symbol">`c`</span> <span class="keyword">where</span> (<span class="symbol">`op`</span>.<span class="symbol">`c`</span>.<span class="symbol">`c1`</span> &gt; <span class="number">60</span>)</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">创建表如下，列c2有唯一索引存在，并创建CHECK约束：</span><br><span class="line"><span class="keyword">CREATE</span> TABLE C (c1 INT, c2 INT <span class="keyword">UNIQUE</span>, CHECK(c1&lt;c2));</span><br><span class="line">mysql&gt; <span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> C <span class="keyword">WHERE</span> c1&gt;<span class="number">60</span> <span class="keyword">and</span> c2&gt;<span class="number">60</span>;</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+------------------------------------+</span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys | key  | key_len | ref  | rows | filtered | Extra                              |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+------------------------------------+</span><br><span class="line">|  1 | SIMPLE      | C     | NULL       | range | c2            | c2   | 5       | NULL |    1 |   100.00 | Using <span class="keyword">index</span> condition; Using where |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+------------------------------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show warnings \G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">  Level: Note</span><br><span class="line">   Code: 1003</span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="symbol">`op`</span>.<span class="symbol">`c`</span>.<span class="symbol">`c1`</span> <span class="keyword">AS</span> <span class="symbol">`c1`</span>,<span class="symbol">`op`</span>.<span class="symbol">`c`</span>.<span class="symbol">`c2`</span> <span class="keyword">AS</span> <span class="symbol">`c2`</span> <span class="keyword">from</span> <span class="symbol">`op`</span>.<span class="symbol">`c`</span> <span class="keyword">where</span> ((<span class="symbol">`op`</span>.<span class="symbol">`c`</span>.<span class="symbol">`c1`</span> &gt; <span class="number">60</span>) <span class="keyword">and</span> (<span class="symbol">`op`</span>.<span class="symbol">`c`</span>.<span class="symbol">`c2`</span> &gt; <span class="number">60</span>))</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p>示例3<br>语义优化中的排序优化，MySQL支持，但条件较为苛刻。<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">创建表如下：</span><br><span class="line"><span class="keyword">CREATE</span> TABLE D (d1 INT, d2 INT <span class="keyword">UNIQUE</span>);</span><br><span class="line">对D进行自连接，连接条件使用有唯一索引的列，且连接条件的列与排序列相同。</span><br><span class="line"></span><br><span class="line">查询执行计划：</span><br><span class="line">mysql&gt; <span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> D F1, D F2 <span class="keyword">WHERE</span> F1.d2=F2.d2  <span class="keyword">ORDER</span> <span class="keyword">BY</span> F1.d2;</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+----------+------+----------+-----------------------------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref      | rows | filtered | Extra                       |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+----------+------+----------+-----------------------------+</span><br><span class="line">|  1 | SIMPLE      | F1    | NULL       | ALL  | d2            | NULL | NULL    | NULL     |    1 |   100.00 | Using where; Using filesort |</span><br><span class="line">|  1 | SIMPLE      | F2    | NULL       | ref  | d2            | d2   | 5       | op.F1.d2 |    1 |   100.00 | NULL                        |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+----------+------+----------+-----------------------------+</span><br><span class="line">2 rows in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show warnings \G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">  Level: Note</span><br><span class="line">   Code: 1003</span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="symbol">`op`</span>.<span class="symbol">`f1`</span>.<span class="symbol">`d1`</span> <span class="keyword">AS</span> <span class="symbol">`d1`</span>,<span class="symbol">`op`</span>.<span class="symbol">`f1`</span>.<span class="symbol">`d2`</span> <span class="keyword">AS</span> <span class="symbol">`d2`</span>,<span class="symbol">`op`</span>.<span class="symbol">`f2`</span>.<span class="symbol">`d1`</span> <span class="keyword">AS</span> <span class="symbol">`d1`</span>,<span class="symbol">`op`</span>.<span class="symbol">`f2`</span>.<span class="symbol">`d2`</span> <span class="keyword">AS</span> <span class="symbol">`d2`</span> <span class="keyword">from</span> <span class="symbol">`op`</span>.<span class="symbol">`d`</span> <span class="symbol">`f1`</span> <span class="keyword">join</span> <span class="symbol">`op`</span>.<span class="symbol">`d`</span> <span class="symbol">`f2`</span> <span class="keyword">where</span> (<span class="symbol">`op`</span>.<span class="symbol">`f2`</span>.<span class="symbol">`d2`</span> = <span class="symbol">`op`</span>.<span class="symbol">`f1`</span>.<span class="symbol">`d2`</span>) <span class="keyword">order</span> <span class="keyword">by</span> <span class="symbol">`op`</span>.<span class="symbol">`f1`</span>.<span class="symbol">`d2`</span></span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> d2 <span class="keyword">FROM</span> D <span class="keyword">ORDER</span> <span class="keyword">BY</span> d2;</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | D     | NULL       | <span class="keyword">index</span> | <span class="literal">NULL</span>          | d2   | <span class="number">5</span>       | <span class="literal">NULL</span> |    <span class="number">1</span> |   <span class="number">100.00</span> | <span class="keyword">Using</span> <span class="keyword">index</span> |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">show</span> warnings \G</span><br><span class="line">*************************** <span class="number">1.</span> row ***************************</span><br><span class="line">  Level: Note</span><br><span class="line">   Code: <span class="number">1003</span></span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="symbol">`op`</span>.<span class="symbol">`d`</span>.<span class="symbol">`d2`</span> <span class="keyword">AS</span> <span class="symbol">`d2`</span> <span class="keyword">from</span> <span class="symbol">`op`</span>.<span class="symbol">`d`</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="symbol">`op`</span>.<span class="symbol">`d`</span>.<span class="symbol">`d2`</span></span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p>示例4<br>语义优化技术中的唯一性使用，MySQL支持。<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">创建表：</span><br><span class="line"><span class="keyword">CREATE</span> TABLE <span class="built_in">E</span> (e1 INT, e2 INT <span class="keyword">UNIQUE</span>,e3 INT, <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span>(e1));</span><br><span class="line"></span><br><span class="line">插入数据：</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="built_in">E</span> <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="built_in">E</span> <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="built_in">E</span> <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="built_in">E</span> <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="built_in">E</span> <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在有主键的e1列上执行DISTINCT，查询执行计划如下：</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> e1 <span class="keyword">FROM</span> <span class="built_in">E</span>;</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | E     | NULL       | <span class="keyword">index</span> | <span class="keyword">PRIMARY</span>,e2    | e2   | <span class="number">5</span>       | <span class="literal">NULL</span> |    <span class="number">5</span> |   <span class="number">100.00</span> | <span class="keyword">Using</span> <span class="keyword">index</span> |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">show</span> warnings \G</span><br><span class="line">*************************** <span class="number">1.</span> row ***************************</span><br><span class="line">  Level: Note</span><br><span class="line">   Code: <span class="number">1003</span></span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="keyword">distinct</span> <span class="symbol">`op`</span>.<span class="symbol">`e`</span>.<span class="symbol">`e1`</span> <span class="keyword">AS</span> <span class="symbol">`e1`</span> <span class="keyword">from</span> <span class="symbol">`op`</span>.<span class="symbol">`e`</span></span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">在有唯一索引的e2列上执行<span class="keyword">DISTINCT</span>，查询执行计划如下：</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> e2 <span class="keyword">FROM</span> <span class="built_in">E</span>;</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | E     | NULL       | <span class="keyword">index</span> | e2            | e2   | <span class="number">5</span>       | <span class="literal">NULL</span> |    <span class="number">5</span> |   <span class="number">100.00</span> | <span class="keyword">Using</span> <span class="keyword">index</span> |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">show</span> warnings \G</span><br><span class="line">*************************** <span class="number">1.</span> row ***************************</span><br><span class="line">  Level: Note</span><br><span class="line">   Code: <span class="number">1003</span></span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="keyword">distinct</span> <span class="symbol">`op`</span>.<span class="symbol">`e`</span>.<span class="symbol">`e2`</span> <span class="keyword">AS</span> <span class="symbol">`e2`</span> <span class="keyword">from</span> <span class="symbol">`op`</span>.<span class="symbol">`e`</span></span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">在普通的e3列上执行<span class="keyword">DISTINCT</span>，查询执行计划如下：</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> e3 <span class="keyword">FROM</span> <span class="built_in">E</span>;</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra           |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------+</span><br><span class="line">|  1 | SIMPLE      | E     | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    5 |   100.00 | Using temporary |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show warnings \G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">  Level: Note</span><br><span class="line">   Code: 1003</span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="keyword">distinct</span> <span class="symbol">`op`</span>.<span class="symbol">`e`</span>.<span class="symbol">`e3`</span> <span class="keyword">AS</span> <span class="symbol">`e3`</span> <span class="keyword">from</span> <span class="symbol">`op`</span>.<span class="symbol">`e`</span></span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">DISTINCT</span> e1:  <span class="keyword">Using</span> <span class="keyword">index</span></span><br><span class="line"><span class="keyword">DISTINCT</span> e2:  <span class="keyword">Using</span> <span class="keyword">index</span></span><br><span class="line"><span class="keyword">DISTINCT</span> e3:  <span class="keyword">Using</span> temporary</span><br></pre></td></tr></table></figure></p><p>示例5<br>语义优化中的连接消除技术，MySQL不支持。<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">创建表和视图：</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> TABLE A (a1 INT, a2 INT);</span><br><span class="line"><span class="keyword">CREATE</span> TABLE B (b1 INT, b2 INT);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> V <span class="keyword">AS</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> A, B;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> A <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> A <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> A <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">对视图进行查询，只查询视图的某个基表的列，查询执行计划如下：</span><br><span class="line">mysql&gt; <span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> a1, a2 <span class="keyword">FROM</span> V <span class="keyword">WHERE</span> a1&gt;<span class="number">2</span>;</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                              |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><br><span class="line">|  1 | SIMPLE      | b     | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    1 |   100.00 | NULL                                               |</span><br><span class="line">|  1 | SIMPLE      | a     | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    3 |    33.33 | Using where; Using join buffer (Block Nested Loop) |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><br><span class="line">2 rows in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show warnings \G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">  Level: Note</span><br><span class="line">   Code: 1003</span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="symbol">`op`</span>.<span class="symbol">`a`</span>.<span class="symbol">`a1`</span> <span class="keyword">AS</span> <span class="symbol">`a1`</span>,<span class="symbol">`op`</span>.<span class="symbol">`a`</span>.<span class="symbol">`a2`</span> <span class="keyword">AS</span> <span class="symbol">`a2`</span> <span class="keyword">from</span> <span class="symbol">`op`</span>.<span class="symbol">`a`</span> <span class="keyword">join</span> <span class="symbol">`op`</span>.<span class="symbol">`b`</span> <span class="keyword">where</span> (<span class="symbol">`op`</span>.<span class="symbol">`a`</span>.<span class="symbol">`a1`</span> &gt; <span class="number">2</span>)</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><hr><p>Good luck!<br>冬日暖阳</p>]]></content>
    
    <summary type="html">
    
      MySQL优化
    
    </summary>
    
      <category term="MySQL" scheme="http://mydba.xyz/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL优化 -- 7 外连接消除、嵌套连接消除与连接消除</title>
    <link href="http://mydba.xyz/mysql/optimization/op7.html"/>
    <id>http://mydba.xyz/mysql/optimization/op7.html</id>
    <published>2018-01-03T07:18:04.000Z</published>
    <updated>2018-01-03T07:18:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="外连接消除、连接消除与嵌套连接消除"><a href="#外连接消除、连接消除与嵌套连接消除" class="headerlink" title="外连接消除、连接消除与嵌套连接消除"></a>外连接消除、连接消除与嵌套连接消除</h1><p>Outer Join Elimination、 Join Elimination、 Nest Join Elimination</p><h2 id="Outer-Join-Elimination"><a href="#Outer-Join-Elimination" class="headerlink" title="Outer Join Elimination"></a>Outer Join Elimination</h2><h3 id="What-is-Outer-Join"><a href="#What-is-Outer-Join" class="headerlink" title="What is Outer Join ?"></a>What is Outer Join ?</h3><p><img src="/img/markdown-img-paste-20180104153553920.png" alt="外连接"></p><p>内连接为：A 表和 B 表都满足连接条件的部分。<br>外连接为：A 表和 B 表都满足连接条件的部分 加上 A 满足连接条件而 B 不满足连接条件的部分。（A 为主连接表的情况）。  </p><h3 id="The-type-of-Outer-Join"><a href="#The-type-of-Outer-Join" class="headerlink" title="The type of Outer Join"></a>The type of Outer Join</h3><ol><li>LEFT JOIN / LEFT OUTER JOIN：左外连接<br>左向外连接的结果集包括：LEFT OUTER子句中指定的左表的所有行，而不仅仅是连接列所匹配的行。如果左表的某行在右表中没有匹配行，则在相关联的结果集行中右表的所有选择列表列均为空值。       </li><li>RIGHT JOIN / RIGHT  OUTER  JOIN：右外连接<br>右向外连接是左向外联接的反向连接。将返回右表的所有行。如果右表的某行在左表中没有匹配行，则将为左表返回空值。       </li><li>FULL JOIN / FULL OUTER JOIN：全外连接<br>全外连接返回左表和右表中的所有行。当某行在另一个表中没有匹配行时，则另一个表的选择列表列包含空值。如果表之间有匹配行，则整个结果集行包含基表的数据值。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> book ;</span><br><span class="line">+<span class="comment">--------+------------------+-----------+</span></span><br><span class="line">| bookid | bookname         | studentid |</span><br><span class="line">+<span class="comment">--------+------------------+-----------+</span></span><br><span class="line">|      1 | &lt;&lt;培训&gt;&gt;         |         3 |</span><br><span class="line">|      2 | &lt;&lt;成功秘诀&gt;&gt;     |         5 |</span><br><span class="line">|      3 | &lt;&lt;红楼梦&gt;&gt;       |         3 |</span><br><span class="line">|      4 | &lt;&lt;西厢记&gt;&gt;       |         2 |</span><br><span class="line">|      5 | &lt;&lt;水浒传&gt;&gt;       |         6 |</span><br><span class="line">|      6 | &lt;&lt;三国演义&gt;&gt;     |        10 |</span><br><span class="line">+<span class="comment">--------+------------------+-----------+</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student ;</span><br><span class="line">+<span class="comment">-----------+--------------+</span></span><br><span class="line">| studentid | stundentname |</span><br><span class="line">+<span class="comment">-----------+--------------+</span></span><br><span class="line">|         1 | 张三         |</span><br><span class="line">|         2 | 李四         |</span><br><span class="line">|         3 | 关羽         |</span><br><span class="line">|         4 | 张飞         |</span><br><span class="line">|         5 | 黄聪         |</span><br><span class="line">|         6 | 李逵         |</span><br><span class="line">|         7 | 赵娜         |</span><br><span class="line">|         8 | 王萌         |</span><br><span class="line">+<span class="comment">-----------+--------------+</span></span><br><span class="line"><span class="comment">-- 内连接</span></span><br><span class="line">root@127.0.0.1 [op]&gt; SELECT *</span><br><span class="line">    -&gt; FROM book AS b, student AS s</span><br><span class="line">    -&gt; WHERE b.studentid=s.studentid</span><br><span class="line">    -&gt;  ;</span><br><span class="line">+<span class="comment">--------+------------------+-----------+-----------+--------------+</span></span><br><span class="line">| bookid | bookname         | studentid | studentid | stundentname |</span><br><span class="line">+<span class="comment">--------+------------------+-----------+-----------+--------------+</span></span><br><span class="line">|      4 | &lt;&lt;西厢记&gt;&gt;       |         2 |         2 | 李四         |</span><br><span class="line">|      1 | &lt;&lt;培训&gt;&gt;         |         3 |         3 | 关羽         |</span><br><span class="line">|      3 | &lt;&lt;红楼梦&gt;&gt;       |         3 |         3 | 关羽         |</span><br><span class="line">|      2 | &lt;&lt;成功秘诀&gt;&gt;     |         5 |         5 | 黄聪         |</span><br><span class="line">|      5 | &lt;&lt;水浒传&gt;&gt;       |         6 |         6 | 李逵         |</span><br><span class="line">+<span class="comment">--------+------------------+-----------+-----------+--------------+</span></span><br><span class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 左外连接</span></span><br><span class="line">root@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> [op]&gt; <span class="keyword">SELECT</span> *</span><br><span class="line">    -&gt; <span class="keyword">FROM</span> book <span class="keyword">AS</span> b <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> student <span class="keyword">AS</span> s</span><br><span class="line">    -&gt; <span class="keyword">ON</span> b.studentid=s.studentid</span><br><span class="line">    -&gt; ;</span><br><span class="line">+<span class="comment">--------+------------------+-----------+-----------+--------------+</span></span><br><span class="line">| bookid | bookname         | studentid | studentid | stundentname |</span><br><span class="line">+<span class="comment">--------+------------------+-----------+-----------+--------------+</span></span><br><span class="line">|      4 | &lt;&lt;西厢记&gt;&gt;       |         2 |         2 | 李四         |</span><br><span class="line">|      1 | &lt;&lt;培训&gt;&gt;         |         3 |         3 | 关羽         |</span><br><span class="line">|      3 | &lt;&lt;红楼梦&gt;&gt;       |         3 |         3 | 关羽         |</span><br><span class="line">|      2 | &lt;&lt;成功秘诀&gt;&gt;     |         5 |         5 | 黄聪         |</span><br><span class="line">|      5 | &lt;&lt;水浒传&gt;&gt;       |         6 |         6 | 李逵         |</span><br><span class="line">|      6 | &lt;&lt;三国演义&gt;&gt;     |        10 |      NULL | NULL         |</span><br><span class="line">+<span class="comment">--------+------------------+-----------+-----------+--------------+</span></span><br><span class="line">6 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- 右外连接</span></span><br><span class="line">root@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> [op]&gt; <span class="keyword">SELECT</span> *</span><br><span class="line">    -&gt; <span class="keyword">FROM</span> book <span class="keyword">AS</span> b <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span></span><br><span class="line">    -&gt; student <span class="keyword">AS</span> s</span><br><span class="line">    -&gt; <span class="keyword">ON</span> b.studentid=s.studentid</span><br><span class="line">    -&gt; ;</span><br><span class="line">+<span class="comment">--------+------------------+-----------+-----------+--------------+</span></span><br><span class="line">| bookid | bookname         | studentid | studentid | stundentname |</span><br><span class="line">+<span class="comment">--------+------------------+-----------+-----------+--------------+</span></span><br><span class="line">|      1 | &lt;&lt;培训&gt;&gt;         |         3 |         3 | 关羽         |</span><br><span class="line">|      2 | &lt;&lt;成功秘诀&gt;&gt;     |         5 |         5 | 黄聪         |</span><br><span class="line">|      3 | &lt;&lt;红楼梦&gt;&gt;       |         3 |         3 | 关羽         |</span><br><span class="line">|      4 | &lt;&lt;西厢记&gt;&gt;       |         2 |         2 | 李四         |</span><br><span class="line">|      5 | &lt;&lt;水浒传&gt;&gt;       |         6 |         6 | 李逵         |</span><br><span class="line">|   NULL | NULL             |      NULL |         4 | 张飞         |</span><br><span class="line">|   NULL | NULL             |      NULL |         7 | 赵娜         |</span><br><span class="line">|   NULL | NULL             |      NULL |         8 | 王萌         |</span><br><span class="line">|   NULL | NULL             |      NULL |         1 | 张三         |</span><br><span class="line">+<span class="comment">--------+------------------+-----------+-----------+--------------+</span></span><br><span class="line"><span class="comment">-- 全外连接(MySQL 还不支持 FULL OUTER JOIN)</span></span><br><span class="line"><span class="comment">-- 可以通过合并左外连接和右外连接等价于全外连接</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> book <span class="keyword">AS</span> b</span><br><span class="line">    -&gt; <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> student <span class="keyword">AS</span> s</span><br><span class="line">    -&gt; <span class="keyword">ON</span> b.studentid=s.studentid</span><br><span class="line">    -&gt; <span class="keyword">UNION</span></span><br><span class="line">    -&gt; <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> book <span class="keyword">AS</span> b</span><br><span class="line">    -&gt; <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> student <span class="keyword">AS</span> s</span><br><span class="line">    -&gt; <span class="keyword">ON</span> b.studentid=s.studentid ;</span><br><span class="line">+<span class="comment">--------+------------------+-----------+-----------+--------------+</span></span><br><span class="line">| bookid | bookname         | studentid | studentid | stundentname |</span><br><span class="line">+<span class="comment">--------+------------------+-----------+-----------+--------------+</span></span><br><span class="line">|      4 | &lt;&lt;西厢记&gt;&gt;       |         2 |         2 | 李四         |</span><br><span class="line">|      1 | &lt;&lt;培训&gt;&gt;         |         3 |         3 | 关羽         |</span><br><span class="line">|      3 | &lt;&lt;红楼梦&gt;&gt;       |         3 |         3 | 关羽         |</span><br><span class="line">|      2 | &lt;&lt;成功秘诀&gt;&gt;     |         5 |         5 | 黄聪         |</span><br><span class="line">|      5 | &lt;&lt;水浒传&gt;&gt;       |         6 |         6 | 李逵         |</span><br><span class="line">|      6 | &lt;&lt;三国演义&gt;&gt;     |        10 |      NULL | NULL         |</span><br><span class="line">|   NULL | NULL             |      NULL |         4 | 张飞         |</span><br><span class="line">|   NULL | NULL             |      NULL |         7 | 赵娜         |</span><br><span class="line">|   NULL | NULL             |      NULL |         8 | 王萌         |</span><br><span class="line">|   NULL | NULL             |      NULL |         1 | 张三         |</span><br><span class="line">+<span class="comment">--------+------------------+-----------+-----------+--------------+</span></span><br></pre></td></tr></table></figure><blockquote><p>自然连接<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">root@127.0.0.1 [op]&gt; SELECT * FROM book</span><br><span class="line">    -&gt; NATURAL LEFT OUTER JOIN student ;</span><br><span class="line">+<span class="comment">-----------+--------+------------------+--------------+</span></span><br><span class="line">| studentid | bookid | bookname         | stundentname |</span><br><span class="line">+<span class="comment">-----------+--------+------------------+--------------+</span></span><br><span class="line">|         2 |      4 | &lt;&lt;西厢记&gt;&gt;       | 李四         |</span><br><span class="line">|         3 |      1 | &lt;&lt;培训&gt;&gt;         | 关羽         |</span><br><span class="line">|         3 |      3 | &lt;&lt;红楼梦&gt;&gt;       | 关羽         |</span><br><span class="line">|         5 |      2 | &lt;&lt;成功秘诀&gt;&gt;     | 黄聪         |</span><br><span class="line">|         6 |      5 | &lt;&lt;水浒传&gt;&gt;       | 李逵         |</span><br><span class="line">|        10 |      6 | &lt;&lt;三国演义&gt;&gt;     | NULL         |</span><br><span class="line">+<span class="comment">-----------+--------+------------------+--------------+</span></span><br><span class="line">6 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">--</span></span><br><span class="line">root@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> [op]&gt; <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> book</span><br><span class="line">    -&gt; <span class="keyword">NATURAL</span> <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> student  ;</span><br><span class="line">+<span class="comment">-----------+--------------+--------+------------------+</span></span><br><span class="line">| studentid | stundentname | bookid | bookname         |</span><br><span class="line">+<span class="comment">-----------+--------------+--------+------------------+</span></span><br><span class="line">|         3 | 关羽         |      1 | &lt;&lt;培训&gt;&gt;         |</span><br><span class="line">|         5 | 黄聪         |      2 | &lt;&lt;成功秘诀&gt;&gt;     |</span><br><span class="line">|         3 | 关羽         |      3 | &lt;&lt;红楼梦&gt;&gt;       |</span><br><span class="line">|         2 | 李四         |      4 | &lt;&lt;西厢记&gt;&gt;       |</span><br><span class="line">|         6 | 李逵         |      5 | &lt;&lt;水浒传&gt;&gt;       |</span><br><span class="line">|         4 | 张飞         |   NULL | NULL             |</span><br><span class="line">|         7 | 赵娜         |   NULL | NULL             |</span><br><span class="line">|         8 | 王萌         |   NULL | NULL             |</span><br><span class="line">|         1 | 张三         |   NULL | NULL             |</span><br><span class="line">+<span class="comment">-----------+--------------+--------+------------------+</span></span><br><span class="line">9 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Why-does-Outer-Join-Elimination"><a href="#Why-does-Outer-Join-Elimination" class="headerlink" title="Why does Outer Join Elimination ?"></a>Why does Outer Join Elimination ?</h3><p>外连接消除：</p><p>把外连接变为内连接<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A OUTER JOIN B</span><br><span class="line">变形为</span><br><span class="line">A JOIN B</span><br></pre></td></tr></table></figure></p><p>外连接消除的意义：  </p><ol><li>查询优化器在处理外连接操作时所需执行的操作和时间多于内连接</li><li>外连接消除后，优化器在选择多表连接顺序时，可以有更多更灵活的选择，从而可以选择更好的表连接顺序，加快查询执行的速度</li><li>表的一些连接算法（如块嵌套连接和索引循环连接等）在将规模小的或筛选条件最严格的表作为“外表”（放在连接顺序的最前面，是多层循环体的外循环层），可以减少不必要的I/O开销，能加快算法执行的速度</li></ol><h3 id="How-to-do-Outer-Join-Elimination-for-MySQL"><a href="#How-to-do-Outer-Join-Elimination-for-MySQL" class="headerlink" title="How to do Outer Join Elimination for MySQL ?"></a>How to do Outer Join Elimination for MySQL ?</h3><p>外连接消除的条件：<br>WHERE子句中的条件满足“空值拒绝”<br>（又称为“reject-NULL”条件）。  </p><blockquote><p>WHERE条件可以保证从结果中排除外连接右侧（右表）生成的值为NULL的行（即条件确保应用在右表带有空值的列对象上时，条件不满足，条件的结果值为FLASE或UNKONOWEN，这样右表就不会有值为NULL的行生成），所以能使该查询在语义上等效于内连接。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> X <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Y <span class="keyword">ON</span> (X.X_num=Y.Y_num)</span><br><span class="line"><span class="keyword">WHERE</span> Y.Y_num <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p>示例:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表，命令如下：</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_1 (t_1_id <span class="built_in">INT</span> <span class="keyword">UNIQUE</span>, t_1_col_1 <span class="built_in">INT</span>, t_1_col_2 <span class="built_in">VARCHAR</span>(<span class="number">10</span>));</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_2 (t_2_id <span class="built_in">INT</span> <span class="keyword">UNIQUE</span>, t_2_col_1 <span class="built_in">INT</span>, t_2_col_2 <span class="built_in">VARCHAR</span>(<span class="number">10</span>));</span><br><span class="line"><span class="comment">-- 插入数据，命令如下：</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_1 <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">11</span>, <span class="string">'t_1_1'</span>);   <span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_1 <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">12</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_1 <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="literal">NULL</span>, <span class="string">'t_1_3'</span>); <span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_1 <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="number">14</span>, <span class="string">'t_1_4'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_1 <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="number">15</span>, <span class="literal">NULL</span>);      <span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_1 <span class="keyword">VALUES</span> (<span class="number">7</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_2 <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">11</span>, <span class="string">'t_2_1'</span>);   <span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_2 <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="literal">NULL</span>, <span class="string">'t_2_2'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_2 <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">13</span>, <span class="literal">NULL</span>);      <span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_2 <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="number">14</span>, <span class="string">'t_2_4'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_2 <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="number">16</span>, <span class="string">'t_2_6'</span>);   <span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_2 <span class="keyword">VALUES</span> (<span class="number">7</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">语句一，使用TRUE作为ON的子句，WHERE子句包括连接条件：</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t_2 <span class="keyword">ON</span> <span class="literal">true</span> <span class="keyword">WHERE</span> t_1_id = t_2_id;</span><br><span class="line"></span><br><span class="line">语句二，使用ON子句包括连接条件：</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t_2 <span class="keyword">ON</span> t_1_id = t_2_id;</span><br><span class="line"></span><br><span class="line">语句三，使用ON和WHERE子句包括连接条件：</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t_2 <span class="keyword">ON</span> t_1_id = t_2_id <span class="keyword">WHERE</span> t_1_id = t_2_id;</span><br><span class="line"></span><br><span class="line">从执行结果看：</span><br><span class="line">语句一，三：</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t_2 <span class="keyword">ON</span> <span class="literal">true</span> <span class="keyword">WHERE</span> t_1_id = t_2_id;</span><br><span class="line">+<span class="comment">--------+-----------+-----------+--------+-----------+-----------+</span></span><br><span class="line">| t_1_id | t_1_col_1 | t_1_col_2 | t_2_id | t_2_col_1 | t_2_col_2 |</span><br><span class="line">+<span class="comment">--------+-----------+-----------+--------+-----------+-----------+</span></span><br><span class="line">|      1 |        11 | t_1_1     |      1 |        11 | t_2_1     |</span><br><span class="line">|      2 |        12 | NULL      |      2 |      NULL | t_2_2     |</span><br><span class="line">|      3 |      NULL | t_1_3     |      3 |        13 | NULL      |</span><br><span class="line">|      4 |        14 | t_1_4     |      4 |        14 | t_2_4     |</span><br><span class="line">|      7 |      NULL | NULL      |      7 |      NULL | NULL      |</span><br><span class="line">+<span class="comment">--------+-----------+-----------+--------+-----------+-----------+</span></span><br><span class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">语句二：</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t_2 <span class="keyword">ON</span> t_1_id = t_2_id;</span><br><span class="line">+<span class="comment">--------+-----------+-----------+--------+-----------+-----------+</span></span><br><span class="line">| t_1_id | t_1_col_1 | t_1_col_2 | t_2_id | t_2_col_1 | t_2_col_2 |</span><br><span class="line">+<span class="comment">--------+-----------+-----------+--------+-----------+-----------+</span></span><br><span class="line">|      1 |        11 | t_1_1     |      1 |        11 | t_2_1     |</span><br><span class="line">|      2 |        12 | NULL      |      2 |      NULL | t_2_2     |</span><br><span class="line">|      3 |      NULL | t_1_3     |      3 |        13 | NULL      |</span><br><span class="line">|      4 |        14 | t_1_4     |      4 |        14 | t_2_4     |</span><br><span class="line">|      5 |        15 | NULL      |   NULL |      NULL | NULL      |</span><br><span class="line">|      7 |      NULL | NULL      |      7 |      NULL | NULL      |</span><br><span class="line">+<span class="comment">--------+-----------+-----------+--------+-----------+-----------+</span></span><br><span class="line">6 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">可以发现，语句一，三的 <span class="keyword">where</span> 可以保证从结果集中排除外连接右侧（右表）生成的值为 <span class="literal">NULL</span> 的行</span><br><span class="line"></span><br><span class="line">从执行计划看：</span><br><span class="line">语句二：</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t_2 <span class="keyword">ON</span> t_1_id = t_2_id;</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+--------+---------+---------------+------+----------+-------+</span></span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key    | key_len | ref           | rows | filtered | Extra |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+--------+---------+---------------+------+----------+-------+</span></span><br><span class="line">|  1 | SIMPLE      | t_1   | NULL       | ALL  | NULL          | NULL   | NULL    | NULL          |    6 |   100.00 | NULL  |</span><br><span class="line">|  1 | SIMPLE      | t_2   | NULL       | ref  | t_2_id        | t_2_id | 5       | op.t_1.t_1_id |    1 |   100.00 | NULL  |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+--------+---------+---------------+------+----------+-------+</span></span><br><span class="line">优化器处理后：</span><br><span class="line"><span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="string">`op`</span>.<span class="string">`t_1`</span>.<span class="string">`t_1_id`</span> <span class="keyword">AS</span> <span class="string">`t_1_id`</span>,</span><br><span class="line"><span class="string">`op`</span>.<span class="string">`t_1`</span>.<span class="string">`t_1_col_1`</span> <span class="keyword">AS</span> <span class="string">`t_1_col_1`</span>,</span><br><span class="line"><span class="string">`op`</span>.<span class="string">`t_1`</span>.<span class="string">`t_1_col_2`</span> <span class="keyword">AS</span> <span class="string">`t_1_col_2`</span>,</span><br><span class="line"><span class="string">`op`</span>.<span class="string">`t_2`</span>.<span class="string">`t_2_id`</span> <span class="keyword">AS</span> <span class="string">`t_2_id`</span>,</span><br><span class="line"><span class="string">`op`</span>.<span class="string">`t_2`</span>.<span class="string">`t_2_col_1`</span> <span class="keyword">AS</span> <span class="string">`t_2_col_1`</span>,</span><br><span class="line"><span class="string">`op`</span>.<span class="string">`t_2`</span>.<span class="string">`t_2_col_2`</span> <span class="keyword">AS</span> <span class="string">`t_2_col_2`</span></span><br><span class="line"><span class="keyword">from</span> <span class="string">`op`</span>.<span class="string">`t_1`</span> <span class="keyword">left</span> <span class="keyword">join</span> <span class="string">`op`</span>.<span class="string">`t_2`</span></span><br><span class="line"><span class="keyword">on</span>((<span class="string">`op`</span>.<span class="string">`t_2`</span>.<span class="string">`t_2_id`</span> = <span class="string">`op`</span>.<span class="string">`t_1`</span>.<span class="string">`t_1_id`</span>))</span><br><span class="line"><span class="keyword">where</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">语句一，语句三，执行计划相同：</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t_2 <span class="keyword">ON</span> <span class="literal">true</span> <span class="keyword">WHERE</span> t_1_id = t_2_id;</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+--------+---------+---------------+------+----------+-------+</span></span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key    | key_len | ref           | rows | filtered | Extra |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+--------+---------+---------------+------+----------+-------+</span></span><br><span class="line">|  1 | SIMPLE      | t_1   | NULL       | ALL  | t_1_id        | NULL   | NULL    | NULL          |    6 |   100.00 | NULL  |</span><br><span class="line">|  1 | SIMPLE      | t_2   | NULL       | ref  | t_2_id        | t_2_id | 5       | op.t_1.t_1_id |    1 |   100.00 | NULL  |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+--------+---------+---------------+------+----------+-------+</span></span><br><span class="line">优化器处理后：</span><br><span class="line"><span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="string">`op`</span>.<span class="string">`t_1`</span>.<span class="string">`t_1_id`</span> <span class="keyword">AS</span> <span class="string">`t_1_id`</span>,</span><br><span class="line"><span class="string">`op`</span>.<span class="string">`t_1`</span>.<span class="string">`t_1_col_1`</span> <span class="keyword">AS</span> <span class="string">`t_1_col_1`</span>,</span><br><span class="line"><span class="string">`op`</span>.<span class="string">`t_1`</span>.<span class="string">`t_1_col_2`</span> <span class="keyword">AS</span> <span class="string">`t_1_col_2`</span>,</span><br><span class="line"><span class="string">`op`</span>.<span class="string">`t_2`</span>.<span class="string">`t_2_id`</span> <span class="keyword">AS</span> <span class="string">`t_2_id`</span>,</span><br><span class="line"><span class="string">`op`</span>.<span class="string">`t_2`</span>.<span class="string">`t_2_col_1`</span> <span class="keyword">AS</span> <span class="string">`t_2_col_1`</span>,</span><br><span class="line"><span class="string">`op`</span>.<span class="string">`t_2`</span>.<span class="string">`t_2_col_2`</span> <span class="keyword">AS</span> <span class="string">`t_2_col_2`</span></span><br><span class="line"><span class="keyword">from</span> <span class="string">`op`</span>.<span class="string">`t_1`</span> <span class="keyword">join</span> <span class="string">`op`</span>.<span class="string">`t_2`</span></span><br><span class="line"><span class="keyword">where</span> (<span class="string">`op`</span>.<span class="string">`t_2`</span>.<span class="string">`t_2_id`</span> = <span class="string">`op`</span>.<span class="string">`t_1`</span>.<span class="string">`t_1_id`</span>)</span><br><span class="line"></span><br><span class="line">优化器消除了外连接，变成了内连接。</span><br></pre></td></tr></table></figure></p><p>辨析 <code>ON</code> 和 <code>WHERE</code> 的差异:<br><code>ON   t_1_id = t_2_id</code><br>t_1_id 和 t_2_id 进行连接  </p><p><code>WHERE t_1_id = t_2_id</code><br>当t_1_id 和 t_2_id的值相等  </p><p>示例2：理解 WHERE 条件对外连接优化的影响<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">sql4：</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t_2 <span class="keyword">ON</span> t_1_id = t_2_id <span class="keyword">WHERE</span> t_1_id&gt;<span class="number">0</span>;</span><br><span class="line">+--------+-----------+-----------+--------+-----------+-----------+</span><br><span class="line">| t_1_id | t_1_col_1 | t_1_col_2 | t_2_id | t_2_col_1 | t_2_col_2 |</span><br><span class="line">+--------+-----------+-----------+--------+-----------+-----------+</span><br><span class="line">|      1 |        11 | t_1_1     |      1 |        11 | t_2_1     |</span><br><span class="line">|      2 |        12 | NULL      |      2 |      NULL | t_2_2     |</span><br><span class="line">|      3 |      NULL | t_1_3     |      3 |        13 | NULL      |</span><br><span class="line">|      4 |        14 | t_1_4     |      4 |        14 | t_2_4     |</span><br><span class="line">|      5 |        15 | NULL      |   NULL |      NULL | NULL      |</span><br><span class="line">|      7 |      NULL | NULL      |      7 |      NULL | NULL      |</span><br><span class="line">+--------+-----------+-----------+--------+-----------+-----------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">sql5：</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t_2 <span class="keyword">ON</span> t_1_id = t_2_id <span class="keyword">WHERE</span> t_2_id&gt;<span class="number">0</span>;</span><br><span class="line">+--------+-----------+-----------+--------+-----------+-----------+</span><br><span class="line">| t_1_id | t_1_col_1 | t_1_col_2 | t_2_id | t_2_col_1 | t_2_col_2 |</span><br><span class="line">+--------+-----------+-----------+--------+-----------+-----------+</span><br><span class="line">|      1 |        11 | t_1_1     |      1 |        11 | t_2_1     |</span><br><span class="line">|      2 |        12 | NULL      |      2 |      NULL | t_2_2     |</span><br><span class="line">|      3 |      NULL | t_1_3     |      3 |        13 | NULL      |</span><br><span class="line">|      4 |        14 | t_1_4     |      4 |        14 | t_2_4     |</span><br><span class="line">|      7 |      NULL | NULL      |      7 |      NULL | NULL      |</span><br><span class="line">+--------+-----------+-----------+--------+-----------+-----------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">执行计划：</span><br><span class="line">sql4：</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t_2 <span class="keyword">ON</span> t_1_id = t_2_id <span class="keyword">WHERE</span> t_1_id&gt;<span class="number">0</span>;</span><br><span class="line">+----+-------------+-------+------------+------+---------------+--------+---------+---------------+------+----------+-------------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key    | key_len | ref           | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+--------+---------+---------------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | t_1   | NULL       | ALL  | t_1_id        | NULL   | NULL    | NULL          |    6 |   100.00 | Using where |</span><br><span class="line">|  1 | SIMPLE      | t_2   | NULL       | ref  | t_2_id        | t_2_id | 5       | op.t_1.t_1_id |    1 |   100.00 | NULL        |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+--------+---------+---------------+------+----------+-------------+</span><br><span class="line">优化器处理后：</span><br><span class="line"><span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="symbol">`op`</span>.<span class="symbol">`t_1`</span>.<span class="symbol">`t_1_id`</span> <span class="keyword">AS</span> <span class="symbol">`t_1_id`</span>,</span><br><span class="line"><span class="symbol">`op`</span>.<span class="symbol">`t_1`</span>.<span class="symbol">`t_1_col_1`</span> <span class="keyword">AS</span> <span class="symbol">`t_1_col_1`</span>,</span><br><span class="line"><span class="symbol">`op`</span>.<span class="symbol">`t_1`</span>.<span class="symbol">`t_1_col_2`</span> <span class="keyword">AS</span> <span class="symbol">`t_1_col_2`</span>,</span><br><span class="line"><span class="symbol">`op`</span>.<span class="symbol">`t_2`</span>.<span class="symbol">`t_2_id`</span> <span class="keyword">AS</span> <span class="symbol">`t_2_id`</span>,</span><br><span class="line"><span class="symbol">`op`</span>.<span class="symbol">`t_2`</span>.<span class="symbol">`t_2_col_1`</span> <span class="keyword">AS</span> <span class="symbol">`t_2_col_1`</span>,</span><br><span class="line"><span class="symbol">`op`</span>.<span class="symbol">`t_2`</span>.<span class="symbol">`t_2_col_2`</span> <span class="keyword">AS</span> <span class="symbol">`t_2_col_2`</span></span><br><span class="line"><span class="keyword">from</span> <span class="symbol">`op`</span>.<span class="symbol">`t_1`</span> <span class="keyword">left</span> <span class="keyword">join</span> <span class="symbol">`op`</span>.<span class="symbol">`t_2`</span></span><br><span class="line"><span class="keyword">on</span>((<span class="symbol">`op`</span>.<span class="symbol">`t_2`</span>.<span class="symbol">`t_2_id`</span> = <span class="symbol">`op`</span>.<span class="symbol">`t_1`</span>.<span class="symbol">`t_1_id`</span>))</span><br><span class="line"><span class="keyword">where</span> (<span class="symbol">`op`</span>.<span class="symbol">`t_1`</span>.<span class="symbol">`t_1_id`</span> &gt; <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">sql5：</span><br><span class="line"><span class="keyword">explain</span>  <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t_2 <span class="keyword">ON</span> t_1_id = t_2_id <span class="keyword">WHERE</span> t_2_id&gt;<span class="number">0</span>;</span><br><span class="line">+----+-------------+-------+------------+------+---------------+--------+---------+---------------+------+----------+-------------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key    | key_len | ref           | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+--------+---------+---------------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | t_1   | NULL       | ALL  | t_1_id        | NULL   | NULL    | NULL          |    6 |   100.00 | Using where |</span><br><span class="line">|  1 | SIMPLE      | t_2   | NULL       | ref  | t_2_id        | t_2_id | 5       | op.t_1.t_1_id |    1 |   100.00 | NULL        |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+--------+---------+---------------+------+----------+-------------+</span><br><span class="line">优化器处理后：</span><br><span class="line"><span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="symbol">`op`</span>.<span class="symbol">`t_1`</span>.<span class="symbol">`t_1_id`</span> <span class="keyword">AS</span> <span class="symbol">`t_1_id`</span>,</span><br><span class="line"><span class="symbol">`op`</span>.<span class="symbol">`t_1`</span>.<span class="symbol">`t_1_col_1`</span> <span class="keyword">AS</span> <span class="symbol">`t_1_col_1`</span>,</span><br><span class="line"><span class="symbol">`op`</span>.<span class="symbol">`t_1`</span>.<span class="symbol">`t_1_col_2`</span> <span class="keyword">AS</span> <span class="symbol">`t_1_col_2`</span>,</span><br><span class="line"><span class="symbol">`op`</span>.<span class="symbol">`t_2`</span>.<span class="symbol">`t_2_id`</span> <span class="keyword">AS</span> <span class="symbol">`t_2_id`</span>,</span><br><span class="line"><span class="symbol">`op`</span>.<span class="symbol">`t_2`</span>.<span class="symbol">`t_2_col_1`</span> <span class="keyword">AS</span> <span class="symbol">`t_2_col_1`</span>,</span><br><span class="line"><span class="symbol">`op`</span>.<span class="symbol">`t_2`</span>.<span class="symbol">`t_2_col_2`</span> <span class="keyword">AS</span> <span class="symbol">`t_2_col_2`</span></span><br><span class="line"><span class="keyword">from</span> <span class="symbol">`op`</span>.<span class="symbol">`t_1`</span> <span class="keyword">join</span> <span class="symbol">`op`</span>.<span class="symbol">`t_2`</span></span><br><span class="line"><span class="keyword">where</span> ((<span class="symbol">`op`</span>.<span class="symbol">`t_2`</span>.<span class="symbol">`t_2_id`</span> = <span class="symbol">`op`</span>.<span class="symbol">`t_1`</span>.<span class="symbol">`t_1_id`</span>) <span class="keyword">and</span> (<span class="symbol">`op`</span>.<span class="symbol">`t_1`</span>.<span class="symbol">`t_1_id`</span> &gt; <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">可以看到 sql5 消除了外连接。</span><br></pre></td></tr></table></figure></p><p>外连接消除总结:</p><ol><li><p>注意外连接与内连接的语义差别</p></li><li><p>外连接优化的条件：空值拒绝</p></li><li><p>外连接优化的本质：语义上是外连接，但WHER条件使得外连接可以蜕化为内连接</p></li></ol><h2 id="Join-Elimination"><a href="#Join-Elimination" class="headerlink" title="Join Elimination"></a>Join Elimination</h2><p>连接消除：<br>去掉不必要的连接对象，则减少了连接操作</p><p>连接消除的条件：<br>无固定模式，需要具体分析</p><p>连接消除情况一：<br>唯一键/主键作为连接条件，三表内连接，中间表的列只作为连接条件，则可以去掉中间表</p><p>CREATE TABLE A (a1 INT UNIQUE, a2 VARCHAR(9), a3 INT);<br>CREATE TABLE B (b1 INT UNIQUE, b2 VARCHAR(9), c2 INT);<br>CREATE TABLE C (c1 INT UNIQUE, c2 VARCHAR(9), c3 INT);  </p><p>B的列在WHERE条件子句中只作为等值连接条件存在，则查询可以去掉对B的连接操作：<br>SELECT A.<code>*</code>, C.<code>*</code> FROM <strong>A JOIN B ON (a1=b1) JOIN CON (b1=c1)</strong>;<br>相当于：<br>SELECT A.<code>*</code>, C.<code>*</code> FROM <strong>A JOIN C ON (a1= c1)</strong>;  </p><p>连接消除情况二：<br>一些特殊形式，可以消除连接操作（可消除的表除了作为连接对象外，不出现在任何子句中）。</p><p>例：<br>SELECT MAX(a1) FROM A, B;<code>/* 在这样格式中的MIN、MAX函数操作可以消除连接，去掉B表不影响结果；其他聚集函数不可以 */</code><br>SELECT DISTINCT a3 FROM A, B; <code>/* 对连接结果中的a3列执行去重操作*/</code><br>SELECT a1 FROM A, B GROUP BY a1; <code>/* 对连接结果中的a1列执行分组操作 */</code>  </p><p>连接消除情况三：<br>主外键关系的表进行的连接，可消除主键表，这不会影响对外键表的查询。<br>例：<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line">创建表，命令如下：</span><br><span class="line"><span class="keyword">CREATE</span> TABLE B (b1 INT, b2 VARCHAR(<span class="number">2</span>), <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span>(b1));</span><br><span class="line"><span class="keyword">CREATE</span> TABLE A (a1 INT, a2 VARCHAR(<span class="number">2</span>), FOREIGN <span class="keyword">KEY</span>(a1) REFERENCES B(b1) );<span class="comment">/* A作为外键表参照主键表B */</span></span><br><span class="line"><span class="keyword">CREATE</span> TABLE C (c1 INT, c2 VARCHAR(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">插入数据，命令如下：</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> B <span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">'B1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> B <span class="keyword">VALUES</span>(<span class="number">2</span>, <span class="string">'B2'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> B <span class="keyword">VALUES</span>(<span class="number">3</span>, <span class="string">'B3'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> A <span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">'A1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> A <span class="keyword">VALUES</span>(<span class="literal">null</span>, <span class="string">'A2'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> A <span class="keyword">VALUES</span>(<span class="number">3</span>, <span class="string">'A3'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> C <span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">'C1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> C <span class="keyword">VALUES</span>(<span class="number">2</span>, <span class="string">'C2'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> C <span class="keyword">VALUES</span>(<span class="literal">NULL</span>, <span class="string">'C3'</span>);</span><br><span class="line"></span><br><span class="line">对主外键参照的表进行内连接，可以消除主键表 --- MySQL不支持</span><br><span class="line">sql1:</span><br><span class="line">三个表做内连接，但目标列不包括主键表B的对象，主键表B只作为连接对象和连接条件存在  </span><br><span class="line"><span class="keyword">SELECT</span> A.*, C.* <span class="keyword">FROM</span> A,B,C <span class="keyword">WHERE</span> A.a1=B.b1 <span class="keyword">AND</span> B.b1=C.c1;</span><br><span class="line">//主键表B作为连接对象和连接条件存在</span><br><span class="line">+------+------+------+------+</span><br><span class="line">| a1   | a2   | c1   | c2   |</span><br><span class="line">+------+------+------+------+</span><br><span class="line">|    1 | A1   |    1 | C1   |</span><br><span class="line">+------+------+------+------+</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPLAIN</span>  <span class="keyword">SELECT</span> A.*, C.* <span class="keyword">FROM</span> A,B,C <span class="keyword">WHERE</span> A.a1=B.b1 <span class="keyword">AND</span> B.b1=C.c1;</span><br><span class="line">+----+-------------+-------+------------+--------+---------------+---------+---------+---------+------+----------+----------------------------------------------------+</span><br><span class="line">| id | select_type | table | partitions | type   | possible_keys | key     | key_len | ref     | rows | filtered | Extra                                              |</span><br><span class="line">+----+-------------+-------+------------+--------+---------------+---------+---------+---------+------+----------+----------------------------------------------------+</span><br><span class="line">|  1 | SIMPLE      | C     | NULL       | ALL    | NULL          | NULL    | NULL    | NULL    |    3 |   100.00 | Using where                                        |</span><br><span class="line">|  1 | SIMPLE      | A     | NULL       | ALL    | a1            | NULL    | NULL    | NULL    |    3 |    33.33 | Using where; Using join buffer (Block Nested Loop) |</span><br><span class="line">|  1 | SIMPLE      | B     | NULL       | eq_ref | PRIMARY       | PRIMARY | 4       | op.C.c1 |    1 |   100.00 | Using <span class="keyword">index</span>                                        |</span><br><span class="line">+----+-------------+-------+------------+--------+---------------+---------+---------+---------+------+----------+----------------------------------------------------+</span><br><span class="line">优化器处理后：</span><br><span class="line"> <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="symbol">`op`</span>.<span class="symbol">`a`</span>.<span class="symbol">`a1`</span> <span class="keyword">AS</span> <span class="symbol">`a1`</span>,</span><br><span class="line"> <span class="symbol">`op`</span>.<span class="symbol">`a`</span>.<span class="symbol">`a2`</span> <span class="keyword">AS</span> <span class="symbol">`a2`</span>,</span><br><span class="line"> <span class="symbol">`op`</span>.<span class="symbol">`c`</span>.<span class="symbol">`c1`</span> <span class="keyword">AS</span> <span class="symbol">`c1`</span>,</span><br><span class="line"> <span class="symbol">`op`</span>.<span class="symbol">`c`</span>.<span class="symbol">`c2`</span> <span class="keyword">AS</span> <span class="symbol">`c2`</span></span><br><span class="line"> <span class="keyword">from</span> <span class="symbol">`op`</span>.<span class="symbol">`a`</span></span><br><span class="line"> <span class="keyword">join</span> <span class="symbol">`op`</span>.<span class="symbol">`b`</span></span><br><span class="line"> <span class="keyword">join</span> <span class="symbol">`op`</span>.<span class="symbol">`c`</span></span><br><span class="line"> <span class="keyword">where</span> ((<span class="symbol">`op`</span>.<span class="symbol">`a`</span>.<span class="symbol">`a1`</span> = <span class="symbol">`op`</span>.<span class="symbol">`c`</span>.<span class="symbol">`c1`</span>) <span class="keyword">and</span> (<span class="symbol">`op`</span>.<span class="symbol">`b`</span>.<span class="symbol">`b1`</span> = <span class="symbol">`op`</span>.<span class="symbol">`c`</span>.<span class="symbol">`c1`</span>))</span><br><span class="line"></span><br><span class="line">sql2：</span><br><span class="line">只有表A和表C进行连接，但<span class="keyword">WHERE</span>子句多一条判定条件“A.a1 <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>”；</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> A.*, C.* <span class="keyword">FROM</span> A,C <span class="keyword">WHERE</span> A.a1=C.c1 <span class="keyword">AND</span> A.a1 <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>; //只有表A和C进行连接</span><br><span class="line">+------+------+------+------+</span><br><span class="line">| a1   | a2   | c1   | c2   |</span><br><span class="line">+------+------+------+------+</span><br><span class="line">|    1 | A1   |    1 | C1   |</span><br><span class="line">+------+------+------+------+</span><br><span class="line"></span><br><span class="line">执行计划：</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">SELECT</span> A.*, C.* <span class="keyword">FROM</span> A,C <span class="keyword">WHERE</span> A.a1=C.c1 <span class="keyword">AND</span> A.a1 <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+---------+------+----------+-------------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref     | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+---------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | C     | NULL       | ALL  | NULL          | NULL | NULL    | NULL    |    3 |   100.00 | Using where |</span><br><span class="line">|  1 | SIMPLE      | A     | NULL       | ref  | a1            | a1   | 5       | op.C.c1 |    1 |   100.00 | NULL        |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+---------+------+----------+-------------+</span><br><span class="line">优化器处理后：</span><br><span class="line"><span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="symbol">`op`</span>.<span class="symbol">`a`</span>.<span class="symbol">`a1`</span> <span class="keyword">AS</span> <span class="symbol">`a1`</span>,</span><br><span class="line"><span class="symbol">`op`</span>.<span class="symbol">`a`</span>.<span class="symbol">`a2`</span> <span class="keyword">AS</span> <span class="symbol">`a2`</span>,</span><br><span class="line"><span class="symbol">`op`</span>.<span class="symbol">`c`</span>.<span class="symbol">`c1`</span> <span class="keyword">AS</span> <span class="symbol">`c1`</span>,</span><br><span class="line"><span class="symbol">`op`</span>.<span class="symbol">`c`</span>.<span class="symbol">`c2`</span> <span class="keyword">AS</span> <span class="symbol">`c2`</span></span><br><span class="line"><span class="keyword">from</span> <span class="symbol">`op`</span>.<span class="symbol">`a`</span></span><br><span class="line"><span class="keyword">join</span> <span class="symbol">`op`</span>.<span class="symbol">`c`</span></span><br><span class="line"><span class="keyword">where</span> ((<span class="symbol">`op`</span>.<span class="symbol">`a`</span>.<span class="symbol">`a1`</span> = <span class="symbol">`op`</span>.<span class="symbol">`c`</span>.<span class="symbol">`c1`</span>) <span class="keyword">and</span> (<span class="symbol">`op`</span>.<span class="symbol">`c`</span>.<span class="symbol">`c1`</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sql3：</span><br><span class="line">只有表A和表C进行连接,但<span class="keyword">WHERE</span>子句比第二条SQL的<span class="keyword">WHERE</span>子句内容更为简单</span><br><span class="line"><span class="keyword">SELECT</span> A.*, C.* <span class="keyword">FROM</span> A,C <span class="keyword">WHERE</span> A.a1=C.c1;</span><br><span class="line">+------+------+------+------+</span><br><span class="line">| a1   | a2   | c1   | c2   |</span><br><span class="line">+------+------+------+------+</span><br><span class="line">|    1 | A1   |    1 | C1   |</span><br><span class="line">+------+------+------+------+</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span>  <span class="keyword">SELECT</span> A.*, C.* <span class="keyword">FROM</span> A,C <span class="keyword">WHERE</span> A.a1=C.c1;</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                              |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><br><span class="line">|  1 | SIMPLE      | C     | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    3 |   100.00 | NULL                                               |</span><br><span class="line">|  1 | SIMPLE      | A     | NULL       | ALL  | a1            | NULL | NULL    | NULL |    3 |    33.33 | Using where; Using join buffer (Block Nested Loop) |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><br><span class="line">优化器处理后：</span><br><span class="line"><span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="symbol">`op`</span>.<span class="symbol">`a`</span>.<span class="symbol">`a1`</span> <span class="keyword">AS</span> <span class="symbol">`a1`</span>,</span><br><span class="line"><span class="symbol">`op`</span>.<span class="symbol">`a`</span>.<span class="symbol">`a2`</span> <span class="keyword">AS</span> <span class="symbol">`a2`</span>,</span><br><span class="line"><span class="symbol">`op`</span>.<span class="symbol">`c`</span>.<span class="symbol">`c1`</span> <span class="keyword">AS</span> <span class="symbol">`c1`</span>,</span><br><span class="line"><span class="symbol">`op`</span>.<span class="symbol">`c`</span>.<span class="symbol">`c2`</span> <span class="keyword">AS</span> <span class="symbol">`c2`</span></span><br><span class="line"><span class="keyword">from</span> <span class="symbol">`op`</span>.<span class="symbol">`a`</span></span><br><span class="line"><span class="keyword">join</span> <span class="symbol">`op`</span>.<span class="symbol">`c`</span></span><br><span class="line"><span class="keyword">where</span> (<span class="symbol">`op`</span>.<span class="symbol">`a`</span>.<span class="symbol">`a1`</span> = <span class="symbol">`op`</span>.<span class="symbol">`c`</span>.<span class="symbol">`c1`</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第一条SQL：</span><br><span class="line"><span class="keyword">SELECT</span> A.*, C.* <span class="keyword">FROM</span> A,B,C <span class="keyword">WHERE</span> A.a1=B.b1 <span class="keyword">AND</span> B.b1=C.c1;</span><br><span class="line"></span><br><span class="line">第二条SQL：</span><br><span class="line"><span class="keyword">SELECT</span> A.*, C.* <span class="keyword">FROM</span> A,C <span class="keyword">WHERE</span> A.a1=C.c1 <span class="keyword">AND</span> A.a1 <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">第三条SQL：</span><br><span class="line"><span class="keyword">SELECT</span> A.*, C.* <span class="keyword">FROM</span> A,C <span class="keyword">WHERE</span> A.a1=C.c1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">对主外键参照的表进行外连接，可以消除主键表  --- MySQL不支持</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> A.*, C.* <span class="keyword">FROM</span> A <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> B <span class="keyword">ON</span> (a1=b1) <span class="keyword">JOIN</span> C <span class="keyword">ON</span> (a1=c1);</span><br><span class="line">表A外连接表B，然后连接表C，查询目标列没有表B的列，表B没有被消除</span><br><span class="line">+------+------+------+------+</span><br><span class="line">| a1   | a2   | c1   | c2   |</span><br><span class="line">+------+------+------+------+</span><br><span class="line">|    1 | A1   |    1 | C1   |</span><br><span class="line">+------+------+------+------+</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">SELECT</span> A.*, C.* <span class="keyword">FROM</span> A <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> B <span class="keyword">ON</span> (a1=b1) <span class="keyword">JOIN</span> C <span class="keyword">ON</span> (a1=c1);</span><br><span class="line">+----+-------------+-------+------------+--------+---------------+---------+---------+---------+------+----------+----------------------------------------------------+</span><br><span class="line">| id | select_type | table | partitions | type   | possible_keys | key     | key_len | ref     | rows | filtered | Extra                                              |</span><br><span class="line">+----+-------------+-------+------------+--------+---------------+---------+---------+---------+------+----------+----------------------------------------------------+</span><br><span class="line">|  1 | SIMPLE      | C     | NULL       | ALL    | NULL          | NULL    | NULL    | NULL    |    3 |   100.00 | NULL                                               |</span><br><span class="line">|  1 | SIMPLE      | A     | NULL       | ALL    | a1            | NULL    | NULL    | NULL    |    3 |    33.33 | Using where; Using join buffer (Block Nested Loop) |</span><br><span class="line">|  1 | SIMPLE      | B     | NULL       | eq_ref | PRIMARY       | PRIMARY | 4       | op.C.c1 |    1 |   100.00 | Using <span class="keyword">index</span>                                        |</span><br><span class="line">+----+-------------+-------+------------+--------+---------------+---------+---------+---------+------+----------+----------------------------------------------------+</span><br><span class="line">优化器处理后：</span><br><span class="line"><span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="symbol">`op`</span>.<span class="symbol">`a`</span>.<span class="symbol">`a1`</span> <span class="keyword">AS</span> <span class="symbol">`a1`</span>,</span><br><span class="line"><span class="symbol">`op`</span>.<span class="symbol">`a`</span>.<span class="symbol">`a2`</span> <span class="keyword">AS</span> <span class="symbol">`a2`</span>,</span><br><span class="line"><span class="symbol">`op`</span>.<span class="symbol">`c`</span>.<span class="symbol">`c1`</span> <span class="keyword">AS</span> <span class="symbol">`c1`</span>,</span><br><span class="line"><span class="symbol">`op`</span>.<span class="symbol">`c`</span>.<span class="symbol">`c2`</span> <span class="keyword">AS</span> <span class="symbol">`c2`</span></span><br><span class="line"><span class="keyword">from</span> <span class="symbol">`op`</span>.<span class="symbol">`a`</span></span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> <span class="symbol">`op`</span>.<span class="symbol">`b`</span> <span class="keyword">on</span>((<span class="symbol">`op`</span>.<span class="symbol">`b`</span>.<span class="symbol">`b1`</span> = <span class="symbol">`op`</span>.<span class="symbol">`c`</span>.<span class="symbol">`c1`</span>))</span><br><span class="line"><span class="keyword">join</span> <span class="symbol">`op`</span>.<span class="symbol">`c`</span></span><br><span class="line"><span class="keyword">where</span> (<span class="symbol">`op`</span>.<span class="symbol">`a`</span>.<span class="symbol">`a1`</span> = <span class="symbol">`op`</span>.<span class="symbol">`c`</span>.<span class="symbol">`c1`</span>)</span><br></pre></td></tr></table></figure></p><p>连接消除总结：  </p><p>注意连接消除与外连接消除的技术差别<br>连接消除去掉的是被连接的某个对象<br>外连接消除去掉的是外连接的语义，变形为内连接  </p><h2 id="Nest-Join-Elimination"><a href="#Nest-Join-Elimination" class="headerlink" title="Nest Join Elimination"></a>Nest Join Elimination</h2><p>嵌套连接消除：  </p><p>连接存在多个层次，用括号标识连接的优先次序。<br>嵌套连接消除，就是消除嵌套的连接层次，把多个层次的连接减少为较少层次的连接，尽量“扁平化”    </p><p>例：<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">创建表，命令如下：</span><br><span class="line"><span class="keyword">CREATE</span> TABLE B (b1 INT, b2 VARCHAR(<span class="number">9</span>));</span><br><span class="line"><span class="keyword">CREATE</span> TABLE A (a1 INT, a2 VARCHAR(<span class="number">9</span>));</span><br><span class="line"><span class="keyword">CREATE</span> TABLE C (c1 INT, c2 VARCHAR(<span class="number">9</span>));</span><br><span class="line">插入数据，命令如下：</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> B <span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">'B1'</span>), (<span class="literal">NULL</span>, <span class="string">'B2'</span>), (<span class="number">31</span>, <span class="string">'B31'</span>), (<span class="number">32</span>, <span class="string">'B32'</span>), (<span class="literal">NULL</span>, <span class="string">'B4'</span>),(<span class="number">5</span>, <span class="string">'B5'</span>), (<span class="number">6</span>, <span class="string">'B6'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> A <span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">'A1'</span>), (<span class="literal">null</span>, <span class="string">'A2'</span>), (<span class="literal">NULL</span>, <span class="string">'A31'</span>), (<span class="number">32</span>, <span class="string">'A32'</span>), (<span class="number">4</span>, <span class="string">'A4'</span>), (<span class="number">5</span>, <span class="string">'A5'</span>), (<span class="literal">NULL</span>, <span class="string">'A6'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> C <span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">'C1'</span>), (<span class="literal">NULL</span>, <span class="string">'C2'</span>), (<span class="number">31</span>, <span class="string">'C31'</span>), (<span class="literal">NULL</span>, <span class="string">'C32'</span>), (<span class="number">4</span>, <span class="string">'C4'</span>), (<span class="literal">NULL</span>, <span class="string">'C5'</span>),(<span class="number">6</span>, <span class="string">'A6'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> A <span class="keyword">JOIN</span> (B <span class="keyword">JOIN</span> C <span class="keyword">ON</span> B.b1=C.c1) <span class="keyword">ON</span> A.a1=B.b1  <span class="keyword">WHERE</span> A.a1 &gt; <span class="number">1</span>;</span><br><span class="line">SQL语句的语义是B和C先连接，然后再和A连接</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> A <span class="keyword">JOIN</span> (B <span class="keyword">JOIN</span> C <span class="keyword">ON</span> B.b1=C.c1) <span class="keyword">ON</span> A.a1=B.b1  <span class="keyword">WHERE</span> A.a1 &gt; <span class="number">1</span>;</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                              |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><br><span class="line">|  1 | SIMPLE      | A     | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    7 |    33.33 | Using where                                        |</span><br><span class="line">|  1 | SIMPLE      | B     | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    7 |    14.29 | Using where; Using join buffer (Block Nested Loop) |</span><br><span class="line">|  1 | SIMPLE      | C     | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    7 |    14.29 | Using where; Using join buffer (Block Nested Loop) |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><br><span class="line">优化器处理后：</span><br><span class="line"><span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="symbol">`op`</span>.<span class="symbol">`a`</span>.<span class="symbol">`a1`</span> <span class="keyword">AS</span> <span class="symbol">`a1`</span>,</span><br><span class="line"><span class="symbol">`op`</span>.<span class="symbol">`a`</span>.<span class="symbol">`a2`</span> <span class="keyword">AS</span> <span class="symbol">`a2`</span>,</span><br><span class="line"><span class="symbol">`op`</span>.<span class="symbol">`b`</span>.<span class="symbol">`b1`</span> <span class="keyword">AS</span> <span class="symbol">`b1`</span>,</span><br><span class="line"><span class="symbol">`op`</span>.<span class="symbol">`b`</span>.<span class="symbol">`b2`</span> <span class="keyword">AS</span> <span class="symbol">`b2`</span>,</span><br><span class="line"><span class="symbol">`op`</span>.<span class="symbol">`c`</span>.<span class="symbol">`c1`</span> <span class="keyword">AS</span> <span class="symbol">`c1`</span>,</span><br><span class="line"><span class="symbol">`op`</span>.<span class="symbol">`c`</span>.<span class="symbol">`c2`</span> <span class="keyword">AS</span> <span class="symbol">`c2`</span></span><br><span class="line"><span class="keyword">from</span> <span class="symbol">`op`</span>.<span class="symbol">`a`</span></span><br><span class="line"><span class="keyword">join</span> <span class="symbol">`op`</span>.<span class="symbol">`b`</span></span><br><span class="line"><span class="keyword">join</span> <span class="symbol">`op`</span>.<span class="symbol">`c`</span></span><br><span class="line"><span class="keyword">where</span> ((<span class="symbol">`op`</span>.<span class="symbol">`b`</span>.<span class="symbol">`b1`</span> = <span class="symbol">`op`</span>.<span class="symbol">`a`</span>.<span class="symbol">`a1`</span>) <span class="keyword">and</span> (<span class="symbol">`op`</span>.<span class="symbol">`c`</span>.<span class="symbol">`c1`</span> = <span class="symbol">`op`</span>.<span class="symbol">`a`</span>.<span class="symbol">`a1`</span>) <span class="keyword">and</span> (<span class="symbol">`op`</span>.<span class="symbol">`a`</span>.<span class="symbol">`a1`</span> &gt; <span class="number">1</span>))</span><br></pre></td></tr></table></figure></p><p>嵌套连接消除总结：</p><ol><li><p>嵌套连接消除的连接的层次,这是一种连接的语义顺序的变化</p></li><li><p>连接消除，消掉的是一些被连接的对象</p></li><li><p>外连接消除，消掉的是外连接的语义，使得外连接变形为内连接</p></li></ol><hr><p>Good luck!<br>冬日暖阳</p>]]></content>
    
    <summary type="html">
    
      MySQL优化
    
    </summary>
    
      <category term="MySQL" scheme="http://mydba.xyz/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL优化 -- 6 条件简化</title>
    <link href="http://mydba.xyz/mysql/optimization/op6.html"/>
    <id>http://mydba.xyz/mysql/optimization/op6.html</id>
    <published>2018-01-02T07:37:57.000Z</published>
    <updated>2018-01-02T07:37:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="条件简化"><a href="#条件简化" class="headerlink" title="条件简化"></a>条件简化</h1><h2 id="What-is-condition-of-a-query-statement"><a href="#What-is-condition-of-a-query-statement" class="headerlink" title="What is condition of a query statement ?"></a>What is condition of a query statement ?</h2><h3 id="什么是条件"><a href="#什么是条件" class="headerlink" title="什么是条件?"></a>什么是条件?</h3><p>SQL查询语句中，对元组进行过滤和连接的表达式<br>形式上是出现在WHERE/JOIN-ON/HAVING的子句中的表达式。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ...</span><br><span class="line">[<span class="keyword">WHERE</span> where_condition]</span><br><span class="line">[<span class="keyword">HAVING</span> where_condition]</span><br><span class="line"></span><br><span class="line">join_condition:</span><br><span class="line">    <span class="keyword">ON</span> conditional_expr</span><br></pre></td></tr></table></figure></p><blockquote><p>MySQL：Generally, you should use the <strong>ON</strong> clause for <strong>conditions that specify how to join tables</strong>,<br>and the <strong>WHERE</strong> clause to <strong>restrict which rows you want in the result set</strong>.</p></blockquote><h3 id="条件优化技术"><a href="#条件优化技术" class="headerlink" title="条件优化技术"></a>条件优化技术</h3><ul><li>条件下推<br>把与单个表相关的条件，放到对单表进行扫描的过程中执行。  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> A, B</span><br><span class="line"><span class="keyword">WHERE</span> A.a=<span class="number">1</span> <span class="keyword">and</span> A.b=B.b;</span><br></pre></td></tr></table></figure></li></ul><p>执行顺序：  </p><ul><li>扫描A表，并带有条件A.a=1，把A表作为嵌套循环的外表  </li><li><p>扫描B表，执行连接操作，并带有过滤条件A.b=B.b</p><blockquote><p>说明：<br>数据库系统都支持条件下推，且无论条件对应的列对象有无索引<br>系统自动进行优化，不用人工介入</p><ul><li>条件化简</li></ul></blockquote></li></ul><h2 id="What-is-Condition-Simplification"><a href="#What-is-Condition-Simplification" class="headerlink" title="What is Condition Simplification ?"></a>What is Condition Simplification ?</h2><p>条件化简</p><ol><li>WHERE、HAVING和JOIN-ON条件由许多表达式组成，而这些表达式在某些时候彼此之间存在一定的联系。</li><li>利用等式和不等式的性质，可以将WHERE、HAVING和ON条件化简</li><li><p>但不同数据库的实现可能不完全相同。</p><p>常见的条件化简技术</p><h3 id="1-把HAVING条件并入WHERE条件"><a href="#1-把HAVING条件并入WHERE条件" class="headerlink" title="1. 把HAVING条件并入WHERE条件"></a>1. 把HAVING条件并入WHERE条件</h3><p>在SQL语句中不存在GROUPBY条件或聚集函数的情况下，可以将HAVING条件与WHERE条件的进行合并。<br>优点：<br>便于统一、集中化解条件子句，节约多次化解时间。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t3 <span class="keyword">where</span> a3&gt;<span class="number">1</span> <span class="keyword">having</span> b3=<span class="number">3</span>;</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">| a3 | b3   |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">|  3 |    3 |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line"><span class="comment">-- 可以简化为</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t3 <span class="keyword">where</span> a3&gt;<span class="number">1</span> <span class="keyword">and</span> b3=<span class="number">3</span>;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-去除表达式中冗余的括号"><a href="#2-去除表达式中冗余的括号" class="headerlink" title="2. 去除表达式中冗余的括号"></a>2. 去除表达式中冗余的括号</h3><p>优点：<br>可以减少语法分析时产生的AND和OR树的层次。—减少CPU的消耗<br>示例：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">((a AND b) AND (c AND d))</span><br><span class="line"><span class="comment">-- 化简为</span></span><br><span class="line">a AND b AND c AND d</span><br></pre></td></tr></table></figure></p><h3 id="3-常量传递"><a href="#3-常量传递" class="headerlink" title="3. 常量传递"></a>3. 常量传递</h3><p>优点：<br>对不同关系可以使得条件分离后有效实施“选择下推”，从而可以极大减小中间关系的规模。<br>示例：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">col_1 = col_2 AND col_2 = 3</span><br><span class="line"><span class="comment">-- 化简为</span></span><br><span class="line">col_1=3 AND col_2=3</span><br></pre></td></tr></table></figure></p><blockquote><p>注意：<br>操作符“=、&lt;、&gt;、&lt;=、&gt;=、&lt;&gt;、&lt;=&gt;、LIKE”中的任何一个，在“col_1 &lt;操作符&gt; col_2”条件中都可能会发生常量传递</p></blockquote><h3 id="4-消除死码"><a href="#4-消除死码" class="headerlink" title="4. 消除死码"></a>4. 消除死码</h3><p>化简条件，将不必要的条件去除<br>示例：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WHERE (0 &gt; 1 AND s1 = 5)</span><br></pre></td></tr></table></figure></p><p>“0 &gt; 1”使得AND恒为假，则WHERE条件恒为假。<br>此时就不必要再对该SQL语句进行优化和执行了，加快了查询执行的速度。</p><h3 id="5-表达式计算"><a href="#5-表达式计算" class="headerlink" title="5. 表达式计算"></a>5. 表达式计算</h3><p>对可以求解的表达式，进行计算，得出结果。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WHERE col_1 = 1 + 2</span><br><span class="line"><span class="comment">-- 化简为</span></span><br><span class="line">WHERE col_1 = 3</span><br></pre></td></tr></table></figure></p><h3 id="6-等式变换"><a href="#6-等式变换" class="headerlink" title="6. 等式变换"></a>6. 等式变换</h3><p> 化简条件（如反转关系操作符的操作数的顺序），从而改变某些表的访问路径<br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-a = 3    </span><br><span class="line"><span class="comment">-- 化简为</span></span><br><span class="line">a = -3</span><br><span class="line"><span class="comment">-- 好处是如果a上有索引，则可以利用索引扫描来加快访问。</span></span><br></pre></td></tr></table></figure></p><h3 id="7-不等式变换"><a href="#7-不等式变换" class="headerlink" title="7. 不等式变换"></a>7. 不等式变换</h3><p>化简条件，将不必要的重复条件去除。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a &gt; 10 AND b = 6 AND a &gt; 2</span><br><span class="line"><span class="comment">-- 化简为</span></span><br><span class="line">b = 6 AND a &gt; 10</span><br></pre></td></tr></table></figure></p><h3 id="8-布尔表达式变换"><a href="#8-布尔表达式变换" class="headerlink" title="8. 布尔表达式变换"></a>8. 布尔表达式变换</h3><h4 id="谓词传递闭包"><a href="#谓词传递闭包" class="headerlink" title="谓词传递闭包"></a>谓词传递闭包</h4><p>   一些比较操作符，如“&lt;”、“&gt;”等，具有传递性，可以起到化简表达式的作用<br>   <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a&gt;b AND b&gt;2</span><br><span class="line"><span class="comment">-- 可以推导出a&gt;b AND b&gt;2 AND a&gt;2，“a&gt;2”是一个隐含条件，</span></span><br><span class="line"><span class="comment">-- 这样把“a&gt;2”和“b&gt;2”分别下推到对应的关系上，</span></span><br><span class="line"><span class="comment">-- 就可以减少参与比较操作“a&gt;b”的元组了</span></span><br></pre></td></tr></table></figure></p><h4 id="布尔表达式被转换为一个等价的合取范式（CNF）"><a href="#布尔表达式被转换为一个等价的合取范式（CNF）" class="headerlink" title="布尔表达式被转换为一个等价的合取范式（CNF）"></a>布尔表达式被转换为一个等价的合取范式（CNF）</h4><p>   任何一个布尔表达式都能被转换为一个等价的合取范式（CNF）<br>   合取范式格式为：C1 AND C2 AND… AND Cn；其中，Ck（1&lt;=k&lt;=n）称为合取项，每个合取项是不包含AND的布尔表达式<br>   说明：<br>   1 合取项只要有一个为假，整个表达式就为假，故代码中可以在发现一个合取项为假时，即停止其他合取项的判断，加快判断速度；<br>   <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WHERE(0 &gt; 1 AND s1 = 5)</span><br></pre></td></tr></table></figure></p><p>   2 另外因为AND操作符是可交换的，所以优化器可以按照先易后难的顺序计算表达式，一旦发现一个合取项为假时，即停止其他合取项的判断，加快判断速度。<br>   <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WHERE(A.a+B.b &gt; 100 AND A.b = 5 AND 0 &gt; 1 )</span><br><span class="line"><span class="comment">-- 先求解：0 &gt; 1 ，值为假，其他不再求解</span></span><br></pre></td></tr></table></figure></p><h4 id="索引利用"><a href="#索引利用" class="headerlink" title="索引利用"></a>索引利用</h4><p>   如果一个合取项上存在索引，则先判断索引是否可用，如能利用索引快速得出合取项的值，则能加快判断速度。<br>   同理，OR表达式中的子项也可以利用索引<br>   <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WHERE (A.a&gt; 100 AND A.b = 5 AND... )</span><br><span class="line"><span class="comment">-- 情况1：A表的a列上存在索引，b列无索引，则利用a上的索引找出元组，“A.b = 5” 作为过滤条件使用</span></span><br><span class="line"><span class="comment">-- 情况2：A表的a列上不存在索引，b列有索引，则利用b上的索引找出元组，“A.a&gt; 100” 作为过滤条件使用</span></span><br></pre></td></tr></table></figure></p><h2 id="Condition-Simplification-of-MySQL"><a href="#Condition-Simplification-of-MySQL" class="headerlink" title="Condition Simplification of MySQL"></a>Condition Simplification of MySQL</h2><h3 id="1-把HAVING条件并入WHERE条件：不支持"><a href="#1-把HAVING条件并入WHERE条件：不支持" class="headerlink" title="1. 把HAVING条件并入WHERE条件：不支持"></a>1. 把HAVING条件并入WHERE条件：不支持</h3><h3 id="2-去除表达式中冗余的括号：支持"><a href="#2-去除表达式中冗余的括号：支持" class="headerlink" title="2. 去除表达式中冗余的括号：支持"></a>2. 去除表达式中冗余的括号：支持</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t3,t1 <span class="keyword">where</span> (a1&gt;<span class="number">1</span>) <span class="keyword">AND</span> ((a3&gt;<span class="number">1</span>) <span class="keyword">and</span> b3=<span class="number">3</span>) ;</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+---------+---------+------+------+----------------------------------------------------+</span></span><br><span class="line">| id | select_type | table | type  | possible_keys | key     | key_len | ref  | rows | Extra                                              |</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+---------+---------+------+------+----------------------------------------------------+</span></span><br><span class="line">|  1 | SIMPLE      | t3    | range | PRIMARY       | PRIMARY | 4       | NULL | 5000 | Using where                                        |</span><br><span class="line">|  1 | SIMPLE      | t1    | range | PRIMARY       | PRIMARY | 4       | NULL | 5000 | Using where; Using join buffer (Block Nested Loop) |</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+---------+---------+------+------+----------------------------------------------------+</span></span><br><span class="line"><span class="comment">-- 查询优化器处理后的语句变形为：</span></span><br><span class="line"><span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="string">`test`</span>.<span class="string">`t3`</span>.<span class="string">`a3`</span> <span class="keyword">AS</span> <span class="string">`a3`</span>,<span class="string">`test`</span>.<span class="string">`t3`</span>.<span class="string">`b3`</span> <span class="keyword">AS</span> <span class="string">`b3`</span>,</span><br><span class="line"><span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> <span class="keyword">AS</span> <span class="string">`a1`</span>,<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`b1`</span> <span class="keyword">AS</span> <span class="string">`b1`</span> <span class="keyword">from</span> <span class="string">`test`</span></span><br><span class="line">.<span class="string">`t3`</span> <span class="keyword">join</span> <span class="string">`test`</span>.<span class="string">`t1`</span></span><br><span class="line"><span class="keyword">where</span> ((<span class="string">`test`</span>.<span class="string">`t3`</span>.<span class="string">`b3`</span> = <span class="number">3</span>) <span class="keyword">and</span> (<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> &gt; <span class="number">1</span>) <span class="keyword">and</span> (<span class="string">`test`</span>.<span class="string">`t3`</span>.<span class="string">`a3`</span> &gt; <span class="number">1</span>))</span><br></pre></td></tr></table></figure><h3 id="3-常量传递：支持"><a href="#3-常量传递：支持" class="headerlink" title="3. 常量传递：支持"></a>3. 常量传递：支持</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t3,t1 <span class="keyword">where</span> (a3=b3 <span class="keyword">and</span> b3=<span class="number">3</span>) ;</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+---------+---------+-------+-------+-------+</span></span><br><span class="line">| id | select_type | table | type  | possible_keys | key     | key_len | ref   | rows  | Extra |</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+---------+---------+-------+-------+-------+</span></span><br><span class="line">|  1 | SIMPLE      | t3    | const | PRIMARY       | PRIMARY | 4       | const |     1 | NULL  |</span><br><span class="line">|  1 | SIMPLE      | t1    | ALL   | NULL          | NULL    | NULL    | NULL  | 10001 | NULL  |</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+---------+---------+-------+-------+-------+</span></span><br><span class="line"><span class="comment">-- 查询优化器处理后的语句变形为：</span></span><br><span class="line"><span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="string">`test`</span>.<span class="string">`t3`</span>.<span class="string">`a3`</span> <span class="keyword">AS</span> <span class="string">`a3`</span>,<span class="string">`test`</span>.<span class="string">`t3`</span>.<span class="string">`b3`</span> <span class="keyword">AS</span> <span class="string">`b3`</span>,</span><br><span class="line"><span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> <span class="keyword">AS</span> <span class="string">`a1`</span>,<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`b1`</span> <span class="keyword">AS</span> <span class="string">`b1`</span> <span class="keyword">from</span> <span class="string">`test`</span></span><br><span class="line">.<span class="string">`t3`</span> <span class="keyword">join</span> <span class="string">`test`</span>.<span class="string">`t1`</span></span><br><span class="line"><span class="keyword">where</span> ((<span class="string">`test`</span>.<span class="string">`t3`</span>.<span class="string">`a3`</span> = <span class="number">3</span>) <span class="keyword">and</span> (<span class="string">`test`</span>.<span class="string">`t3`</span>.<span class="string">`b3`</span> = <span class="number">3</span>))</span><br></pre></td></tr></table></figure><h3 id="4-消除死码：支持"><a href="#4-消除死码：支持" class="headerlink" title="4. 消除死码：支持"></a>4. 消除死码：支持</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t3 <span class="keyword">where</span> <span class="number">0</span>&gt;<span class="number">1</span> <span class="keyword">and</span> a3&gt;<span class="number">1</span>;</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------+------+------------------+</span></span><br><span class="line">| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | Extra            |</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------+------+------------------+</span></span><br><span class="line">|  1 | SIMPLE      | NULL  | NULL | NULL          | NULL | NULL    | NULL | NULL | Impossible WHERE |</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------+------+------------------+</span></span><br></pre></td></tr></table></figure><h3 id="5-表达式计算：支持"><a href="#5-表达式计算：支持" class="headerlink" title="5. 表达式计算：支持"></a>5. 表达式计算：支持</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t3 <span class="keyword">where</span> a3=<span class="number">1</span>+<span class="number">2</span>;</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+---------+---------+-------+------+-------+</span></span><br><span class="line">| id | select_type | table | type  | possible_keys | key     | key_len | ref   | rows | Extra |</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+---------+---------+-------+------+-------+</span></span><br><span class="line">|  1 | SIMPLE      | t3    | const | PRIMARY       | PRIMARY | 4       | const |    1 | NULL  |</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+---------+---------+-------+------+-------+</span></span><br><span class="line"><span class="comment">-- 查询优化器处理后的语句变形为：</span></span><br><span class="line"><span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="string">`test`</span>.<span class="string">`t3`</span>.<span class="string">`a3`</span> <span class="keyword">AS</span> <span class="string">`a3`</span>,<span class="string">`test`</span>.<span class="string">`t3`</span>.<span class="string">`b3`</span> <span class="keyword">AS</span> <span class="string">`b3`</span></span><br><span class="line"><span class="keyword">from</span> <span class="string">`test`</span>.<span class="string">`t3`</span></span><br><span class="line"> <span class="keyword">where</span> (<span class="string">`test`</span>.<span class="string">`t3`</span>.<span class="string">`a3`</span> = (<span class="number">1</span> + <span class="number">2</span>))</span><br><span class="line"><span class="comment">--</span></span><br><span class="line"> <span class="keyword">EXPLAIN</span> <span class="keyword">EXTENDED</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1, t2 <span class="keyword">WHERE</span> <span class="number">0</span>&gt;<span class="number">1</span>+<span class="number">2</span> <span class="keyword">AND</span> a1=<span class="number">10</span>;</span><br><span class="line"> +<span class="comment">----+-------------+-------+------+---------------+------+---------+------+------+----------+------------------+</span></span><br><span class="line"> | id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra            |</span><br><span class="line"> +<span class="comment">----+-------------+-------+------+---------------+------+---------+------+------+----------+------------------+</span></span><br><span class="line"> |  1 | SIMPLE      | NULL  | NULL | NULL          | NULL | NULL    | NULL | NULL |     NULL | Impossible WHERE |</span><br><span class="line"> +<span class="comment">----+-------------+-------+------+---------------+------+---------+------+------+----------+------------------+</span></span><br></pre></td></tr></table></figure><h3 id="6-等式变换：不支持"><a href="#6-等式变换：不支持" class="headerlink" title="6. 等式变换：不支持"></a>6. 等式变换：不支持</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t3 <span class="keyword">where</span> -a3=<span class="number">1</span>;</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------+-------+-------------+</span></span><br><span class="line">| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows  | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------+-------+-------------+</span></span><br><span class="line">|  1 | SIMPLE      | t3    | ALL  | NULL          | NULL | NULL    | NULL | 10001 | Using where |</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------+-------+-------------+</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t3 <span class="keyword">where</span> a3=<span class="number">-1</span> ;</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+---------+---------+-------+------+-------+</span></span><br><span class="line">| id | select_type | table | type  | possible_keys | key     | key_len | ref   | rows | Extra |</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+---------+---------+-------+------+-------+</span></span><br><span class="line">|  1 | SIMPLE      | t3    | const | PRIMARY       | PRIMARY | 4       | const |    1 | NULL  |</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+---------+---------+-------+------+-------+</span></span><br></pre></td></tr></table></figure><h3 id="7-不等式变换：不支持"><a href="#7-不等式变换：不支持" class="headerlink" title="7. 不等式变换：不支持"></a>7. 不等式变换：不支持</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t3 <span class="keyword">where</span> a3&gt;<span class="number">1</span> <span class="keyword">and</span> a3&gt;<span class="number">2</span>;</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+---------+---------+------+------+-------------+</span></span><br><span class="line">| id | select_type | table | type  | possible_keys | key     | key_len | ref  | rows | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+---------+---------+------+------+-------------+</span></span><br><span class="line">|  1 | SIMPLE      | t3    | range | PRIMARY       | PRIMARY | 4       | NULL | 5001 | Using where |</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+---------+---------+------+------+-------------+</span></span><br><span class="line"><span class="comment">-- 查询优化器处理后的语句变形为：</span></span><br><span class="line"><span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="string">`test`</span>.<span class="string">`t3`</span>.<span class="string">`a3`</span> <span class="keyword">AS</span> <span class="string">`a3`</span>,<span class="string">`test`</span>.<span class="string">`t3`</span>.<span class="string">`b3`</span> <span class="keyword">AS</span> <span class="string">`b3`</span></span><br><span class="line"><span class="keyword">from</span> <span class="string">`test`</span>.<span class="string">`t3`</span></span><br><span class="line"><span class="keyword">where</span> ((<span class="string">`test`</span>.<span class="string">`t3`</span>.<span class="string">`a3`</span> &gt; <span class="number">1</span>) <span class="keyword">and</span> (<span class="string">`test`</span>.<span class="string">`t3`</span>.<span class="string">`a3`</span> &gt; <span class="number">2</span>))</span><br></pre></td></tr></table></figure><h3 id="8-布尔表达式变换-1"><a href="#8-布尔表达式变换-1" class="headerlink" title="8. 布尔表达式变换"></a>8. 布尔表达式变换</h3><h4 id="谓词传递闭包：不支持"><a href="#谓词传递闭包：不支持" class="headerlink" title="谓词传递闭包：不支持"></a>谓词传递闭包：不支持</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t3 <span class="keyword">where</span> a3&gt;b3 <span class="keyword">and</span> b3&gt;<span class="number">2</span>;</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------+-------+-------------+</span></span><br><span class="line">| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows  | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------+-------+-------------+</span></span><br><span class="line">|  1 | SIMPLE      | t3    | ALL  | NULL          | NULL | NULL    | NULL | 10002 | Using where |</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------+-------+-------------+</span></span><br><span class="line"><span class="comment">--  查询优化器处理后的语句变形为：</span></span><br><span class="line"><span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="string">`test`</span>.<span class="string">`t3`</span>.<span class="string">`a3`</span> <span class="keyword">AS</span> <span class="string">`a3`</span>,<span class="string">`test`</span>.<span class="string">`t3`</span>.<span class="string">`b3`</span> <span class="keyword">AS</span> <span class="string">`b3`</span></span><br><span class="line"><span class="keyword">from</span> <span class="string">`test`</span>.<span class="string">`t3`</span></span><br><span class="line"><span class="keyword">where</span> ((<span class="string">`test`</span>.<span class="string">`t3`</span>.<span class="string">`a3`</span> &gt; <span class="string">`test`</span>.<span class="string">`t3`</span>.<span class="string">`b3`</span>) <span class="keyword">and</span> (<span class="string">`test`</span>.<span class="string">`t3`</span>.<span class="string">`b3`</span> &gt; <span class="number">2</span>))</span><br></pre></td></tr></table></figure><h4 id="布尔表达式被转换为等价的合取范式：支持"><a href="#布尔表达式被转换为等价的合取范式：支持" class="headerlink" title="布尔表达式被转换为等价的合取范式：支持"></a>布尔表达式被转换为等价的合取范式：支持</h4><p> 参见死码消除中的示例</p><h4 id="索引的利用—AND操作符是可交换的：支持"><a href="#索引的利用—AND操作符是可交换的：支持" class="headerlink" title="索引的利用—AND操作符是可交换的：支持"></a>索引的利用—AND操作符是可交换的：支持</h4><blockquote><p>MySQL支持对条件按表连接的次序进行排序，优先判断连接的表涉及的条件</p></blockquote><h3 id="9-IS-NULL表达式优化：支持"><a href="#9-IS-NULL表达式优化：支持" class="headerlink" title="9. IS NULL表达式优化：支持"></a>9. IS NULL表达式优化：支持</h3><p>利用索引，支持“IS NULL”表达式的优化。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t2`</span> (</span><br><span class="line">  <span class="string">`a`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`b`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`c`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`d`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`e`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`a`</span>,<span class="string">`b`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`c_DESC_d_DESC`</span> (<span class="string">`c`</span>,<span class="string">`d`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t2 <span class="keyword">where</span> c <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------+------+------------------+</span></span><br><span class="line">| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | Extra            |</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------+------+------------------+</span></span><br><span class="line">|  1 | SIMPLE      | NULL  | NULL | NULL          | NULL | NULL    | NULL | NULL | Impossible WHERE |</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------+------+------------------+</span></span><br></pre></td></tr></table></figure></p><hr><p>Good luck!<br>冬日暖阳</p>]]></content>
    
    <summary type="html">
    
      MySQL优化
    
    </summary>
    
      <category term="MySQL" scheme="http://mydba.xyz/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL优化 -- 5 视图重写与等价谓词重写</title>
    <link href="http://mydba.xyz/mysql/optimization/op5.html"/>
    <id>http://mydba.xyz/mysql/optimization/op5.html</id>
    <published>2017-12-27T02:24:21.000Z</published>
    <updated>2017-12-27T02:24:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="视图重写与等价谓词重写"><a href="#视图重写与等价谓词重写" class="headerlink" title="视图重写与等价谓词重写"></a>视图重写与等价谓词重写</h1><p>View Rewrite and Equivalent Predicate Rewrite</p><h2 id="What-is-View-and-View-Rewrite"><a href="#What-is-View-and-View-Rewrite" class="headerlink" title="What is View and View Rewrite ?"></a>What is View and View Rewrite ?</h2><p>什么是视图?<br>视图是数据库中基于表的一种对象, 把对表的查询固化,这种固化就是视图。</p><p>注意区分:<br>    视图(只有视图定义部分，不含数据)<------>物化视图（把视图查询的结果生成一张表固定下来）<------>物化(技术)(把查询结果临时保存到内存的一种优化方法)<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span></span><br><span class="line">    [<span class="keyword">OR</span> <span class="keyword">REPLACE</span>]</span><br><span class="line">    [ALGORITHM = &#123;UNDEFINED | <span class="keyword">MERGE</span> | TEMPTABLE&#125;]</span><br><span class="line">    [DEFINER = &#123; <span class="keyword">user</span> | <span class="keyword">CURRENT_USER</span> &#125;]</span><br><span class="line">        [<span class="keyword">SQL</span> <span class="keyword">SECURITY</span> &#123; DEFINER | INVOKER &#125;]</span><br><span class="line">        <span class="keyword">VIEW</span> view_name [(column_list)]</span><br><span class="line">        <span class="keyword">AS</span> select_statement</span><br><span class="line">        [<span class="keyword">WITH</span> [<span class="keyword">CASCADED</span> | <span class="keyword">LOCAL</span>] <span class="keyword">CHECK</span> <span class="keyword">OPTION</span>]</span><br></pre></td></tr></table></figure></------></------></p><h3 id="视图的类型："><a href="#视图的类型：" class="headerlink" title="视图的类型："></a>视图的类型：</h3><ol><li><p>用 SPJ(select-project-join) 格式构造的视图，称为简单视图。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> v1 <span class="keyword">AS</span> <span class="keyword">SELECT</span> x, y, z <span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure></li><li><p>用非SPJ格式构造的视图（带有GROUP BY等操作），称为复杂视图。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> v2 <span class="keyword">AS</span> <span class="keyword">SELECT</span> x, y, z <span class="keyword">FROM</span> t <span class="keyword">ORDER</span> <span class="keyword">BY</span> x;</span><br></pre></td></tr></table></figure></li></ol><h3 id="什么是视图重写"><a href="#什么是视图重写" class="headerlink" title="什么是视图重写?"></a>什么是视图重写?</h3><ol><li>查询语句中出现视图对象</li><li>查询优化后,视图对象消失</li><li>消失的视图对象的查询语句, 融合到初始查询语句中</li></ol><p>视图重写示例<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_a(a <span class="built_in">INT</span>, b <span class="built_in">INT</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> v_a <span class="keyword">AS</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_a;</span><br></pre></td></tr></table></figure></p><p>基于视图的查询命令如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col_a <span class="keyword">FROM</span> v_a <span class="keyword">WHERE</span> col_b&gt;<span class="number">100</span>;</span><br></pre></td></tr></table></figure></p><p>经过视图重写后可变换为如下形式：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col_a <span class="keyword">FROM</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">SELECT</span> col_a, col_b <span class="keyword">FROM</span> t_a</span><br><span class="line">)</span><br><span class="line"><span class="keyword">WHERE</span> col_b&gt;<span class="number">100</span>;</span><br></pre></td></tr></table></figure></p><p>未来经过优化，可以变换为如下等价形式：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col_a <span class="keyword">FROM</span> t_a <span class="keyword">WHERE</span> col_b&gt;<span class="number">100</span>;</span><br></pre></td></tr></table></figure></p><h3 id="MySQL视图重写准则："><a href="#MySQL视图重写准则：" class="headerlink" title="MySQL视图重写准则："></a>MySQL视图重写准则：</h3><ol><li><p>MySQL支持对视图进行优化。</p></li><li><p>优化方法是把视图转为对基表的查询，然后进行类似子查询的优化。</p></li><li><p>MySQL通常只能重写简单视图，复杂视图不能重写。</p></li></ol><p><img src="/img/markdown-img-paste-20171227110559653.png" alt="视图重写"></p><h2 id="How-to-optimize-view-with-View-Rewrite-for-MySQL"><a href="#How-to-optimize-view-with-View-Rewrite-for-MySQL" class="headerlink" title="How to optimize view with View Rewrite for MySQL ?"></a>How to optimize view with View Rewrite for MySQL ?</h2><p>MySQL视图重写示例—数据准备：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t1 (a1 <span class="built_in">int</span> <span class="keyword">UNIQUE</span>, b1 <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t2 (a2 <span class="built_in">int</span> <span class="keyword">UNIQUE</span>, b2 <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t3 (a3 <span class="built_in">int</span> <span class="keyword">UNIQUE</span>, b3 <span class="built_in">int</span>);</span><br></pre></td></tr></table></figure></p><p>创建简单视图：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> v_t_1_2 <span class="keyword">AS</span></span><br><span class="line">    <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1, t2;</span><br></pre></td></tr></table></figure></p><p>创建复杂视图：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> v_t_gd_1_2 <span class="keyword">AS</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> t1.b1, t2.b2</span><br><span class="line">    <span class="keyword">FROM</span> t1, t2</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> t1.b1, t2.b2;</span><br></pre></td></tr></table></figure></p><p>MySQL视图重写示例1：<br>在简单视图上执行连接操作。<br>直接用视图和表做连接操作，查询执行计划如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN EXTENDED SELECT * FROM t1, v_t_1_2 WHERE t1.a1&lt;20;</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+------+---------+------+------+----------+---------------------------------------+</span></span><br><span class="line">| id | select_type | table | type  | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                 |</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+------+---------+------+------+----------+---------------------------------------+</span></span><br><span class="line">|  1 | SIMPLE      | t1    | range | a1            | a1   | 5       | NULL |    1 |   100.00 | Using index condition                 |</span><br><span class="line">|  1 | SIMPLE      | t1    | ALL   | NULL          | NULL | NULL    | NULL |    1 |   100.00 | Using join buffer (Block Nested Loop) |</span><br><span class="line">|  1 | SIMPLE      | t2    | ALL   | NULL          | NULL | NULL    | NULL |    1 |   100.00 | Using join buffer (Block Nested Loop) |</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+------+---------+------+------+----------+---------------------------------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- 查询优化器优化后的语句：</span></span><br><span class="line">mysql&gt; <span class="keyword">show</span> <span class="keyword">warnings</span> \G</span><br><span class="line">*************************** <span class="number">1.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">  <span class="keyword">Level</span>: Note</span><br><span class="line">   Code: <span class="number">1003</span></span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> <span class="keyword">AS</span> <span class="string">`a1`</span>,<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`b1`</span> <span class="keyword">AS</span> <span class="string">`b1`</span>,<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> <span class="keyword">AS</span> <span class="string">`a1`</span>,<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`b1`</span> <span class="keyword">AS</span> <span class="string">`b1`</span>,<span class="string">`test`</span>.<span class="string">`t2`</span>.<span class="string">`a2`</span> <span class="keyword">AS</span> <span class="string">`a2`</span>,<span class="string">`test`</span>.<span class="string">`t2`</span>.<span class="string">`b2`</span> <span class="keyword">AS</span> <span class="string">`b2`</span> <span class="keyword">from</span> <span class="string">`test`</span>.<span class="string">`t1`</span> <span class="keyword">join</span> <span class="string">`test`</span>.<span class="string">`t1`</span> <span class="keyword">join</span> <span class="string">`test`</span>.<span class="string">`t2`</span> <span class="keyword">where</span> (<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> &lt; <span class="number">20</span>)</span><br></pre></td></tr></table></figure></p><p>在表上执行与简单视图等价的连接操作<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN EXTENDED SELECT * FROM t1, (SELECT * FROM t1, t2) t12 WHERE t1.a1&lt;20;</span><br><span class="line">+<span class="comment">----+-------------+------------+-------+---------------+------+---------+------+------+----------+---------------------------------------+</span></span><br><span class="line">| id | select_type | table      | type  | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                 |</span><br><span class="line">+<span class="comment">----+-------------+------------+-------+---------------+------+---------+------+------+----------+---------------------------------------+</span></span><br><span class="line">|  1 | PRIMARY     | t1         | range | a1            | a1   | 5       | NULL |    1 |   100.00 | Using index condition                 |</span><br><span class="line">|  1 | PRIMARY     | &lt;derived2&gt; | ALL   | NULL          | NULL | NULL    | NULL |    2 |   100.00 | Using join buffer (Block Nested Loop) |</span><br><span class="line">|  2 | DERIVED     | t1         | ALL   | NULL          | NULL | NULL    | NULL |    1 |   100.00 | NULL                                  |</span><br><span class="line">|  2 | DERIVED     | t2         | ALL   | NULL          | NULL | NULL    | NULL |    1 |   100.00 | Using join buffer (Block Nested Loop) |</span><br><span class="line">+<span class="comment">----+-------------+------------+-------+---------------+------+---------+------+------+----------+---------------------------------------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- 查询优化器优化后的语句：</span></span><br><span class="line">mysql&gt; <span class="keyword">show</span> <span class="keyword">warnings</span> \G</span><br><span class="line">*************************** <span class="number">1.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">  <span class="keyword">Level</span>: Note</span><br><span class="line">   Code: <span class="number">1003</span></span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> <span class="keyword">AS</span> <span class="string">`a1`</span>,<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`b1`</span> <span class="keyword">AS</span> <span class="string">`b1`</span>,<span class="string">`t12`</span>.<span class="string">`a1`</span> <span class="keyword">AS</span> <span class="string">`a1`</span>,<span class="string">`t12`</span>.<span class="string">`b1`</span> <span class="keyword">AS</span> <span class="string">`b1`</span>,<span class="string">`t12`</span>.<span class="string">`a2`</span> <span class="keyword">AS</span> <span class="string">`a2`</span>,<span class="string">`t12`</span>.<span class="string">`b2`</span> <span class="keyword">AS</span> <span class="string">`b2`</span> <span class="keyword">from</span> <span class="string">`test`</span>.<span class="string">`t1`</span> <span class="keyword">join</span> (<span class="comment">/* select#2 */</span> <span class="keyword">select</span> <span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> <span class="keyword">AS</span> <span class="string">`a1`</span>,<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`b1`</span> <span class="keyword">AS</span> <span class="string">`b1`</span>,<span class="string">`test`</span>.<span class="string">`t2`</span>.<span class="string">`a2`</span> <span class="keyword">AS</span> <span class="string">`a2`</span>,<span class="string">`test`</span>.<span class="string">`t2`</span>.<span class="string">`b2`</span> <span class="keyword">AS</span> <span class="string">`b2`</span> <span class="keyword">from</span> <span class="string">`test`</span>.<span class="string">`t1`</span> <span class="keyword">join</span> <span class="string">`test`</span>.<span class="string">`t2`</span>) <span class="string">`t12`</span> <span class="keyword">where</span> (<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> &lt; <span class="number">20</span>)</span><br><span class="line"><span class="comment">-- MySQL 对视图和子查询的优化是不同的。</span></span><br></pre></td></tr></table></figure></p><p>MySQL视图重写示例2：<br>在简单视图上进行聚集操作。<br>基于表t1和t2的视图v_t_1_2，进行聚集操作：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN EXTENDED SELECT *, (SELECT max(a1) FROM v_t_1_2) FROM t1 WHERE t1.a1&lt;20;</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+------+---------+------+------+----------+-------------------------+</span></span><br><span class="line">| id | select_type | table | type  | possible_keys | key  | key_len | ref  | rows | filtered | Extra                   |</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+------+---------+------+------+----------+-------------------------+</span></span><br><span class="line">|  1 | PRIMARY     | t1    | range | a1            | a1   | 5       | NULL |    1 |   100.00 | Using index condition   |</span><br><span class="line">|  2 | SUBQUERY    | NULL  | NULL  | NULL          | NULL | NULL    | NULL | NULL |     NULL | No matching min/max row |</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+------+---------+------+------+----------+-------------------------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- 查询优化器优化后的语句：</span></span><br><span class="line">mysql&gt; <span class="keyword">show</span> <span class="keyword">warnings</span> \G</span><br><span class="line">*************************** <span class="number">1.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">  <span class="keyword">Level</span>: Note</span><br><span class="line">   Code: <span class="number">1003</span></span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> <span class="keyword">AS</span> <span class="string">`a1`</span>,<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`b1`</span> <span class="keyword">AS</span> <span class="string">`b1`</span>,(<span class="comment">/* select#2 */</span> <span class="keyword">select</span> <span class="keyword">max</span>(<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span>) <span class="keyword">from</span> <span class="string">`test`</span>.<span class="string">`t1`</span> <span class="keyword">join</span> <span class="string">`test`</span>.<span class="string">`t2`</span>) <span class="keyword">AS</span> <span class="string">`(SELECT max(a1) FROM v_t_1_2)`</span> <span class="keyword">from</span> <span class="string">`test`</span>.<span class="string">`t1`</span> <span class="keyword">where</span> (<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> &lt; <span class="number">20</span>)</span><br><span class="line"><span class="comment">-- 视图的子查询没有被消除，但是视图被重写，用基表代替了视图。</span></span><br></pre></td></tr></table></figure><p>MySQL视图重写示例3：<br>直接用视图和表做连接操作，并执行分组操作：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN EXTENDED SELECT a1, a3 FROM t3, v_t_1_2 WHERE a1&lt;20 GROUP BY a1, a3;</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+------+---------+------+------+----------+-----------------------------------------------------------------+</span></span><br><span class="line">| id | select_type | table | type  | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                                           |</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+------+---------+------+------+----------+-----------------------------------------------------------------+</span></span><br><span class="line">|  1 | SIMPLE      | t3    | index | NULL          | a3   | 5       | NULL |    1 |   100.00 | Using index; Using temporary; Using filesort                    |</span><br><span class="line">|  1 | SIMPLE      | t1    | index | a1            | a1   | 5       | NULL |    1 |   100.00 | Using where; Using index; Using join buffer (Block Nested Loop) |</span><br><span class="line">|  1 | SIMPLE      | t2    | index | NULL          | a2   | 5       | NULL |    1 |   100.00 | Using index; Using join buffer (Block Nested Loop)              |</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+------+---------+------+------+----------+-----------------------------------------------------------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- 查询优化器优化后的语句：</span></span><br><span class="line">mysql&gt; <span class="keyword">show</span> <span class="keyword">warnings</span> \G</span><br><span class="line">*************************** <span class="number">1.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">  <span class="keyword">Level</span>: Note</span><br><span class="line">   Code: <span class="number">1003</span></span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> <span class="keyword">AS</span> <span class="string">`a1`</span>,<span class="string">`test`</span>.<span class="string">`t3`</span>.<span class="string">`a3`</span> <span class="keyword">AS</span> <span class="string">`a3`</span> <span class="keyword">from</span> <span class="string">`test`</span>.<span class="string">`t3`</span> <span class="keyword">join</span> <span class="string">`test`</span>.<span class="string">`t1`</span> <span class="keyword">join</span> <span class="string">`test`</span>.<span class="string">`t2`</span> <span class="keyword">where</span> (<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> &lt; <span class="number">20</span>) <span class="keyword">group</span> <span class="keyword">by</span> <span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span>,<span class="string">`test`</span>.<span class="string">`t3`</span>.<span class="string">`a3`</span></span><br><span class="line"><span class="comment">-- 简单视图被重写了，说明 GROUP BY 对简单视图的优化没有影响</span></span><br></pre></td></tr></table></figure></p><p>MySQL视图重写示例4：<br>直接用视图和表做连接操作，并执行分组和去重操作操作：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN EXTENDED SELECT DISTINCT a1, a3 FROM t3, v_t_1_2 WHERE a1&lt;20</span><br><span class="line">    -&gt; GROUP BY a1, a3;</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+------+---------+------+------+----------+-----------------------------------------------------------------+</span></span><br><span class="line">| id | select_type | table | type  | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                                           |</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+------+---------+------+------+----------+-----------------------------------------------------------------+</span></span><br><span class="line">|  1 | SIMPLE      | t3    | index | NULL          | a3   | 5       | NULL |    1 |   100.00 | Using index; Using temporary; Using filesort                    |</span><br><span class="line">|  1 | SIMPLE      | t1    | index | a1            | a1   | 5       | NULL |    1 |   100.00 | Using where; Using index; Using join buffer (Block Nested Loop) |</span><br><span class="line">|  1 | SIMPLE      | t2    | index | NULL          | a2   | 5       | NULL |    1 |   100.00 | Using index; Distinct; Using join buffer (Block Nested Loop)    |</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+------+---------+------+------+----------+-----------------------------------------------------------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- 查询优化器优化后的语句：</span></span><br><span class="line">mysql&gt; <span class="keyword">show</span> <span class="keyword">warnings</span> \G</span><br><span class="line">*************************** <span class="number">1.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">  <span class="keyword">Level</span>: Note</span><br><span class="line">   Code: <span class="number">1003</span></span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="keyword">distinct</span> <span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> <span class="keyword">AS</span> <span class="string">`a1`</span>,<span class="string">`test`</span>.<span class="string">`t3`</span>.<span class="string">`a3`</span> <span class="keyword">AS</span> <span class="string">`a3`</span> <span class="keyword">from</span> <span class="string">`test`</span>.<span class="string">`t3`</span> <span class="keyword">join</span> <span class="string">`test`</span>.<span class="string">`t1`</span> <span class="keyword">join</span> <span class="string">`test`</span>.<span class="string">`t2`</span> <span class="keyword">where</span> (<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> &lt; <span class="number">20</span>) <span class="keyword">group</span> <span class="keyword">by</span> <span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span>,<span class="string">`test`</span>.<span class="string">`t3`</span>.<span class="string">`a3`</span></span><br></pre></td></tr></table></figure></p><p>MySQL视图重写示例5：<br>在简单视图上执行外连接操作。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN EXTENDED SELECT * FROM t3 LEFT JOIN v_t_1_2 V ON V.a1=t3.a3</span><br><span class="line">    -&gt;  WHERE V.a1&lt;20;</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------------+------+----------+---------------------------------------+</span></span><br><span class="line">| id | select_type | table | type | possible_keys | key  | key_len | ref        | rows | filtered | Extra                                 |</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------------+------+----------+---------------------------------------+</span></span><br><span class="line">|  1 | SIMPLE      | t3    | ALL  | a3            | NULL | NULL    | NULL       |    1 |   100.00 | NULL                                  |</span><br><span class="line">|  1 | SIMPLE      | t1    | ref  | a1            | a1   | 5       | test.t3.a3 |    1 |   100.00 | Using index condition                 |</span><br><span class="line">|  1 | SIMPLE      | t2    | ALL  | NULL          | NULL | NULL    | NULL       |    1 |   100.00 | Using join buffer (Block Nested Loop) |</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------------+------+----------+---------------------------------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- 查询优化器优化后的语句：</span></span><br><span class="line">mysql&gt; <span class="keyword">show</span> <span class="keyword">warnings</span> \G</span><br><span class="line">*************************** <span class="number">1.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">  <span class="keyword">Level</span>: Note</span><br><span class="line">   Code: <span class="number">1003</span></span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="string">`test`</span>.<span class="string">`t3`</span>.<span class="string">`a3`</span> <span class="keyword">AS</span> <span class="string">`a3`</span>,<span class="string">`test`</span>.<span class="string">`t3`</span>.<span class="string">`b3`</span> <span class="keyword">AS</span> <span class="string">`b3`</span>,<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> <span class="keyword">AS</span> <span class="string">`a1`</span>,<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`b1`</span> <span class="keyword">AS</span> <span class="string">`b1`</span>,<span class="string">`test`</span>.<span class="string">`t2`</span>.<span class="string">`a2`</span> <span class="keyword">AS</span> <span class="string">`a2`</span>,<span class="string">`test`</span>.<span class="string">`t2`</span>.<span class="string">`b2`</span> <span class="keyword">AS</span> <span class="string">`b2`</span> <span class="keyword">from</span> <span class="string">`test`</span>.<span class="string">`t3`</span> <span class="keyword">join</span> <span class="string">`test`</span>.<span class="string">`t1`</span> <span class="keyword">join</span> <span class="string">`test`</span>.<span class="string">`t2`</span> <span class="keyword">where</span> ((<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> = <span class="string">`test`</span>.<span class="string">`t3`</span>.<span class="string">`a3`</span>) <span class="keyword">and</span> (<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> &lt; <span class="number">20</span>))</span><br></pre></td></tr></table></figure></p><p>MySQL视图重写示例6：<br>直接用复杂视图和表做连接操作，查询执行计划如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN EXTENDED SELECT * FROM t3, v_t_gd_1_2 WHERE t3.a3&lt;20;</span><br><span class="line">+<span class="comment">----+-------------+------------+-------+---------------+------+---------+------+------+----------+---------------------------------------+</span></span><br><span class="line">| id | select_type | table      | type  | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                 |</span><br><span class="line">+<span class="comment">----+-------------+------------+-------+---------------+------+---------+------+------+----------+---------------------------------------+</span></span><br><span class="line">|  1 | PRIMARY     | t3         | range | a3            | a3   | 5       | NULL |    1 |   100.00 | Using index condition                 |</span><br><span class="line">|  1 | PRIMARY     | &lt;derived2&gt; | ALL   | NULL          | NULL | NULL    | NULL |    2 |   100.00 | Using join buffer (Block Nested Loop) |</span><br><span class="line">|  2 | DERIVED     | t1         | ALL   | NULL          | NULL | NULL    | NULL |    1 |   100.00 | Using temporary; Using filesort       |</span><br><span class="line">|  2 | DERIVED     | t2         | ALL   | NULL          | NULL | NULL    | NULL |    1 |   100.00 | Using join buffer (Block Nested Loop) |</span><br><span class="line">+<span class="comment">----+-------------+------------+-------+---------------+------+---------+------+------+----------+---------------------------------------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- 查询优化器优化后的语句：</span></span><br><span class="line">mysql&gt; <span class="keyword">show</span> <span class="keyword">warnings</span> \G</span><br><span class="line">*************************** <span class="number">1.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">  <span class="keyword">Level</span>: Note</span><br><span class="line">   Code: <span class="number">1003</span></span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="string">`test`</span>.<span class="string">`t3`</span>.<span class="string">`a3`</span> <span class="keyword">AS</span> <span class="string">`a3`</span>,<span class="string">`test`</span>.<span class="string">`t3`</span>.<span class="string">`b3`</span> <span class="keyword">AS</span> <span class="string">`b3`</span>,<span class="string">`v_t_gd_1_2`</span>.<span class="string">`b1`</span> <span class="keyword">AS</span> <span class="string">`b1`</span>,<span class="string">`v_t_gd_1_2`</span>.<span class="string">`b2`</span> <span class="keyword">AS</span> <span class="string">`b2`</span> <span class="keyword">from</span> <span class="string">`test`</span>.<span class="string">`t3`</span> <span class="keyword">join</span> <span class="string">`test`</span>.<span class="string">`v_t_gd_1_2`</span> <span class="keyword">where</span> (<span class="string">`test`</span>.<span class="string">`t3`</span>.<span class="string">`a3`</span> &lt; <span class="number">20</span>)</span><br><span class="line"><span class="comment">-- 复杂视图不被 MySQL 优化</span></span><br></pre></td></tr></table></figure></p><blockquote><p>MySQL只对简单视图进行优化，优化方法为视图重写，重写后还会进行进一步的子查询优化，不对复杂视图进行优化。</p></blockquote><h2 id="What-is-Equivalent-Predicate-Rewrite"><a href="#What-is-Equivalent-Predicate-Rewrite" class="headerlink" title="What is Equivalent Predicate Rewrite ?"></a>What is Equivalent Predicate Rewrite ?</h2><p>等价谓词重写：<br>把逻辑表达式重写成<strong>等价</strong>的且效率更高的形式  </p><p>优点：<br>能有效提高查询执行效率</p><p>常见的等价谓词重写示例1：  </p><ul><li>LIKE规则</li></ul><p>LIKE谓词，是SQL标准支持的一种模式匹配比较操作；<br>LIKE规则，是对LIKE谓词的等价重写，即改写LIKE谓词为其他等价的谓词，以更好地利用索引进行优化。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">示例如：</span><br><span class="line">  name LIKE 'Abc%'</span><br><span class="line">重写为</span><br><span class="line">  name &gt;='Abc' AND name &lt;'Abd'</span><br><span class="line">```  </span><br><span class="line">应用LIKE规则的好处：  </span><br><span class="line">转换前针对LIKE谓词，只能进行全表扫描，如果name列上存在索引，则转换后可以进行索引扫描。</span><br><span class="line"></span><br><span class="line">LIKE其他形式还可以转换：  </span><br><span class="line">LIKE匹配的表达式中，没有通配符（`%`或`_`），则与“=”等价，</span><br><span class="line">```sql</span><br><span class="line">如：  </span><br><span class="line">  name LIKE 'Abc'  </span><br><span class="line">重写为：  </span><br><span class="line">  name ='Abc'</span><br></pre></td></tr></table></figure></p><p>如果name列上存在索引，则可以利用索引提高查询效率  </p><ul><li>BETWEEN-AND规则<br>BETWEEN-AND谓词，是SQL标准支持的一种范围比较操作；<br>BETWEEN-AND规则，是BETWEEN-AND谓词的等价重写，即改写BETWEEN-AND谓词为其他等价的谓词，以更好地利用索引进行优化。  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">如：  </span><br><span class="line">  sno BETWEEN 10 AND 20  </span><br><span class="line">重写为：  </span><br><span class="line">  sno&gt;=10 AND sno &lt;=20</span><br></pre></td></tr></table></figure></li></ul><p>应用BETWEEN-AND规则的好处是：<br>如果sno上建立了索引，则可以用索引扫描代替原来BETWEEN-AND谓词限定的全表扫描，从而提高了查询的效率。  </p><ul><li>IN转换OR规则：<br>IN是只IN操作符操作，不是IN子查询。<br>IN转换OR规则，就是IN谓词的OR等价重写，即改写IN谓词为等价的OR谓词，以更好地利用索引进行优化。<br>将IN谓词等价重写为若干个OR谓词，<strong>可能</strong> 会提高执行效率。  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">如：</span><br><span class="line">   age IN (8，12，21)</span><br><span class="line">重写为：</span><br><span class="line">  age=8 OR age=12 OR age=21</span><br></pre></td></tr></table></figure></li></ul><p>应用IN转换OR规则后效率是否能够提高，需要看数据库对IN谓词是否只支持全表扫描。</p><p>如果数据库对IN谓词只支持全表扫描且OR谓词中表的age列上存在索引，则转换后查询效率会提高。</p><ul><li>IN转换ANY规则</li></ul><p>IN转换ANY规则，就是IN谓词的ANY等价重写，即改写IN谓词为等价的ANY谓词。</p><p>IN可以转换为OR，OR可以转为ANY，所以可以直接把IN转换为ANY。<br>将IN谓词等价重写为ANY谓词，可能会提高执行效率。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">如：</span><br><span class="line">  age IN (8，12，21)</span><br><span class="line">重写为：</span><br><span class="line">  age ANY(8, 12, 21)</span><br></pre></td></tr></table></figure></p><p>应用IN转换ANY规则后效率是否能够提高，依赖于数据库对于ANY操作的支持情况。<br>OR转换ANY规则，就是OR谓词的ANY等价重写，即改写OR谓词为等价的ANY谓词，以更好地利用MIN/MAX操作进行优化。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">如：</span><br><span class="line">  sal&gt;1000 OR</span><br><span class="line">  dno=3 AND (sal&gt;1100 OR sal&gt;base_sal+100) OR</span><br><span class="line">  sal&gt;base_sal+200 OR</span><br><span class="line">  sal&gt;base_sal×2</span><br><span class="line"></span><br><span class="line">重写为：</span><br><span class="line">  dno=3 AND (sal&gt;1100 OR sal&gt;base_sal+100) OR</span><br><span class="line">  sal&gt; ANY (1000,base_sal+200,base_sal×2)</span><br></pre></td></tr></table></figure></p><p>OR转换ANY规则，依赖于数据库对于ANY操作的支持情况。</p><p>PostgreSQL V9.2.3和MySQL V5.6.10目前都不支持本条规则。</p><ul><li>ALL/ANY转换集函数规则<br>就是ALL/ANY谓词改写为等价的聚集函数MIN/MAX谓词操作，以更好地利用MIN/MAX操作进行优化。<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">如：</span><br><span class="line">  sno&gt;ANY(10, 2*5+3,sqrt(9))</span><br><span class="line">重写为：</span><br><span class="line">  sno&gt;sqrt(9)</span><br></pre></td></tr></table></figure></li></ul><p>上面这个ALL/ANY转换集函数规则的示例，有两点需要注意：</p><ol><li>示例中存在“&gt;”和“ANY”，其意是在找出<code>(10, 2*5+3,sqrt(9))</code>中的最小值，所以可以重写为<code>sno&gt;sqrt(9)</code>。<br>通常，聚集函数MAX()、MIN()等的执行效率一般都比ANY、ALL谓词的执行效率高，因此在这种情况下对其进行重写，可以起到比较好的效果。</li><li>如果有索引存在，求解MAX/MIN的效率更高。</li></ol><ul><li>NOT规则</li></ul><p>NOT谓词的等价重写，如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NOT (col_1 !=2)    重写为  col_1=2</span><br><span class="line">NOT (col_1 !=col_2)重写为  col_1=col_2</span><br><span class="line">NOT (col_1 =col_2) 重写为  col_1!=col_2</span><br><span class="line">NOT (col_1 &lt;col_2) 重写为  col_1&gt;=col_2</span><br><span class="line">NOT (col_1 &gt;col_2) 重写为  col_1&lt;=col_2</span><br></pre></td></tr></table></figure></p><p>NOT规则重写的好处：<br>  如果col_1上建立了索引，则可以用索引扫描代替原来的全表扫描，从而提高查询的效率。</p><ul><li><p>OR重写并集规则</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">OR条件重写为并集操作，形如下SQL示例：</span><br><span class="line">  <span class="keyword">SELECT</span> *</span><br><span class="line">  <span class="keyword">FROM</span> student</span><br><span class="line">  <span class="keyword">WHERE</span>(sex=’f’ <span class="keyword">AND</span> age&gt;<span class="number">15</span>) <span class="keyword">OR</span> age&gt;<span class="number">18</span>；</span><br></pre></td></tr></table></figure><p>假设所有条件表达式的列上都有索引（即sex列和age列上都存在索引），数据库可能对于示例中的WHERE语句强迫查询优化器使用顺序    扫描，因为这个语句要检索的是OR操作的集合。</p><p>为了能利用索引处理上面的查询，可以将语句改成如下形式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> sex=’f’ <span class="keyword">and</span> age&gt;<span class="number">15</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> age&gt;<span class="number">18</span>;</span><br></pre></td></tr></table></figure></li></ul><p>改写后的形式，可以分别利用列sex和age上的索引，进行索引扫描，然后再提供执行UNION操作获得最终结果。</p><h2 id="How-to-do-Equivalent-Predicate-Rewrite-for-MySQL"><a href="#How-to-do-Equivalent-Predicate-Rewrite-for-MySQL" class="headerlink" title="How to do Equivalent Predicate Rewrite for MySQL ?"></a>How to do Equivalent Predicate Rewrite for MySQL ?</h2><p>?</p><hr><p>Good luck!<br>冬日暖阳</p>]]></content>
    
    <summary type="html">
    
      MySQL优化
    
    </summary>
    
      <category term="MySQL" scheme="http://mydba.xyz/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL优化 -- 4 子查询的优化（二）</title>
    <link href="http://mydba.xyz/mysql/optimization/op4.html"/>
    <id>http://mydba.xyz/mysql/optimization/op4.html</id>
    <published>2017-12-19T10:07:17.000Z</published>
    <updated>2017-12-19T10:07:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="子查询的优化（二）"><a href="#子查询的优化（二）" class="headerlink" title="子查询的优化（二）"></a>子查询的优化（二）</h1><p>Logical Query Optimization Subquery (2)</p><h2 id="MySQL可以优化什么格式的子查询？"><a href="#MySQL可以优化什么格式的子查询？" class="headerlink" title="MySQL可以优化什么格式的子查询？"></a>MySQL可以优化什么格式的子查询？</h2><p>MySQL支持对简单SELECT查询中的子查询优化，包括：</p><ul><li>简单SELECT查询中的子查询。</li><li>带有DISTINCT、ORDER BY、LIMIT操作的简单SELECT查询中的子查询。</li></ul><p>例1：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t1 (a1 <span class="built_in">INT</span>, b1 <span class="built_in">INT</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t2 (a2 <span class="built_in">INT</span>, b2 <span class="built_in">INT</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t3 (a3 <span class="built_in">INT</span>, b3 <span class="built_in">INT</span>);</span><br><span class="line">插入10000行数据。</span><br><span class="line"></span><br><span class="line">查询执行计划如下</span><br><span class="line">mysql&gt; EXPLAIN EXTENDED SELECT * FROM t1 WHERE t1.a1&lt;100 AND a1 IN (SELECT a2 FROM t2 WHERE t2.a2 &gt;10);</span><br><span class="line">+<span class="comment">----+--------------+-------------+--------+---------------+------------+---------+------------+------+----------+-------------+</span></span><br><span class="line">| id | select_type  | table       | type   | possible_keys | key        | key_len | ref        | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+--------------+-------------+--------+---------------+------------+---------+------------+------+----------+-------------+</span></span><br><span class="line">|  1 | SIMPLE       | t1          | ALL    | NULL          | NULL       | NULL    | NULL       | 9716 |   100.00 | Using where |</span><br><span class="line">|  1 | SIMPLE       | &lt;subquery2&gt; | eq_ref | &lt;auto_key&gt;    | &lt;auto_key&gt; | 4       | test.t1.a1 |    1 |   100.00 | NULL        |</span><br><span class="line">|  2 | MATERIALIZED | t2          | ALL    | NULL          | NULL       | NULL    | NULL       | 9716 |   100.00 | Using where |</span><br><span class="line">+<span class="comment">----+--------------+-------------+--------+---------------+------------+---------+------------+------+----------+-------------+</span></span><br></pre></td></tr></table></figure></p><p>MySQL不支持对如下情况的子查询进行优化：  </p><ul><li>带有UNION操作。</li><li>带有GROUP BY、HAVING、聚集函数。</li><li>使用ORDER BY中带有LIMIT。</li><li>内表、外表的个数超过MySQL支持的最大表的连接数（63个表）。</li></ul><p>例2：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t1 (a1 <span class="built_in">INT</span>, b1 <span class="built_in">INT</span>, PRIMARY <span class="keyword">KEY</span> (a1));</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t2 (a2 <span class="built_in">INT</span>, b2 <span class="built_in">INT</span>, PRIMARY <span class="keyword">KEY</span> (a2));</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t3 (a3 <span class="built_in">INT</span>, b3 <span class="built_in">INT</span>, PRIMARY <span class="keyword">KEY</span> (a3));</span><br><span class="line">插入10000行数据。</span><br><span class="line">mysql&gt; EXPLAIN EXTENDED SELECT * FROM t1 WHERE t1.a1&gt;(SELECT MIN(t2.a2) FROM t2);</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+---------+---------+------+------+----------+------------------------------+</span></span><br><span class="line">| id | select_type | table | type  | possible_keys | key     | key_len | ref  | rows | filtered | Extra                        |</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+---------+---------+------+------+----------+------------------------------+</span></span><br><span class="line">|  1 | PRIMARY     | t1    | range | PRIMARY       | PRIMARY | 4       | NULL | 5000 |   100.00 | Using where                  |</span><br><span class="line">|  2 | SUBQUERY    | NULL  | NULL  | NULL          | NULL    | NULL    | NULL | NULL |     NULL | <span class="keyword">Select</span> <span class="keyword">tables</span> optimized away |</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+---------+---------+------+------+----------+------------------------------+</span></span><br></pre></td></tr></table></figure></p><h2 id="MySQL支持哪些子查询的优化技术-？"><a href="#MySQL支持哪些子查询的优化技术-？" class="headerlink" title="MySQL支持哪些子查询的优化技术 ？"></a>MySQL支持哪些子查询的优化技术 ？</h2><ol><li><p>子查询合并技术,不支持<br>例3：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 表结构同例2</span></span><br><span class="line">mysql&gt; explain EXTENDED SELECT * FROM t1 WHERE a1&lt;4 AND (EXISTS (SELECT a2 FROM t2 WHERE t2.a2&lt;5 AND t2.b2=1) OR EXISTS (SELECT a2 FROM t2 WHERE t2.a2&lt;5 AND t2.b2=2) );</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br><span class="line">| id | select_type | table | type  | possible_keys | key     | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br><span class="line">|  1 | PRIMARY     | t1    | range | PRIMARY       | PRIMARY | 4       | NULL |    4 |   100.00 | Using where |</span><br><span class="line">|  3 | SUBQUERY    | t2    | range | PRIMARY       | PRIMARY | 4       | NULL |    5 |   100.00 | Using where |</span><br><span class="line">|  2 | SUBQUERY    | t2    | range | PRIMARY       | PRIMARY | 4       | NULL |    5 |   100.00 | Using where |</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="comment">-- t2表上执行了2次子查询,如果支持子查询合并技术,则t2表上只执行一次子查询</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">--语义等价的 SQL 语句</span></span><br><span class="line">mysql&gt; EXPLAIN EXTENDED SELECT * FROM t1 WHERE a1&lt;10 AND EXISTS (SELECT a2 FROM t2 WHERE t2.a2&lt;5 AND (t2.b2=1 OR t2.b2=2));</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br><span class="line">| id | select_type | table | type  | possible_keys | key     | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br><span class="line">|  1 | PRIMARY     | t1    | range | PRIMARY       | PRIMARY | 4       | NULL |   10 |   100.00 | Using where |</span><br><span class="line">|  2 | SUBQUERY    | t2    | range | PRIMARY       | PRIMARY | 4       | NULL |    5 |   100.00 | Using where |</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="comment">-- 人为的合并查询条件为“(t2.b2=1 OR t2.b2=2)”</span></span><br><span class="line"><span class="comment">-- t2表上的子查询，只执行一次</span></span><br></pre></td></tr></table></figure></li><li><p>子查询展开（子查询反嵌套）技术,支持得不够好<br>例4：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 表结构同例2</span></span><br><span class="line">mysql&gt; EXPLAIN EXTENDED SELECT * FROM t1, (SELECT * FROM t2 WHERE t2.a2 &gt;10) v_t2 WHERE t1.a1&lt;10 AND v_t2.a2&lt;20;</span><br><span class="line">+<span class="comment">----+-------------+------------+-------+---------------+---------+---------+------+------+----------+----------------------------------------------------+</span></span><br><span class="line">| id | select_type | table      | type  | possible_keys | key     | key_len | ref  | rows | filtered | Extra                                              |</span><br><span class="line">+<span class="comment">----+-------------+------------+-------+---------------+---------+---------+------+------+----------+----------------------------------------------------+</span></span><br><span class="line">|  1 | PRIMARY     | t1         | range | PRIMARY       | PRIMARY | 4       | NULL |   10 |   100.00 | Using where                                        |</span><br><span class="line">|  1 | PRIMARY     | &lt;derived2&gt; | ALL   | NULL          | NULL    | NULL    | NULL | 5000 |   100.00 | Using where; Using join buffer (Block Nested Loop) |</span><br><span class="line">|  2 | DERIVED     | t2         | range | PRIMARY       | PRIMARY | 4       | NULL | 5000 |   100.00 | Using where                                        |</span><br><span class="line">+<span class="comment">----+-------------+------------+-------+---------------+---------+---------+------+------+----------+----------------------------------------------------+</span></span><br><span class="line"><span class="comment">-- 在表t2上的子查询被单独执行，</span></span><br><span class="line"><span class="comment">-- 没和表t1进行了嵌套循环连接，子查询没有被消除，</span></span><br><span class="line"><span class="comment">-- 所以MySQL支持子查询反嵌套技术有限</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">--表结构同例1</span></span><br><span class="line">mysql&gt; EXPLAIN EXTENDED SELECT * FROM t1 WHERE t1.a1&lt;100 AND a1 IN (SELECT a2 FROM t2 WHERE t2.a2 &gt;10);</span><br><span class="line">+<span class="comment">----+--------------+-------------+--------+---------------+------------+---------+------------+------+----------+-------------+</span></span><br><span class="line">| id | select_type  | table       | type   | possible_keys | key        | key_len | ref        | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+--------------+-------------+--------+---------------+------------+---------+------------+------+----------+-------------+</span></span><br><span class="line">|  1 | SIMPLE       | t1          | ALL    | NULL          | NULL       | NULL    | NULL       | 9716 |   100.00 | Using where |</span><br><span class="line">|  1 | SIMPLE       | &lt;subquery2&gt; | eq_ref | &lt;auto_key&gt;    | &lt;auto_key&gt; | 4       | test.t1.a1 |    1 |   100.00 | NULL        |</span><br><span class="line">|  2 | MATERIALIZED | t2          | ALL    | NULL          | NULL       | NULL    | NULL       | 9716 |   100.00 | Using where |</span><br><span class="line">+<span class="comment">----+--------------+-------------+--------+---------------+------------+---------+------------+------+----------+-------------+</span></span><br><span class="line"><span class="comment">-- 表 t2 上的子查询被物化</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- 表结构同例2</span></span><br><span class="line">mysql &gt;  EXPLAIN EXTENDED SELECT * FROM t1 WHERE t1.a1&lt;100 AND a1 IN (SELECT a2 FROM t2 WHERE t2.a2 &gt;10);</span><br><span class="line">+<span class="comment">----+-------------+-------+--------+---------------+---------+---------+----------+------+----------+-------------+</span></span><br><span class="line">| id | select_type | table | type   | possible_keys | key     | key_len | ref      | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+-------+--------+---------------+---------+---------+----------+------+----------+-------------+</span></span><br><span class="line">|  1 | SIMPLE      | t1    | range  | PRIMARY       | PRIMARY | 4       | NULL     |   88 |   100.00 | Using where |</span><br><span class="line">|  1 | SIMPLE      | t2    | eq_ref | PRIMARY       | PRIMARY | 4       | op.t1.a1 |    1 |   100.00 | Using index |</span><br><span class="line">+<span class="comment">----+-------------+-------+--------+---------------+---------+---------+----------+------+----------+-------------+</span></span><br><span class="line"><span class="comment">-- 子查询不存在，SQL语句被转换为内连接操作，</span></span><br><span class="line"><span class="comment">-- 这表明MySQL只有在针对主键列进行类似的子查询时，</span></span><br><span class="line"><span class="comment">-- 才把子查询上拉为内连接。</span></span><br><span class="line"><span class="comment">-- 所以，MySQL还是支持子查询展开技术的。</span></span><br></pre></td></tr></table></figure></li><li><p>聚集子查询消除技术,不支持<br>例5：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 表结构同例2</span></span><br><span class="line">mysql &gt; EXPLAIN EXTENDED SELECT * FROM t1 WHERE t1.a1&gt;(SELECT MIN(t2.a2) FROM t2);</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+---------+---------+------+------+----------+------------------------------+</span></span><br><span class="line">| id | select_type | table | type  | possible_keys | key     | key_len | ref  | rows | filtered | Extra                        |</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+---------+---------+------+------+----------+------------------------------+</span></span><br><span class="line">|  1 | PRIMARY     | t1    | range | PRIMARY       | PRIMARY | 4       | NULL | 5000 |   100.00 | Using where                  |</span><br><span class="line">|  2 | SUBQUERY    | NULL  | NULL  | NULL          | NULL    | NULL    | NULL | NULL |     NULL | <span class="keyword">Select</span> <span class="keyword">tables</span> optimized away |</span><br><span class="line">+<span class="comment">----+-------------+-------+-------+---------------+---------+---------+------+------+----------+------------------------------+</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="MySQL支持对哪些类型的子查询进行优化"><a href="#MySQL支持对哪些类型的子查询进行优化" class="headerlink" title="MySQL支持对哪些类型的子查询进行优化 ?"></a>MySQL支持对哪些类型的子查询进行优化 ?</h2><ul><li><p>MySQL 不支持对 EXISTS 类型的子查询做进一步的优化<br>例6：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">表结构同例1</span><br><span class="line">mysql&gt;  EXPLAIN EXTENDED SELECT * FROM t1 WHERE EXISTS (SELECT 1 FROM t2 WHERE t1.a1 = t2.a2 and t2.a2 &gt; 10 ) ;</span><br><span class="line">+<span class="comment">----+--------------------+-------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">| id | select_type        | table | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+--------------------+-------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">|  1 | PRIMARY            | t1    | ALL  | NULL          | NULL | NULL    | NULL | 9716 |   100.00 | Using where |</span><br><span class="line">|  2 | DEPENDENT SUBQUERY | t2    | ALL  | NULL          | NULL | NULL    | NULL | 9716 |   100.00 | Using where |</span><br><span class="line">+<span class="comment">----+--------------------+-------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br></pre></td></tr></table></figure></li><li><p>MySQL 不支持对 NOT EXISTS 类型的子查询做进一步的优化<br>例7：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">表结构同例1</span><br><span class="line">mysql&gt;  EXPLAIN EXTENDED SELECT * FROM t1 WHERE NOT EXISTS (SELECT 1 FROM t2 WHERE t1.a1 = t2.a2 and t2.a2 &gt; 10 ) ;</span><br><span class="line">+<span class="comment">----+--------------------+-------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">| id | select_type        | table | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+--------------------+-------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">|  1 | PRIMARY            | t1    | ALL  | NULL          | NULL | NULL    | NULL | 9716 |   100.00 | Using where |</span><br><span class="line">|  2 | DEPENDENT SUBQUERY | t2    | ALL  | NULL          | NULL | NULL    | NULL | 9716 |   100.00 | Using where |</span><br><span class="line">+<span class="comment">----+--------------------+-------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br></pre></td></tr></table></figure></li><li><p>MySQL 支持对 IN 类型的子查询的优化<br>例8（非相关子查询）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">表结构同例1</span><br><span class="line">mysql&gt; EXPLAIN EXTENDED SELECT * FROM t1 WHERE t1.a1 IN ( SELECT a2 FROM t2 WHERE t2.a2 &gt; 10 );</span><br><span class="line">+<span class="comment">----+--------------+-------------+--------+---------------+------------+---------+------------+------+----------+-------------+</span></span><br><span class="line">| id | select_type  | table       | type   | possible_keys | key        | key_len | ref        | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+--------------+-------------+--------+---------------+------------+---------+------------+------+----------+-------------+</span></span><br><span class="line">|  1 | SIMPLE       | t1          | ALL    | NULL          | NULL       | NULL    | NULL       | 9716 |   100.00 | Using where |</span><br><span class="line">|  1 | SIMPLE       | &lt;subquery2&gt; | eq_ref | &lt;auto_key&gt;    | &lt;auto_key&gt; | 4       | test.t1.a1 |    1 |   100.00 | NULL        |</span><br><span class="line">|  2 | MATERIALIZED | t2          | ALL    | NULL          | NULL       | NULL    | NULL       | 9716 |   100.00 | Using where |</span><br><span class="line">+<span class="comment">----+--------------+-------------+--------+---------------+------------+---------+------------+------+----------+-------------+</span></span><br><span class="line"><span class="comment">-- 对t2 表进行了物化， 之后进行了半连接优化</span></span><br><span class="line"><span class="comment">-- 优化器处理后的语句为：</span></span><br><span class="line">mysql&gt; show warnings \G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">  Level: Note</span><br><span class="line">   Code: 1003</span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> <span class="keyword">AS</span> <span class="string">`a1`</span>,<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`b1`</span> <span class="keyword">AS</span> <span class="string">`b1`</span> <span class="keyword">from</span> <span class="string">`test`</span>.<span class="string">`t1`</span> semi <span class="keyword">join</span> (<span class="string">`test`</span>.<span class="string">`t2`</span>) <span class="keyword">where</span> ((<span class="string">`&lt;subquery2&gt;`</span>.<span class="string">`a2`</span> = <span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span>) <span class="keyword">and</span> (<span class="string">`test`</span>.<span class="string">`t2`</span>.<span class="string">`a2`</span> &gt; <span class="number">10</span>))</span><br><span class="line"><span class="comment">-- 进行了物化后，消除了子查询，进行了半连接优化</span></span><br></pre></td></tr></table></figure><p>例9（相关子查询）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">表结构同例1</span><br><span class="line">mysql&gt; EXPLAIN EXTENDED SELECT * FROM t1 WHERE t1.a1 IN ( SELECT a2 FROM t2 WHERE t1.a1=10) ;</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------+------+----------+--------------------------------------------------------------------+</span></span><br><span class="line">| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                                              |</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------+------+----------+--------------------------------------------------------------------+</span></span><br><span class="line">|  1 | SIMPLE      | t1    | ALL  | NULL          | NULL | NULL    | NULL | 9716 |   100.00 | Using where                                                        |</span><br><span class="line">|  1 | SIMPLE      | t2    | ALL  | NULL          | NULL | NULL    | NULL | 9716 |   100.00 | Using where; FirstMatch(t1); Using join buffer (Block Nested Loop) |</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------+------+----------+--------------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">-- select_type 为  SIMPLE 说明消除了子查询</span></span><br><span class="line"><span class="comment">-- 优化器处理后的语句为：</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">warnings</span> \G</span><br><span class="line">*************************** <span class="number">1.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">  <span class="keyword">Level</span>: Note</span><br><span class="line">   Code: <span class="number">1276</span></span><br><span class="line">Message: <span class="keyword">Field</span> <span class="keyword">or</span> <span class="keyword">reference</span> <span class="string">'test.t1.a1'</span> <span class="keyword">of</span> <span class="keyword">SELECT</span> #<span class="number">2</span> was resolved <span class="keyword">in</span> <span class="keyword">SELECT</span> #<span class="number">1</span></span><br><span class="line">*************************** <span class="number">2.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">  <span class="keyword">Level</span>: Note</span><br><span class="line">   Code: <span class="number">1003</span></span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> <span class="keyword">AS</span> <span class="string">`a1`</span>,<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`b1`</span> <span class="keyword">AS</span> <span class="string">`b1`</span> <span class="keyword">from</span> <span class="string">`test`</span>.<span class="string">`t1`</span> semi <span class="keyword">join</span> (<span class="string">`test`</span>.<span class="string">`t2`</span>) <span class="keyword">where</span> ((<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> = <span class="number">10</span>) <span class="keyword">and</span> (<span class="string">`test`</span>.<span class="string">`t2`</span>.<span class="string">`a2`</span> = <span class="number">10</span>))</span><br><span class="line"><span class="comment">-- IN 子查询被优化为半连接</span></span><br></pre></td></tr></table></figure></li><li><p>MySQL 支持对 NOT IN 类型的子查询的优化<br>例10（NOT IN 非相关子查询）:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">表结构同例1</span><br><span class="line">mysql&gt; EXPLAIN EXTENDED SELECT * FROM t1 WHERE t1.a1 NOT IN ( SELECT a2 FROM t2 WHERE t2.a2 &gt; 10 );</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">|  1 | PRIMARY     | t1    | ALL  | NULL          | NULL | NULL    | NULL | 9716 |   100.00 | Using where |</span><br><span class="line">|  2 | SUBQUERY    | t2    | ALL  | NULL          | NULL | NULL    | NULL | 9716 |   100.00 | Using where |</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- 优化器处理后的语句为：</span></span><br><span class="line">mysql&gt; <span class="keyword">show</span> <span class="keyword">warnings</span> \G</span><br><span class="line">*************************** <span class="number">1.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">  <span class="keyword">Level</span>: Note</span><br><span class="line">   Code: <span class="number">1003</span></span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> <span class="keyword">AS</span> <span class="string">`a1`</span>,<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`b1`</span> <span class="keyword">AS</span> <span class="string">`b1`</span> <span class="keyword">from</span> <span class="string">`test`</span>.<span class="string">`t1`</span> <span class="keyword">where</span> (<span class="keyword">not</span>(&lt;in_optimizer&gt;(<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span>,<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> <span class="keyword">in</span> ( &lt;materialize&gt; (<span class="comment">/* select#2 */</span> <span class="keyword">select</span> <span class="string">`test`</span>.<span class="string">`t2`</span>.<span class="string">`a2`</span> <span class="keyword">from</span> <span class="string">`test`</span>.<span class="string">`t2`</span> <span class="keyword">where</span> (<span class="string">`test`</span>.<span class="string">`t2`</span>.<span class="string">`a2`</span> &gt; <span class="number">10</span>) ), &lt;primary_index_lookup&gt;(<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> <span class="keyword">in</span> &lt;<span class="keyword">temporary</span> <span class="keyword">table</span>&gt; <span class="keyword">on</span> &lt;auto_key&gt; <span class="keyword">where</span> ((<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> = <span class="string">`materialized-subquery`</span>.<span class="string">`a2`</span>)))))))</span><br><span class="line"><span class="comment">-- NOT IN 子查询被物化，但没有消除子查询</span></span><br></pre></td></tr></table></figure></li><li><p>MySQL 支持对 ALL 类型的子查询的优化<br>例11（<code>&gt;</code>ALL 非相关子查询）:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">表结构同例1</span><br><span class="line">mysql&gt; EXPLAIN EXTENDED SELECT * FROM t1 WHERE t1.a1 &gt; ALL ( SELECT a2 FROM t2 WHERE t2.a2 &gt; 10 );</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">|  1 | PRIMARY     | t1    | ALL  | NULL          | NULL | NULL    | NULL | 9716 |   100.00 | Using where |</span><br><span class="line">|  2 | SUBQUERY    | t2    | ALL  | NULL          | NULL | NULL    | NULL | 9716 |   100.00 | Using where |</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- 优化器处理后的语句为：</span></span><br><span class="line">mysql&gt;  <span class="keyword">show</span> <span class="keyword">warnings</span> \G</span><br><span class="line">*************************** <span class="number">1.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">  <span class="keyword">Level</span>: Note</span><br><span class="line">   Code: <span class="number">1003</span></span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> <span class="keyword">AS</span> <span class="string">`a1`</span>,<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`b1`</span> <span class="keyword">AS</span> <span class="string">`b1`</span> <span class="keyword">from</span> <span class="string">`test`</span>.<span class="string">`t1`</span> <span class="keyword">where</span> &lt;<span class="keyword">not</span>&gt;((<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> &lt;= (<span class="comment">/* select#2 */</span> <span class="keyword">select</span> <span class="keyword">max</span>(<span class="string">`test`</span>.<span class="string">`t2`</span>.<span class="string">`a2`</span>) <span class="keyword">from</span> <span class="string">`test`</span>.<span class="string">`t2`</span> <span class="keyword">where</span> (<span class="string">`test`</span>.<span class="string">`t2`</span>.<span class="string">`a2`</span> &gt; <span class="number">10</span>))))</span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- ALL 子查询被转换为MAX 运算，但是子查询没有被消除</span></span><br></pre></td></tr></table></figure><p>例12（=ALL 非相关子查询）:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">表结构同例1</span><br><span class="line">mysql&gt; EXPLAIN EXTENDED SELECT * FROM t1 WHERE t1.a1 = ALL ( SELECT a2 FROM t2 WHERE t2.a2 &gt; 10 );</span><br><span class="line">+<span class="comment">----+--------------------+-------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">| id | select_type        | table | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+--------------------+-------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">|  1 | PRIMARY            | t1    | ALL  | NULL          | NULL | NULL    | NULL | 9716 |   100.00 | Using where |</span><br><span class="line">|  2 | DEPENDENT SUBQUERY | t2    | ALL  | NULL          | NULL | NULL    | NULL | 9716 |   100.00 | Using where |</span><br><span class="line">+<span class="comment">----+--------------------+-------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- 优化器处理后的语句为：</span></span><br><span class="line">mysql &gt; <span class="keyword">show</span> <span class="keyword">warnings</span> \G</span><br><span class="line">*************************** <span class="number">1.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">  <span class="keyword">Level</span>: Note</span><br><span class="line">   Code: <span class="number">1003</span></span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> <span class="keyword">AS</span> <span class="string">`a1`</span>,<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`b1`</span> <span class="keyword">AS</span> <span class="string">`b1`</span> <span class="keyword">from</span> <span class="string">`test`</span>.<span class="string">`t1`</span> <span class="keyword">where</span> &lt;<span class="keyword">not</span>&gt;(&lt;in_optimizer&gt;(<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span>,&lt;<span class="keyword">exists</span>&gt;(<span class="comment">/* select#2 */</span> <span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> <span class="string">`test`</span>.<span class="string">`t2`</span> <span class="keyword">where</span> ((<span class="string">`test`</span>.<span class="string">`t2`</span>.<span class="string">`a2`</span> &gt; <span class="number">10</span>) <span class="keyword">and</span> (&lt;<span class="keyword">cache</span>&gt;(<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span>) &lt;&gt; <span class="string">`test`</span>.<span class="string">`t2`</span>.<span class="string">`a2`</span>)))))</span><br><span class="line"><span class="comment">-- ALL 优化为了 EXISTS</span></span><br></pre></td></tr></table></figure><p>例13（<code>&lt;</code>ALL 非相关子查询）:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">表结构同例1</span><br><span class="line">mysql&gt; EXPLAIN EXTENDED SELECT * FROM t1 WHERE t1.a1  &lt; ALL ( SELECT a2 FROM t2 WHERE t2.a2 &gt; 10 );</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">|  1 | PRIMARY     | t1    | ALL  | NULL          | NULL | NULL    | NULL | 9716 |   100.00 | Using where |</span><br><span class="line">|  2 | SUBQUERY    | t2    | ALL  | NULL          | NULL | NULL    | NULL | 9716 |   100.00 | Using where |</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- 优化器处理后的语句为：</span></span><br><span class="line">mysql &gt; <span class="keyword">show</span> <span class="keyword">warnings</span> \G</span><br><span class="line">*************************** <span class="number">1.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">  <span class="keyword">Level</span>: Note</span><br><span class="line">   Code: <span class="number">1003</span></span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> <span class="keyword">AS</span> <span class="string">`a1`</span>,<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`b1`</span> <span class="keyword">AS</span> <span class="string">`b1`</span> <span class="keyword">from</span> <span class="string">`test`</span>.<span class="string">`t1`</span> <span class="keyword">where</span> &lt;<span class="keyword">not</span>&gt;((<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> &gt;= (<span class="comment">/* select#2 */</span> <span class="keyword">select</span> <span class="keyword">min</span>(<span class="string">`test`</span>.<span class="string">`t2`</span>.<span class="string">`a2`</span>) <span class="keyword">from</span> <span class="string">`test`</span>.<span class="string">`t2`</span> <span class="keyword">where</span> (<span class="string">`test`</span>.<span class="string">`t2`</span>.<span class="string">`a2`</span> &gt; <span class="number">10</span>))))</span><br><span class="line"><span class="comment">-- &lt;ALL 被优化为了 &gt;MIN</span></span><br></pre></td></tr></table></figure></li><li><p>MySQL 支持对 SOME 类型的子查询的优化<br>例14（<code>&gt;</code>SOME）:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">表结构同例1</span><br><span class="line">mysql&gt; EXPLAIN EXTENDED SELECT * FROM t1 WHERE t1.a1  &gt; SOME ( SELECT a2 FROM t2 WHERE t2.a2 &gt; 10 );</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">|  1 | PRIMARY     | t1    | ALL  | NULL          | NULL | NULL    | NULL | 9716 |   100.00 | Using where |</span><br><span class="line">|  2 | SUBQUERY    | t2    | ALL  | NULL          | NULL | NULL    | NULL | 9716 |   100.00 | Using where |</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- 优化器处理后的语句为：</span></span><br><span class="line">mysql&gt; <span class="keyword">show</span> <span class="keyword">warnings</span> \G</span><br><span class="line">*************************** <span class="number">1.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">  <span class="keyword">Level</span>: Note</span><br><span class="line">   Code: <span class="number">1003</span></span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> <span class="keyword">AS</span> <span class="string">`a1`</span>,<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`b1`</span> <span class="keyword">AS</span> <span class="string">`b1`</span> <span class="keyword">from</span> <span class="string">`test`</span>.<span class="string">`t1`</span> <span class="keyword">where</span> &lt;nop&gt;((<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> &gt; (<span class="comment">/* select#2 */</span> <span class="keyword">select</span> <span class="keyword">min</span>(<span class="string">`test`</span>.<span class="string">`t2`</span>.<span class="string">`a2`</span>) <span class="keyword">from</span> <span class="string">`test`</span>.<span class="string">`t2`</span> <span class="keyword">where</span> (<span class="string">`test`</span>.<span class="string">`t2`</span>.<span class="string">`a2`</span> &gt; <span class="number">10</span>))))</span><br><span class="line"><span class="comment">-- &gt;SOME 子查询被转换为 &gt;MIN</span></span><br></pre></td></tr></table></figure><p>例15（=SOME）:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">表结构同例1</span><br><span class="line">mysql&gt; EXPLAIN EXTENDED SELECT * FROM t1 WHERE t1.a1  = SOME ( SELECT a2 FROM t2 WHERE t2.a2 &gt; 10 );</span><br><span class="line">+<span class="comment">----+--------------+-------------+--------+---------------+------------+---------+------------+------+----------+-------------+</span></span><br><span class="line">| id | select_type  | table       | type   | possible_keys | key        | key_len | ref        | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+--------------+-------------+--------+---------------+------------+---------+------------+------+----------+-------------+</span></span><br><span class="line">|  1 | SIMPLE       | t1          | ALL    | NULL          | NULL       | NULL    | NULL       | 9716 |   100.00 | Using where |</span><br><span class="line">|  1 | SIMPLE       | &lt;subquery2&gt; | eq_ref | &lt;auto_key&gt;    | &lt;auto_key&gt; | 4       | test.t1.a1 |    1 |   100.00 | NULL        |</span><br><span class="line">|  2 | MATERIALIZED | t2          | ALL    | NULL          | NULL       | NULL    | NULL       | 9716 |   100.00 | Using where |</span><br><span class="line">+<span class="comment">----+--------------+-------------+--------+---------------+------------+---------+------------+------+----------+-------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- 优化器处理后的语句为：</span></span><br><span class="line">mysql&gt; <span class="keyword">show</span> <span class="keyword">warnings</span> \G</span><br><span class="line">*************************** <span class="number">1.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">  <span class="keyword">Level</span>: Note</span><br><span class="line">   Code: <span class="number">1003</span></span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> <span class="keyword">AS</span> <span class="string">`a1`</span>,<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`b1`</span> <span class="keyword">AS</span> <span class="string">`b1`</span> <span class="keyword">from</span> <span class="string">`test`</span>.<span class="string">`t1`</span> semi <span class="keyword">join</span> (<span class="string">`test`</span>.<span class="string">`t2`</span>) <span class="keyword">where</span> ((<span class="string">`&lt;subquery2&gt;`</span>.<span class="string">`a2`</span> = <span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span>) <span class="keyword">and</span> (<span class="string">`test`</span>.<span class="string">`t2`</span>.<span class="string">`a2`</span> &gt; <span class="number">10</span>))</span><br><span class="line"><span class="comment">-- 进行了物化和半连接，消除了子查询</span></span><br></pre></td></tr></table></figure><p>例16（<code>&lt;</code>SOME）:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">表结构同例1</span><br><span class="line">mysql&gt; EXPLAIN EXTENDED SELECT * FROM t1 WHERE t1.a1  &lt; SOME ( SELECT a2 FROM t2 WHERE t2.a2 &gt; 10 );</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">|  1 | PRIMARY     | t1    | ALL  | NULL          | NULL | NULL    | NULL | 9716 |   100.00 | Using where |</span><br><span class="line">|  2 | SUBQUERY    | t2    | ALL  | NULL          | NULL | NULL    | NULL | 9716 |   100.00 | Using where |</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- 优化器处理后的语句为：</span></span><br><span class="line">mysql&gt; <span class="keyword">show</span> <span class="keyword">warnings</span> \G</span><br><span class="line">*************************** <span class="number">1.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">  <span class="keyword">Level</span>: Note</span><br><span class="line">   Code: <span class="number">1003</span></span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> <span class="keyword">AS</span> <span class="string">`a1`</span>,<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`b1`</span> <span class="keyword">AS</span> <span class="string">`b1`</span> <span class="keyword">from</span> <span class="string">`test`</span>.<span class="string">`t1`</span> <span class="keyword">where</span> &lt;nop&gt;((<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> &lt; (<span class="comment">/* select#2 */</span> <span class="keyword">select</span> <span class="keyword">max</span>(<span class="string">`test`</span>.<span class="string">`t2`</span>.<span class="string">`a2`</span>) <span class="keyword">from</span> <span class="string">`test`</span>.<span class="string">`t2`</span> <span class="keyword">where</span> (<span class="string">`test`</span>.<span class="string">`t2`</span>.<span class="string">`a2`</span> &gt; <span class="number">10</span>))))</span><br><span class="line"><span class="comment">-- &lt;SOME 被优化成了 &lt;MAX</span></span><br></pre></td></tr></table></figure></li><li><p>MySQL 支持对 ANY 类型的子查询的优化<br>例17（&gt;ANY）:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">表结构同例1</span><br><span class="line">mysql&gt; EXPLAIN EXTENDED SELECT * FROM t1 WHERE t1.a1  &gt; ANY ( SELECT a2 FROM t2 WHERE t2.a2 &gt; 10 );</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">|  1 | PRIMARY     | t1    | ALL  | NULL          | NULL | NULL    | NULL | 9716 |   100.00 | Using where |</span><br><span class="line">|  2 | SUBQUERY    | t2    | ALL  | NULL          | NULL | NULL    | NULL | 9716 |   100.00 | Using where |</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- 优化器处理后的语句为：</span></span><br><span class="line">mysql&gt; <span class="keyword">show</span> <span class="keyword">warnings</span> \G</span><br><span class="line">*************************** <span class="number">1.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">  <span class="keyword">Level</span>: Note</span><br><span class="line">   Code: <span class="number">1003</span></span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> <span class="keyword">AS</span> <span class="string">`a1`</span>,<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`b1`</span> <span class="keyword">AS</span> <span class="string">`b1`</span> <span class="keyword">from</span> <span class="string">`test`</span>.<span class="string">`t1`</span> <span class="keyword">where</span> &lt;nop&gt;((<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> &gt; (<span class="comment">/* select#2 */</span> <span class="keyword">select</span> <span class="keyword">min</span>(<span class="string">`test`</span>.<span class="string">`t2`</span>.<span class="string">`a2`</span>) <span class="keyword">from</span> <span class="string">`test`</span>.<span class="string">`t2`</span> <span class="keyword">where</span> (<span class="string">`test`</span>.<span class="string">`t2`</span>.<span class="string">`a2`</span> &gt; <span class="number">10</span>))))</span><br><span class="line"><span class="comment">-- &gt;ANY  被优化为 &gt;MIN</span></span><br></pre></td></tr></table></figure><p>例18（=ANY）:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">表结构同例1</span><br><span class="line">mysql&gt; EXPLAIN EXTENDED SELECT * FROM t1 WHERE t1.a1  = ANY ( SELECT a2 FROM t2 WHERE t2.a2 &gt; 10 );</span><br><span class="line">+<span class="comment">----+--------------+-------------+--------+---------------+------------+---------+------------+------+----------+-------------+</span></span><br><span class="line">| id | select_type  | table       | type   | possible_keys | key        | key_len | ref        | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+--------------+-------------+--------+---------------+------------+---------+------------+------+----------+-------------+</span></span><br><span class="line">|  1 | SIMPLE       | t1          | ALL    | NULL          | NULL       | NULL    | NULL       | 9716 |   100.00 | Using where |</span><br><span class="line">|  1 | SIMPLE       | &lt;subquery2&gt; | eq_ref | &lt;auto_key&gt;    | &lt;auto_key&gt; | 4       | test.t1.a1 |    1 |   100.00 | NULL        |</span><br><span class="line">|  2 | MATERIALIZED | t2          | ALL    | NULL          | NULL       | NULL    | NULL       | 9716 |   100.00 | Using where |</span><br><span class="line">+<span class="comment">----+--------------+-------------+--------+---------------+------------+---------+------------+------+----------+-------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- 优化器处理后的语句为：</span></span><br><span class="line">mysql&gt; <span class="keyword">show</span> <span class="keyword">warnings</span> \G</span><br><span class="line">*************************** <span class="number">1.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">  <span class="keyword">Level</span>: Note</span><br><span class="line">   Code: <span class="number">1003</span></span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> <span class="keyword">AS</span> <span class="string">`a1`</span>,<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`b1`</span> <span class="keyword">AS</span> <span class="string">`b1`</span> <span class="keyword">from</span> <span class="string">`test`</span>.<span class="string">`t1`</span> semi <span class="keyword">join</span> (<span class="string">`test`</span>.<span class="string">`t2`</span>) <span class="keyword">where</span> ((<span class="string">`&lt;subquery2&gt;`</span>.<span class="string">`a2`</span> = <span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span>) <span class="keyword">and</span> (<span class="string">`test`</span>.<span class="string">`t2`</span>.<span class="string">`a2`</span> &gt; <span class="number">10</span>))</span><br><span class="line"><span class="comment">-- =ANY 物化后通过半连接 消除了子查询</span></span><br></pre></td></tr></table></figure><p>例19（<code>&lt;</code>ANY）:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">表结构同例1</span><br><span class="line">mysql&gt; EXPLAIN EXTENDED SELECT * FROM t1 WHERE t1.a1  &lt; ANY ( SELECT a2 FROM t2 WHERE t2.a2 &gt; 10 );</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">|  1 | PRIMARY     | t1    | ALL  | NULL          | NULL | NULL    | NULL | 9716 |   100.00 | Using where |</span><br><span class="line">|  2 | SUBQUERY    | t2    | ALL  | NULL          | NULL | NULL    | NULL | 9716 |   100.00 | Using where |</span><br><span class="line">+<span class="comment">----+-------------+-------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- 优化器处理后的语句为：</span></span><br><span class="line">mysql&gt; <span class="keyword">show</span> <span class="keyword">warnings</span> \G</span><br><span class="line">*************************** <span class="number">1.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">  <span class="keyword">Level</span>: Note</span><br><span class="line">   Code: <span class="number">1003</span></span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> <span class="keyword">AS</span> <span class="string">`a1`</span>,<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`b1`</span> <span class="keyword">AS</span> <span class="string">`b1`</span> <span class="keyword">from</span> <span class="string">`test`</span>.<span class="string">`t1`</span> <span class="keyword">where</span> &lt;nop&gt;((<span class="string">`test`</span>.<span class="string">`t1`</span>.<span class="string">`a1`</span> &lt; (<span class="comment">/* select#2 */</span> <span class="keyword">select</span> <span class="keyword">max</span>(<span class="string">`test`</span>.<span class="string">`t2`</span>.<span class="string">`a2`</span>) <span class="keyword">from</span> <span class="string">`test`</span>.<span class="string">`t2`</span> <span class="keyword">where</span> (<span class="string">`test`</span>.<span class="string">`t2`</span>.<span class="string">`a2`</span> &gt; <span class="number">10</span>))))</span><br><span class="line"><span class="comment">-- &lt;ANY 被优化为 &lt;MAX</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="MySQL子查询总结"><a href="#MySQL子查询总结" class="headerlink" title="MySQL子查询总结"></a>MySQL子查询总结</h2><p>MySQL 支持对简单 SELECT 子查询的优化，<br>不支持对 EXISTS 和 NOT EXISTS 的只查询优化，<br>但是对 IN, ALL, SOME, ANY 谓词支持一定的优化。</p><hr><p>Good luck!<br>冬日暖阳</p>]]></content>
    
    <summary type="html">
    
      MySQL优化
    
    </summary>
    
      <category term="MySQL" scheme="http://mydba.xyz/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL优化 -- 3 子查询的优化（一）</title>
    <link href="http://mydba.xyz/mysql/optimization/op3.html"/>
    <id>http://mydba.xyz/mysql/optimization/op3.html</id>
    <published>2016-12-29T05:47:03.000Z</published>
    <updated>2016-12-29T05:47:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="子查询的优化（一）"><a href="#子查询的优化（一）" class="headerlink" title="子查询的优化（一）"></a>子查询的优化（一）</h1><p>Logical Query Optimization Subquery (1)</p><h2 id="What-is-the-SubQuery"><a href="#What-is-the-SubQuery" class="headerlink" title="What is the SubQuery"></a>What is the SubQuery</h2><p>当一个查询是另一个查询的子部分时，称之为<strong>子查询</strong> （查询语句中嵌套有查询语句）</p><ul><li><p>查询的子部分，包括那些情况</p><ol><li><p>目标列位置<br>子查询如果位于目标列，则只能是标量子查询，否则数据库可能返回类似”错误:  子查询必须只能返回一个字段”的提示。   </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 示例  </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t1 (k1 <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>, c1 <span class="built_in">INT</span>);  </span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t2 (k2 <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>, c2 <span class="built_in">INT</span>);  </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t2 <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">10</span>), (<span class="number">2</span>,<span class="number">2</span>), (<span class="number">3</span>,<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> t1.c1, (<span class="keyword">SELECT</span> t2.c2 <span class="keyword">FROM</span> t2) <span class="keyword">FROM</span> t1, t2;  </span><br><span class="line">Empty <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t1 <span class="keyword">values</span> (<span class="number">1</span>,<span class="number">1</span>), (<span class="number">2</span>,<span class="number">2</span>), (<span class="number">3</span>,<span class="number">3</span>);  </span><br><span class="line">Query OK, 3 rows affected (0.01 sec)  </span><br><span class="line">Records: 3  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> t1.c1, (<span class="keyword">SELECT</span> t2.c2 <span class="keyword">FROM</span> t2) <span class="keyword">FROM</span> t1, t2;  </span><br><span class="line">ERROR 1242 (21000): Subquery returns more than 1 row</span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> T2;  </span><br><span class="line">Query OK, 3 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> t1.c1, (<span class="keyword">SELECT</span> t2.c2 <span class="keyword">FROM</span> t2) <span class="keyword">FROM</span> t1, t2;  </span><br><span class="line">Empty <span class="keyword">set</span> (<span class="number">0.00</span> sec)  </span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t2 <span class="keyword">values</span> (<span class="number">1</span>,<span class="number">10</span>), (<span class="number">2</span>,<span class="number">2</span>), (<span class="number">3</span>,<span class="number">30</span>);  </span><br><span class="line">Query OK, 3 rows affected (0.01 sec)  </span><br><span class="line">Records: 3  Duplicates: 0  Warnings: 0  </span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> t1.c1, (<span class="keyword">SELECT</span> t2.c2 <span class="keyword">FROM</span> t2 <span class="keyword">WHERE</span> K2=<span class="number">1</span>) <span class="keyword">FROM</span> t1, t2;  </span><br><span class="line">+<span class="comment">------+-----------------------------------+  </span></span><br><span class="line">| c1   | (<span class="keyword">SELECT</span> t2.c2 <span class="keyword">FROM</span> t2 <span class="keyword">WHERE</span> K2=<span class="number">1</span>) |  </span><br><span class="line">+<span class="comment">------+-----------------------------------+  </span></span><br><span class="line">|    <span class="number">1</span> |                                <span class="number">10</span> |  </span><br><span class="line">|    <span class="number">2</span> |                                <span class="number">10</span> |  </span><br><span class="line">|    <span class="number">3</span> |                                <span class="number">10</span> |</span><br><span class="line">|    <span class="number">1</span> |                                <span class="number">10</span> |  </span><br><span class="line">|    <span class="number">2</span> |                                <span class="number">10</span> |  </span><br><span class="line">|    <span class="number">3</span> |                                <span class="number">10</span> |  </span><br><span class="line">|    <span class="number">1</span> |                                <span class="number">10</span> |  </span><br><span class="line">|    <span class="number">2</span> |                                <span class="number">10</span> |  </span><br><span class="line">|    <span class="number">3</span> |                                <span class="number">10</span> |  </span><br><span class="line">+<span class="comment">------+-----------------------------------+  </span></span><br><span class="line"><span class="number">9</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> t1.c1, (<span class="keyword">SELECT</span> t2.c2 <span class="keyword">FROM</span> t2 <span class="keyword">WHERE</span> c2=<span class="number">1</span>) <span class="keyword">FROM</span> t1, t2;  </span><br><span class="line">+<span class="comment">------+-----------------------------------+</span></span><br><span class="line">| c1   | (<span class="keyword">SELECT</span> t2.c2 <span class="keyword">FROM</span> t2 <span class="keyword">WHERE</span> c2=<span class="number">1</span>) |</span><br><span class="line">+<span class="comment">------+-----------------------------------+</span></span><br><span class="line">|    <span class="number">1</span> |                              <span class="literal">NULL</span> |</span><br><span class="line">|    <span class="number">2</span> |                              <span class="literal">NULL</span> |</span><br><span class="line">|    <span class="number">3</span> |                              <span class="literal">NULL</span> |</span><br><span class="line">|    <span class="number">1</span> |                              <span class="literal">NULL</span> |</span><br><span class="line">|    <span class="number">2</span> |                              <span class="literal">NULL</span> |</span><br><span class="line">|    <span class="number">3</span> |                              <span class="literal">NULL</span> |</span><br><span class="line">|    <span class="number">1</span> |                              <span class="literal">NULL</span> |</span><br><span class="line">|    <span class="number">2</span> |                              <span class="literal">NULL</span> |</span><br><span class="line">|    <span class="number">3</span> |                              <span class="literal">NULL</span> |</span><br><span class="line">+<span class="comment">------+-----------------------------------+</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> t1.c1, (<span class="keyword">SELECT</span> t2.c2 <span class="keyword">FROM</span> t2 <span class="keyword">WHERE</span> c2&gt;<span class="number">1</span>) <span class="keyword">FROM</span> t1, t2;  </span><br><span class="line">ERROR 1242 (21000): Subquery returns more than 1 row</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> t1.c1, (<span class="keyword">SELECT</span> t2.c2 <span class="keyword">FROM</span> t2 <span class="keyword">WHERE</span> c2=<span class="number">10</span>) <span class="keyword">FROM</span> t1, t2;</span><br><span class="line">+<span class="comment">------+------------------------------------+</span></span><br><span class="line">| c1   | (<span class="keyword">SELECT</span> t2.c2 <span class="keyword">FROM</span> t2 <span class="keyword">WHERE</span> c2=<span class="number">10</span>) |</span><br><span class="line">+<span class="comment">------+------------------------------------+</span></span><br><span class="line">|    <span class="number">1</span> |                                 <span class="number">10</span> |</span><br><span class="line">|    <span class="number">2</span> |                                 <span class="number">10</span> |</span><br><span class="line">|    <span class="number">3</span> |                                 <span class="number">10</span> |</span><br><span class="line">|    <span class="number">1</span> |                                 <span class="number">10</span> |</span><br><span class="line">|    <span class="number">2</span> |                                 <span class="number">10</span> |</span><br><span class="line">|    <span class="number">3</span> |                                 <span class="number">10</span> |</span><br><span class="line">|    <span class="number">1</span> |                                 <span class="number">10</span> |</span><br><span class="line">|    <span class="number">2</span> |                                 <span class="number">10</span> |</span><br><span class="line">|    <span class="number">3</span> |                                 <span class="number">10</span> |</span><br><span class="line">+<span class="comment">------+------------------------------------+</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t2 <span class="keyword">VALUES</span> (<span class="number">4</span>,<span class="number">10</span>);</span><br><span class="line">Query OK, 1 row affected (0.04 sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> t1.c1, (<span class="keyword">SELECT</span> t2.c2 <span class="keyword">FROM</span> t2 <span class="keyword">WHERE</span> c2=<span class="number">10</span>) <span class="keyword">FROM</span> t1, t2;</span><br><span class="line">ERROR 1242 (21000): Subquery returns more than 1 row</span><br></pre></td></tr></table></figure></li><li><p>FROM子句位置<br>相关子查询出现在FROM子句中，数据库可能返回类似“在FROM子句中的子查询无法参考相同查询级别中的关系”的提示，所以相关子查询不能出现在FROM子句中；<br>非相关子查询出现在FROM子句中，可上拉子查询到父层，在多表连接时统一考虑连接代价然后择优。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1, (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t2 <span class="keyword">WHERE</span> t1.k1=t2.k2);</span><br><span class="line">ERROR 1248 (42000): Every derived table must have its own alias</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1, (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t2 <span class="keyword">WHERE</span> t1.k1=t2.k2) <span class="keyword">AS</span> A_t12;</span><br><span class="line">ERROR 1054 (42S22): Unknown column 't1.k1' in 'where clause'</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1, (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t2);</span><br><span class="line">ERROR 1248 (42000): Every derived table must have its own alias</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1, (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t2) <span class="keyword">as</span> A_t2;</span><br><span class="line">+<span class="comment">----+------+----+------+</span></span><br><span class="line">| k1 | c1   | k2 | c2   |</span><br><span class="line">+<span class="comment">----+------+----+------+</span></span><br><span class="line">|  1 |    1 |  1 |   10 |</span><br><span class="line">|  2 |    2 |  1 |   10 |</span><br><span class="line">|  3 |    3 |  1 |   10 |</span><br><span class="line">|  1 |    1 |  2 |    2 |</span><br><span class="line">|  2 |    2 |  2 |    2 |</span><br><span class="line">|  3 |    3 |  2 |    2 |</span><br><span class="line">|  1 |    1 |  3 |   30 |</span><br><span class="line">|  2 |    2 |  3 |   30 |</span><br><span class="line">|  3 |    3 |  3 |   30 |</span><br><span class="line">|  1 |    1 |  4 |   10 |</span><br><span class="line">|  2 |    2 |  4 |   10 |</span><br><span class="line">|  3 |    3 |  4 |   10 |</span><br><span class="line">+<span class="comment">----+------+----+------+</span></span><br><span class="line">12 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>WHERE子句位置<br>出现在WHERE子句中的子查询，是一个条件表达式的一部分，而表达式可以分解为操作符和操作数；根据参与运算的不同的数据类型，操作符也不尽相同，如INT型有“&gt;、&lt;、=、&lt;&gt;”等操作，这对子查询均有一定的要求（如INT型的等值操作，要求子查询必须是标量子查询）。另外，子查询出现在WHERE子句中的格式，也有用谓词指定的一些操作，如IN、BETWEEN、EXISTS等。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1 <span class="keyword">WHERE</span> k1 <span class="keyword">IN</span> (<span class="keyword">SELECT</span> k2 <span class="keyword">FROM</span> t2);</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">| k1 | c1   |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">|  1 |    1 |</span><br><span class="line">|  2 |    2 |</span><br><span class="line">|  3 |    3 |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1 <span class="keyword">WHERE</span> k1 &gt;=<span class="keyword">ANY</span> (<span class="keyword">SELECT</span> k2 <span class="keyword">FROM</span> t2);</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">| k1 | c1   |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">|  1 |    1 |</span><br><span class="line">|  2 |    2 |</span><br><span class="line">|  3 |    3 |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1 <span class="keyword">WHERE</span> k1 &lt;=<span class="keyword">SOME</span> (<span class="keyword">SELECT</span> k2 <span class="keyword">FROM</span> t2);</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">| k1 | c1   |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">|  1 |    1 |</span><br><span class="line">|  2 |    2 |</span><br><span class="line">|  3 |    3 |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1 <span class="keyword">WHERE</span> k1 &lt;=<span class="keyword">ANY</span> (<span class="keyword">SELECT</span> k2 <span class="keyword">FROM</span> t2);</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">| k1 | c1   |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">|  1 |    1 |</span><br><span class="line">|  2 |    2 |</span><br><span class="line">|  3 |    3 |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1 <span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> k2 <span class="keyword">FROM</span> t2 <span class="keyword">WHERE</span> k2=<span class="number">100</span>);</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">| k1 | c1   |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">|  1 |    1 |</span><br><span class="line">|  2 |    2 |</span><br><span class="line">|  3 |    3 |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>JOIN/ON子句位置<br>JOIN/ON子句可以拆分为两部分，一是JOIN块类似于FROM子句，二是ON子句块类似于WHERE子句，这两部分都可以出现子查询。子查询的处理方式同FROM子句和WHERE子句。</p></li><li><p>GROUPBY子句位置<br>目标列必须和GROUPBY关联。可将子查询写在GROUPBY位置处，但子查询用在GROUPBY处没有实用意义。</p></li><li><p>ORDERBY子句位置<br>可将子查询写在ORDERBY位置处。但ORDERBY操作是作用在整条SQL语句上的，子查询用在ORDERBY处没有实用意义。</p></li></ol></li></ul><h2 id="Type-of-SubQuery"><a href="#Type-of-SubQuery" class="headerlink" title="Type of SubQuery"></a>Type of SubQuery</h2><ul><li><p>从对象间的关系看</p><ol><li><p>相关子查询<br>子查询的执行依赖于外层父查询的一些属性值。子查询因依赖于父查询的参数，当父查询的参数改变时，子查询需要根据新参数值重新执行（查询优化器对相关子查询进行优化有一定意义），如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1 <span class="keyword">WHERE</span> col_1 = <span class="keyword">ANY</span></span><br><span class="line">    (<span class="keyword">SELECT</span> col_1 <span class="keyword">FROM</span> t2 <span class="keyword">WHERE</span> t2.col_2 = t1.col_2);</span><br><span class="line"><span class="comment">/* 子查询语句中存在父查询的t1表的col_2列 */</span></span><br></pre></td></tr></table></figure></li><li><p>非相关子查询<br>子查询的执行，不依赖于外层父查询的任何属性值。这样子查询具有独立性，可独自求解，形成一个子查询计划先于外层的查询求解，如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1 <span class="keyword">WHERE</span> col_1 = <span class="keyword">ANY</span></span><br><span class="line">    (<span class="keyword">SELECT</span> col_1 <span class="keyword">FROM</span> t2 <span class="keyword">WHERE</span> t2.col_2 = <span class="number">10</span>);</span><br><span class="line">//子查询语句中（t2）不存在父查询（t1）的属性</span><br></pre></td></tr></table></figure></li><li><p>相关子查询与非相关子查询的优化对比</p></li></ol><blockquote><p>扩展阅读:<br>相关子查询与不相关子查询的优化（一）<br><a href="http://blog.163.com/li_hx/blog/static/1839914132014248292396/" target="_blank" rel="noopener">http://blog.163.com/li_hx/blog/static/1839914132014248292396/</a></p></blockquote><blockquote><p>相关子查询与不相关子查询的优化（二）<br><a href="http://blog.163.com/li_hx/blog/static/1839914132014251031411/" target="_blank" rel="noopener">http://blog.163.com/li_hx/blog/static/1839914132014251031411/</a></p></blockquote><blockquote><p>相关子查询与不相关子查询的优化（三）<br><a href="http://blog.163.com/li_hx/blog/static/183991413201421075949661/" target="_blank" rel="noopener">http://blog.163.com/li_hx/blog/static/183991413201421075949661/</a></p></blockquote></li><li><p>从特定谓词看</p><ol><li><p>[NOT] IN/ALL/ANY/SOME子查询<br>语义相近，表示“[取反] 存在/所有/任何/任何”，左面是操作数，右面是子查询，是最常见的子查询类型之一。</p></li><li><p>[NOT] EXISTS子查询<br>半连接语义，表示“[取反] 存在”，没有左操作数，右面是子查询，也是最常见的子查询类型之一。</p></li><li><p>其他子查询<br>除了上述两种外的所有子查询。</p></li></ol></li><li><p>从语句的构成复杂程度看</p><ol><li><p>SPJ子查询 (select-project-join)<br>由选择(select)、投影(project)、连接(join)操作组成的查询。</p></li><li><p>GROUPBY子查询<br>SPJ子查询加上分组、聚集操作组成的查询。</p></li><li><p>其他子查询<br>GROUPBY子查询中加上其他子句如Top-N 、LIMIT/OFFSET、集合、排序等操作。  </p></li></ol><p>后两种子查询有时合称非SPJ子查询。</p></li><li><p>从结果的角度看</p><ol><li><p>标量子查询<br>子查询返回的结果集类型是一个简单值（return a scalar，a single value）。</p></li><li><p>单行单列子查询<br>子查询返回的结果集类型是零条或一条单元组（return a zero or single row，but only a column）。相似于标量子查询,但可能返回零条元组。</p></li><li><p>多行单列子查询<br>子查询返回的结果集类型是多条元组但只有一个简单列（return multiple rows，but only a column）。</p></li><li><p>表子查询<br>子查询返回的结果集类型是一个表（多行多列）（returna table，one or more rows of one or more columns）。</p></li></ol><p><a href="http://blog.163.com/li_hx/blog/static/1839914132014220111710312/" target="_blank" rel="noopener">子查询辨析</a></p></li></ul><h2 id="Why-does-DB-need-to-optimize-SubQuery"><a href="#Why-does-DB-need-to-optimize-SubQuery" class="headerlink" title="Why does DB  need to optimize SubQuery"></a>Why does DB  need to optimize SubQuery</h2><p>为什么要作子查询优化呢</p><p>在数据库实现早期，查询优化器对子查询一般采用嵌套执行的方式，即对父查询中的每一行，都执行一次子查询，这样子查询会执行很多次。这种执行方式效率很低。</p><p>而对子查询进行优化，可能带来几个数量级的查询效率的提高。<br>子查询转变成为连接操作之后，会得到如下好处：</p><ol><li>子查询不用执行很多次。</li><li>优化器可以根据统计信息来选择不同的连接方法和不同的连接顺序。</li></ol><p>子查询中的连接条件、过滤条件分别变成了父查询的连接条件、过滤条件，优化器可以对这些条件进行下推，以提高执行效率。</p><h2 id="How-to-optimize-SubQuery"><a href="#How-to-optimize-SubQuery" class="headerlink" title="How to optimize SubQuery"></a>How to optimize SubQuery</h2><ol><li><p>子查询合并（Subquery Coalescing）<br>在某些条件下（语义等价：两个查询块产生同样的结果集），多个子查询能够合并成一个子查询（合并后还是子查询，以后可以通过其他技术消除掉子查询）。这样可以把多次表扫描、多次连接减少为单次表扫描和单次连接，如：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1 <span class="keyword">WHERE</span> a1&lt;<span class="number">10</span> <span class="keyword">AND</span> (</span><br><span class="line">    <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> a2 <span class="keyword">FROM</span> t2 <span class="keyword">WHERE</span> t2.a2&lt;<span class="number">5</span> <span class="keyword">AND</span> t2.b2=<span class="number">1</span>) <span class="keyword">OR</span></span><br><span class="line">    <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> a2 <span class="keyword">FROM</span> t2 <span class="keyword">WHERE</span> t2.a2&lt;<span class="number">5</span> <span class="keyword">AND</span> t2.b2=<span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">可优化为：</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1 <span class="keyword">WHERE</span> a1&lt;<span class="number">10</span> <span class="keyword">AND</span> (</span><br><span class="line">    <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> a2 <span class="keyword">FROM</span> t2 <span class="keyword">WHERE</span> t2.a2&lt;<span class="number">5</span> <span class="keyword">AND</span> (t2.b2=<span class="number">1</span> <span class="keyword">OR</span> t2.b2=<span class="number">2</span>)</span><br><span class="line">    <span class="comment">/*两个ESISTS子句合并为一个，条件也进行了合并 */</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>子查询展开（Subquery Unnesting）<br>又称子查询反嵌套，又称为子查询上拉。<br>把一些子查询置于外层的父查询中，作为连接关系与外层父查询并列，其实质是把某些子查询重写为等价的多表连接操作（展开后，子查询不存在了，外部查询变成了多表连接）。</p><p>带来的好处是，有关的访问路径、连接方法和连接顺序可能被有效使用，使得查询语句的层次尽可能的减少。</p><p>常见的IN/ANY/SOME/ALL/EXISTS依据情况转换为半连接（SEMI JOIN）、普通类型的子查询消除等情况属于此类，如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1, (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t2 <span class="keyword">WHERE</span> t2.a2 &gt;<span class="number">10</span>) v_t2</span><br><span class="line"><span class="keyword">WHERE</span> t1.a1&lt;<span class="number">10</span> <span class="keyword">AND</span> v_t2.a2&lt;<span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">可优化为：</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1, t2 <span class="keyword">WHERE</span> t1.a1&lt;<span class="number">10</span> <span class="keyword">AND</span> t2.a2&lt;<span class="number">20</span> <span class="keyword">AND</span> t2.a2 &gt;<span class="number">10</span>;</span><br><span class="line"><span class="comment">/* 子查询变为了t1、t2表的连接操作，相当于把t2表从子查询中上拉了一层 */</span></span><br></pre></td></tr></table></figure></li><li><p>聚集子查询消除（Aggregate Subquery Elimination）<br>通常，一些系统支持的是标量聚集子查询消除。如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1 <span class="keyword">WHERE</span> t1.a1&gt;(<span class="keyword">SELECT</span> <span class="keyword">avg</span>(t2.a2) <span class="keyword">FROM</span> t2);</span><br></pre></td></tr></table></figure></li></ol><ul><li>子查询展开优化的技术手段<ul><li>展开的条件  <ol><li>如果子查询中出现了聚集、GROUPBY、DISTINCT子句，则子查询只能单独求解，不可以上拉到外层。</li><li>如果子查询只是一个简单格式的（SPJ格式）查询语句，则可以上拉子查询到外层，这样往往能提高查询效率。子查询上拉，讨论的就是这种格式，这也是子查询展开技术处理的范围。  </li></ol></li><li>遵循规则<br>把子查询上拉到上层查询，前提是上拉（展开）后的结果不能带来多余的元组，所以子查询展开需要遵循如下规则<ol><li>如果上层查询的结果没有重复（即SELECT子句中包含主码），则可以展开其子查询。并且展开后的查询的SELECT子句前应加上DISTINCT标志。</li><li>如果上层查询的SELECT语句中有DISTINCT标志，可以直接进行子查询展开。如果内层查询结果没有重复元组，则可以展开。</li></ol></li><li>子查询展开的具体步骤<ol><li>将子查询和外层查询的FROM子句连接为同一个FROM子句，并且修改相应的运行参数。</li><li>将子查询的谓词符号进行相应修改(如：“IN”修改为“=”)。</li><li>将子查询的WHERE条件作为一个整体与外层查询的WHERE条件合并，并用AND条件连接词连接，从而保证新生成的谓词与原旧谓词的上下文意思相同，且成为一个整体。</li></ol></li></ul></li></ul><hr><p>Good luck!<br>冬日暖阳</p>]]></content>
    
    <summary type="html">
    
      MySQL优化
    
    </summary>
    
      <category term="MySQL" scheme="http://mydba.xyz/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL优化 -- 2 数据库查询优化技术总揽</title>
    <link href="http://mydba.xyz/mysql/optimization/op2.html"/>
    <id>http://mydba.xyz/mysql/optimization/op2.html</id>
    <published>2016-12-27T08:13:53.000Z</published>
    <updated>2016-12-27T08:13:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库查询优化技术总揽"><a href="#数据库查询优化技术总揽" class="headerlink" title="数据库查询优化技术总揽"></a>数据库查询优化技术总揽</h1><p>Database Query Optimization Technology Overview</p><h2 id="What-is-the-Query-Optimization-Technology"><a href="#What-is-the-Query-Optimization-Technology" class="headerlink" title="What is the Query Optimization Technology"></a>What is the Query Optimization Technology</h2><h3 id="Query-Reuse"><a href="#Query-Reuse" class="headerlink" title="Query Reuse"></a>Query Reuse</h3><p><strong>查询重用</strong> 是指尽可能利用先前的执行结果，以达到节约查询计算全过程的时间并减少资源消耗的目的。</p><p>目前查询重用技术主要集中在两个方面：</p><ol><li><strong>查询结果</strong> 的重用。在缓存区中分配一块缓冲块，存放该SQL 语句文本和最后的结果集，当同样的SQL输入时，直接把结果返回。查询结果的重用技术节约了查询计划生成时间，减少了查询执行全过程的资源消耗。</li><li><strong>查询计划</strong> 的重用。缓存一条查询语句的执行计划及其相应语法树结构。查询计划的重用技术减少了查询计划生成的时间和资源消耗。</li></ol><p>查询重用技术利弊：</p><ol><li>弊端，结果集很大会消耗很大的内存资源，同样的SQL不同用户应该获取的结果集可能不同</li><li>利端，节约了CPU和IO消耗。在实际使用的过程中，趋利避害，根据实际情况选用</li></ol><h3 id="Query-Rewrite-Rule"><a href="#Query-Rewrite-Rule" class="headerlink" title="Query Rewrite Rule"></a>Query Rewrite Rule</h3><p><strong>查询重写</strong>：<br>是查询语句的一种<strong>等价转换</strong>，即对于任何相关模式的任意状态都会产生相同的结果（相同的关系替代两个表达式中相应的关系，所得到的结果是相同的）。</p><p>查询重写的两个目标：</p><ol><li>将查询转换为等价的效率更高的形式，例如将效率低的谓词转换为效率高的谓词、消除重复条件等。</li><li>尽量将查询重写为等价、简单且不受表顺序限制的形式，为物理查询优化阶段提供更多的选择，如视图的重写、子查询的合并转换等。</li></ol><p>查询重写的依据是关系代数：  </p><ol><li>关系代数的等价变换规则对查询重写提供了理论上的支持。</li><li>查询重写后，查询优化器可能生成多个连接路径，可以从候选者中择优。</li></ol><p>查询优化技术类型：  </p><p>1 语法级。查询语言层的优化，基于语法进行优化。<br>2 代数级。查询使用形式逻辑进行优化，运用关系代数的原理进行优化。<br>3 语义级。根据完整性约束，对查询语句进行语义理解，推知一些可优化的操作。<br>4 物理级。物理优化技术，基于代价估算模型，比较得出各种执行方式中代价最小的。  </p><blockquote><p>查询重写是基于语法级、代数级、语义级的优化，可以统一归属到逻辑优化的范畴;<br>基于代价估算模型是物理层面的优化，是从连接路径中选择代价最小的路径的过程。</p></blockquote><p>查询优化重写思路：</p><ol><li>将过程性查询转换为描述性的查询，如视图重写。</li><li>将复杂的查询（如嵌套子查询、外连接消除、嵌套连接消除）尽可能转换为多表连接查询。</li><li>将效率低的谓词转换为等价的效率高的谓词（如等价谓词重写）。</li></ol><p>利用等式和不等式的性质，简化WHERE、HAVING和ON条件。<br>如何改进现有查询重写规则的效率，如何发现更多更有效的重写规则，是查询优化的研究内容之一。<br>常见的查询重写技术类型，每一类都有自己的规则，这些规则没有确定的、统一的规律，但重写的核心一定是<strong>“等价转换”，只有等价才能转换，这是需要特别强调的</strong>。</p><h3 id="Query-Optimization-Algorithm"><a href="#Query-Optimization-Algorithm" class="headerlink" title="Query Optimization Algorithm"></a>Query Optimization Algorithm</h3><ul><li>什么是查询优化算法</li></ul><p>查询优化，求解给定查询语句的高效执行计划的过程。<br>这样的过程，包括了多种子问题求解。不同的子问题，对应了不同的解决方法，即算法。</p><ul><li>什么是查询计划</li></ul><p>查询计划，也称为查询树，它由一系列内部的操作符组成，这些操作符按一定的运算关系构成查询的一个执行方案。</p><p>举例来说，就是表A和表B先连接得到中间结果，然后再和另外的表C连接得到新的中间方式，直至所有表都被连接完毕（连接操作就是操作符，这个示例有两个连接操作符。A连接B连接C、C连接B连接A就是两种不同的执行方案，即是两个不同的执行计划，查询优化要选出最高效的一个执行方案）。</p><p>查询计划的长像：<br><img src="/img/markdown-img-paste-20161227170038583.png" alt=""></p><p>查询计划，从形式上看，是一颗二叉树，树叶是每个单表对象；<br>两个树叶的父结点是一个连接操作符（如左外连接操作符，A left-out join B）连接后的中间结果（另外还有一些其他结点如排序操作等也可以作为中间结果）这个结果是一个临时“关系”，这样直至根结点。</p><ul><li><p>查询计划，二叉树上的不同结点：</p><ul><li><p>单表结点<br>考虑单表的数据获取方式，是直接通过IO获得数据，还是通过索引获取数据，或者是通过索引定位数据的位置后再经过IO到数据块中获取数据。<br>这是一个从物理存储到内存解析成逻辑字段的过程，即符合冯·诺依曼体系结构的要求（外存数据读入内存才能被处理）。</p></li><li><p>两表结点<br>考虑两表以何种方式连接、代价有多大、连接路径有哪些等。表示的是内存中的元组，怎么进行元组间的连接。此时，元组通常已经存在于内存，直接使用即可。这是一个完成用户语义的逻辑操作，但是只是局部操作，只涉及两个具体的关系。完成用户全部语义（用户连接的语义），需要配合多表的连接顺序的操作。<br>不同的连接算法导致的连接效率不同，如数据少时可使用Hash连接，数据量大可使用嵌套连接，数据如果有序可使用归并连接或先排序后使用归并连接等。</p></li><li><p>多表结点<br>考虑多表连接顺序如何构成代价最少的“执行计划”。决定是AB先连接还是BC先连接，这是一个比较花费大小的运算。如果太多的连接方式被判断，也会导致效率问题。<br>多个关系采用不同次序进行连接，花费的CPU资源、内存资源差异可能较大。<br>许多数据库采用左深树、右深树、紧密树三种方式或其中一部分对多表进行连接得到多种连接路径。</p></li></ul></li><li><p>生成最优查询计划的策略</p><ol><li><p>基于规则优化<br>根据经验或一些已经探知或被证明有效的方式，定义为“规则”（如根据关系代数得知的规则、根据经验得知的规则等），用这些规则化简查询计划生成过程中符合可被化简的操作，使用启发式规则排除一些明显不好的存取路径，这就是基于规则的优化。</p></li><li><p>基于代价优化<br>根据一个代价评估模型，在生成查询计划的过程中，计算每条存取路径（存取路径主要包括上述三个“关系结点”）的花费，然后选择代价最小的作为子路径，这样直至所有表连接完毕得到一个完整的路径。<br>主流数据库都采用了基于代价策略进行优化的技术。<br><strong>主流数据库对于基于规则和基于代价的技术，都在使用！</strong></p></li></ol><blockquote><p>基于规则优化具有操作简单且能快速确定连接方式的优点，但这种方法只是排除了一部分不好的可能，所以得到的结果未必是最好的；</p></blockquote><blockquote><p>基于代价优化，是对各种可能的情况进行量化比较，从而可以得到花费最小的情况，但如果组合情况比较多则花费的判断时间就会很多；</p></blockquote><blockquote><p>查询优化器的实现，多是两种优化策略组合使用，如MySQL和PostgreSQL就采取了基于规则和代价估算的查询优化策略。</p></blockquote></li></ul><h3 id="Parallel-Query-Optimization"><a href="#Parallel-Query-Optimization" class="headerlink" title="Parallel Query Optimization"></a>Parallel Query Optimization</h3><ul><li><p>查询优化为什么要并行<br>传统单机数据库系统中，给定一个查询（Query），查询优化算法只需找到查询的一个具有最小执行花费的执行计划，这样的计划必定具有最快的响应时间。<br>在并行数据库系统中，查询优化的目标是寻找具有最小响应时间的查询执行计划，这需要把查询工作分解为一些可以并行运行的子工作。一些商业数据库提供了并行查询的功能，用以优化查询执行操作。</p></li><li><p>查询优化并行的条件：<br>一个查询能否并行执行，取决于多种因素：</p><ol><li>系统中的可用资源（如内存、高速缓存中的数据量等）。</li><li>CPU的数目。</li><li>运算中的特定代数运算符。<blockquote><p>如A、B、C、D四个表进行连接，每个表的单表扫描可以并行进行；在生成四个表连接的查询计划过程中，可选择A和B连接的同时C和D进行连接，这样连接操作能并行运行。不同商业数据库，对查询并行的实现也不尽相同。</p></blockquote></li></ol><p>在同一个SQL内，查询并行可以分为：</p><ol><li>操作内并行。将同一操作如单表扫描操作、两表连接操作、排序操作等分解成多个独立的子操作，由不同的CPU同时执行。</li><li>操作间并行。一条SQL查询语句可以分解成多个子操作，由多个CPU执行。</li></ol></li></ul><h3 id="Distributed-Query-Optimization"><a href="#Distributed-Query-Optimization" class="headerlink" title="Distributed Query Optimization"></a>Distributed Query Optimization</h3><p>在分布式数据库系统中, 查询策略优化是查询优化的重点。</p><p>主要是数据传输策略，A、B两结点的数据进行连接，是A结点数据传输到B结点或是从B到A或是先各自进行过滤然后再传输等）和局部处理优化（传统的单结点数据库的查询优化技术）</p><p>在查询优化策略中，数据的通信开销是优化算法考虑的主要因素。分布式查询优化以减少传输的次数和数据量作为查询优化的目标。</p><p>分布式数据库系统中的代价估算模型，除了考虑CPU代价和I/O代价外，还要考虑通过网络在结点间传输数据的代价。这是分布式并行查询优化技术与传统单结点数据库系统最大不同之处。</p><p>在分布式数据库系统中，代价估算模型为：</p><p><strong>总代价 = I/O代价 + CPU代价 + 通信代价</strong></p><h2 id="What-is-the-Logical-Query-Optimization"><a href="#What-is-the-Logical-Query-Optimization" class="headerlink" title="What  is the Logical Query Optimization"></a>What  is the Logical Query Optimization</h2><p>关系理论 + 查询重写 + 启发式规则 = 逻辑查询优化</p><ul><li><p>查询的基本操作</p><ol><li><p>选择操作。<br>对应的是限制条件（格式类似“field <op> consant”，field表示列对象，op是操作符如“=”、“&gt;”等）。<br>优化方式是选择操作下推，目的是尽量减少连接操作前的元组数，使得中间临时关系尽量少（元组数少，连接得到的元组数就少），这样可能减少IO和CPU的消耗、节约内存空间。</op></p></li><li><p>投影操作。<br>对应的SELECT查询的目的列对象。<br>优化方式是投影操作下推。<br>目的是尽量减少连接操作前的列数，使得中间临时关系尽量小（特别注意差别：选择操作是使元组的个数“尽量少”，投影操作是使一条元组“尽量小”），这样虽然不能减少IO（多数数据库存储方式是行存储，元组是读取的最基本单位，所以要想操作列则必须读取一行数据），但可以各减少连接后的中间关系的元组大小，节约内存空间。</p></li><li><p>连接操作。<br>对应的是连接条件（格式类似“field_1 <op> field_2”，field_1和field_2表示不同表上的列对象，op是操作符如“=”、“&gt;”等），表示两个表连接的条件。  </op></p><p>连接操作涉及两个子问题：</p><ol><li><p>多表连接中每个表被连接的顺序决定着效率。<br>如果一个查询语句只有一个表，则这样的语句很简单；但如果有多个表，则会涉及表之间以什么样的顺序连接最高效（如A、B、C三表连接，如果ABC、ACB、BCA等连接后的结果集一样，则哪种连接次序的效率最高，是需要考虑的问题）。</p></li><li><p>多表连接每个表被连接的顺序被用户语义决定。<br>查询语句多表连接有着不同的语义（如是笛卡儿集、内连接、还是外连接中的左外连接等），这决定着表之间的前后连接次序是不能随意更换的，否则，结果集中数据是不同的。因此，表的前后连接次序是不能随意交换的。</p></li></ol></li></ol></li></ul><ul><li><p>查询的2种类型<br>根据SQL语句的形式特点，还可以做如下区分：</p><ol><li><p>针对SPJ的查询优化。<br>基于选择、投影、连接三种基本操作相结合的查询。</p></li><li><p>针对非SPJ的查询优化。<br>在SPJ的基础上存在GROUPBY操作的查询，这是一种较为复杂的查询。</p></li></ol><blockquote><p>所以，针对SPJ和非SPJ的查询优化，其实是对以上多种操作的优化。<br>“选择”和“投影”操作，可以在关系代数规则的指导下进行优化。<br>表连接，需要多表连接的相关算法完成优化。其他操作的优化多是基于索引和代价估算完成的。</p></blockquote></li></ul><ul><li>逻辑查询优化包括的技术<ol><li>子查询优化</li><li>视图重写</li><li>等价谓词重写</li><li>条件化简</li><li>外连接消除</li><li>嵌套连接消除</li><li>连接消除</li><li>语义优化</li><li>非SPJ的优化</li></ol></li></ul><h2 id="What-is-the-Physical-Query-Optimization"><a href="#What-is-the-Physical-Query-Optimization" class="headerlink" title="What is the Physical Query Optimization"></a>What is the Physical Query Optimization</h2><p>代价模型 + 索引/索引的利用 + 单表扫描算法 + 两表连接算法 + 多表连接算法 = 物理查询优化</p><h2 id="Query-Execution-Plan-of-MySQL"><a href="#Query-Execution-Plan-of-MySQL" class="headerlink" title="Query Execution Plan of MySQL"></a>Query Execution Plan of MySQL</h2><p><a href="http://dev.mysql.com/doc/refman/5.6/en/explain-output.html" target="_blank" rel="noopener">官方文档explain-output.html</a></p><ul><li><p>语法格式</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;EXPLAIN | DESCRIBE | DESC &#125; [explain_type] explainable_stmt</span><br></pre></td></tr></table></figure><p>可选项包括：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EXTENDED | PARTITIONS | FORMAT = format_name</span><br><span class="line">format_name:</span><br><span class="line">    TRADITIONAL | JSON</span><br></pre></td></tr></table></figure></li><li><p>说明  </p><ol><li>EXPLAIN命令，显示SQL语句的查询执行计划。</li><li>EXPLAIN EXTENDED命令，显示SQL语句的详细的查询执行计划；之后可以通过“SHOW WARNINGS”命令查看详细的信息。</li><li>EXPLAIN PARTITIONS命令，显示SQL语句的带有分区表信息的查询执行计划。</li><li>EXPLAIN命令的输出格式有两种。<ol><li>TRADITIONAL；传统类型；按行隔离，每行标识一个子操作。</li><li>JSON；JSON格式。</li></ol></li><li>explainable_stmt，可被EXPLAIN执行的SQL语句，包括的类型有：<br>SELECT、INSERT、UPDATE、DELETE、REPLACE 。</li></ol></li></ul><ul><li>执行顺序  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> (t1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t2 <span class="keyword">ON</span> <span class="literal">true</span>), (t3 <span class="keyword">FULL</span> <span class="keyword">JOIN</span> t4 <span class="keyword">ON</span> <span class="literal">true</span>), t5</span><br><span class="line"> <span class="keyword">WHERE</span> id1=id2 <span class="keyword">AND</span></span><br><span class="line">       id2=id3 <span class="keyword">AND</span></span><br><span class="line">       id3=id4 <span class="keyword">AND</span></span><br><span class="line">       id4=id5;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/img/markdown-img-paste-20161228160214105.png" alt=""><br>1) 从第1行到第9行，表示了完整的查询执行计划。<br>2) 第1行到第3行，表明查询计划的结构；id表示对象被操作的顺序；id值大，先被执行；如果相同，执行顺序从上到下。<br>3) 从第4行起，每一行为一个节点，表示本节点被操作对象的可用信息，如索引等。<br>4) 表的连接次序为：t4 t5 t3 t1 t2。这和初始给定的连接次序不同，经过优化，外连接被消除；<br>5)  t4表的元组数最少，按照MySQL多表连接算法，表经过排序后，顺序为 t4 t5 t2 t3 t1。<br>6)  因为t5、t3、t1上有索引可以利用，所以t4上的一条元组确定后，则可以利用索引之间定位t5、t3、t1表上的元组，所以第5、6、7行的key列有索引可用；ref列表明这三个表都是引用了t4表的id4列。<br>7)  t2表的数据相对较多，且又没有索引，最后被连接，连接使用了Extra列表明的块嵌套循环连接算法，并且使用了连接缓存。  </p><p>  嵌套循环算法<br>  MySQL   块嵌套循环算法<br>  <img src="/img/markdown-img-paste-20161228162809846.png" alt=""></p><ul><li><p>结点解析<br>1) id：每个被独立执行的操作的标识，表示对象被操作的顺序；id值大，先被执行；如果相同，执行顺序从上到下。<br>2) select_type：查询中每个select子句的类型；具体值参见表C-2。<br>3) table：名字，被操作的对象名称，通常是表名，但有其他格式。<br>4) partitions：匹配的分区信息（对于非分区表值为NULL）。<br>5) type：连接操作的类型；具体值参见表C-3。<br>6) possible_keys：备选的索引（列出可能被使用到的索引）。<br>7) key：经优化器选定的索引；常用“ANALYZE TABLE”命令可以使优化器正确地选择索引。<br>8) key_len：被优化器选定的索引键的长度，单位是字节。<br>9) ref：表示本行被操作的对象的参照对象（被参照的对象可能是一个常量用“const”表示，也可能是其他表的key指向的对象）。<br>10) rows：查询执行所扫描的元组个数（对于InnoDB，此值是个估计值）。<br>11) filtered：按照条件表上数据被过滤的元组个数的百分比，“rows×filtered/100”可以求出过滤后的元组数即实际的元组数。<br>12) extra: MySQL 查询优化器执行查询的过程中对查询计划的重要补充信息，具体如表C-4所示。</p><p><img src="/img/markdown-img-paste-20161228171242880.png" alt="C-2"></p><p><img src="/img/markdown-img-paste-20161228171327962.png" alt="C-3"></p><p><img src="/img/markdown-img-paste-20161228172258813.png" alt="C-4"></p></li></ul><hr><p>Good luck!<br>冬日暖阳</p>]]></content>
    
    <summary type="html">
    
      MySQL优化
    
    </summary>
    
      <category term="MySQL" scheme="http://mydba.xyz/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL优化 -- 1 数据库与关系代数</title>
    <link href="http://mydba.xyz/mysql/optimization/op1.html"/>
    <id>http://mydba.xyz/mysql/optimization/op1.html</id>
    <published>2016-12-27T03:39:48.000Z</published>
    <updated>2016-12-27T03:39:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库与关系代数"><a href="#数据库与关系代数" class="headerlink" title="数据库与关系代数"></a>数据库与关系代数</h1><p>The Query Optimization Technique Of MySQL(5.6.X)<br>1 Database and Relational Algebra</p><h2 id="What-is-the-RDBMS-？"><a href="#What-is-the-RDBMS-？" class="headerlink" title="What is the RDBMS ？"></a>What is the RDBMS ？</h2><h3 id="What-is-the-Database-Management-System-？"><a href="#What-is-the-Database-Management-System-？" class="headerlink" title="What is the Database Management System ？"></a>What is the Database Management System ？</h3><p>数据库管理系统(Database Management System)：  </p><ol><li>是一种操纵和管理数据的大型软件，用于建立、使用和维护数据，简称DBMS。</li><li>它对数据进行统一的管理和控制，以保证数据的安全性和完整性。</li><li>用户通过DBMS访问数据库中的数据，数据库管理员也通过DBMS进行数据库的维护工作。</li><li>它可使多个应用程序和用户用不同的方法在同时或不同时刻去建立，修改和询问数据。</li><li>DBMS提供数据定义语言DDL（Data Definition Language）和数据操作语言DML（Data Manipulation Language），供用户定义数据库的模式结构与权限约束，实现对数据的追加、删除等操作。</li></ol><p>只要做数据处理，软件规模达到一定程度，似乎都称为了数据库。</p><p>如：HBase/MongoDB等等</p><p>衡量是否是数据库的标准：<br>ACID，是指在数据库管理系统（DBMS）中事务所具有的四个特性：<br>1）原子性（Atomicity）<br>2）一致性（Consistency）<br>3）隔离性（Isolation）<br>4）持久性（Durability）  </p><p>+技术的复杂性</p><h3 id="What-is-the-Relation-Database-Management-System-？"><a href="#What-is-the-Relation-Database-Management-System-？" class="headerlink" title="What  is the Relation Database Management System ？"></a>What  is the Relation Database Management System ？</h3><p>历史上的几种类型的数据库：</p><p>1 层次型<br>2 网状型<br>3 关系型  </p><p><strong>关系数据库</strong>，是建立在关系数据库模型基础上的数据库，借助于关系代数等概念和方法来处理数据库中的数据，同时也是一个被组织成一组拥有正式描述性的表格，该形式的表格作用的实质是装载着数据项的特殊收集体，这些表格中的数据能以许多不同的方式被存取或重新召集而不需要重新组织数据库表格。</p><p>MySQL，PostgreSQL，oracle，SQL server，DB2 都是关系型数据库。</p><h3 id="Why-do-we-need-to-learn-MySQL-PostgreSQL-？"><a href="#Why-do-we-need-to-learn-MySQL-PostgreSQL-？" class="headerlink" title="Why do we need to learn MySQL/PostgreSQL ？"></a>Why do we need to learn MySQL/PostgreSQL ？</h3><p>趋势1：云计算，淘汰大部分的运维人员</p><p>趋势2：云数据库，淘汰大部分以商业数据库为职业的DBA</p><p>趋势3：电商等兴起，对开源数据库技术的人员需求增多</p><p>趋势4：去IOE化等运动背后的商业成本和安全问题，促进开源产业发展</p><p>趋势5：MySQL和PostgreSQL为代表的开源数据库自身正蓬勃发展中</p><h3 id="Why-do-we-need-to-master-Query-Optimization-Technology-？"><a href="#Why-do-we-need-to-master-Query-Optimization-Technology-？" class="headerlink" title="Why do we need to master Query Optimization Technology ？"></a>Why do we need to master Query Optimization Technology ？</h3><blockquote><p>数据库查询优化技术一直是DBMS实现技术中的精华，也是难点和重点。<br>王珊<br>中国人民大学信息学院教授|博士生导师</p></blockquote><p>从数据处理的角度看：<br>数据库的OLAP型应用要多于OLTP型应用。<br>大数据技术目前处理了一部分非结构化的数据，但分布式数据库技术的发展，将使得数据库技术进一步发展甚至出现革命性的进步进而与现行的hadoop/spark等技术争夺数据分析的阵地。<br>而查询优化技术因此二者得益继续发展。</p><p>从当下技术发展的趋势看：<br>大数据背景下，盛行几十年的SQL查询技术焕发了新的生机，不仅在数据库中占有半壁江山，而且在大数据处理技术下，各种SQL查询接口/功能层异军突起。<br>而查询优化技术因具有普适性得以继续使用。</p><h2 id="What-is-the-relational-algebra-？"><a href="#What-is-the-relational-algebra-？" class="headerlink" title="What  is the relational algebra ？"></a>What  is the relational algebra ？</h2><p><strong>数学中</strong>，关系代数是支持叫做逆反(converse)的对合一元运算的剩余布尔代数。激发关系代数的例子是在集合 X 上的所有二元关系的代数 ，带有 R·S 被解释为平常的二元关系复合。</p><p>关系代数的早期形式形成于十九世纪德·摩根、皮尔士和 Ernst Schröder 的工作。</p><p>它今日的纯等式形式是阿尔弗雷德·塔斯基和他的学生在 1940 年代开发的。</p><p><strong>数据库中</strong>，关系代数是一阶逻辑的分支，是<strong>闭合于运算下</strong>的<strong>关系</strong>的集合。运算作用于一个或多个关系上来生成一个关系。关系代数是计算机科学的一部分。</p><p>在纯数学中的关系代数是有关于数理逻辑和集合论的代数结构。</p><p><strong>SQL</strong> 的查询语言松散的基于了关系代数，由于SQL中的操作数（表）不完全是关系，因此很多有用的关于关系代数的理论在SQL对应者中不成立。</p><p>1970年E.F. Codd发表了数据的关系模型论文。Codd提议这样一种代数作为数据库查询语言的基础，称为关系代数。</p><p>Codd的关系代数的六个原始运算是“选择”、“投影”、笛卡尔积（也叫做“叉积”或“交叉连接”）、并集、差集和“重命名”。（实际上，Codd忽略了重命名，而ISBL的发明者显著的包括了它）。这六个运算在省略其中任何一个都要损失表达能力的意义上是基本的。已经依据这六个原始运算定义了很多其他运算。其中最重要的是交集、除法和自然连接。</p><p>事实上ISBL显著的用自然连接替代了笛卡尔积，它是笛卡尔积的退化情况。</p><p>第一个基于Codd的代数的查询语言是ISBL，许多作者都认同这个先驱的工作展示了一个使Codd的想法成为有用语言的方式</p><p><strong>关系代数</strong> 是一种抽象的查询语言，用对关系的运算来表达查询，作为研究关系数据语言的数学工具。</p><p>关系代数的运算对象是关系，运算结果亦为关系。关系代数用到的运算符包括四类：<br>1）集合运算符<br>2）专门的关系运算符<br>3）算术比较符<br>4）逻辑运算符  </p><p>比较运算符和逻辑运算符是用来辅助专门的关系运算符进行操作的，所以按照运算符的不同，主要将关系代数分为传统的集合运算和专门的关系运算两类。</p><h2 id="What-is-the-technology-Of-Query-Optimization-？"><a href="#What-is-the-technology-Of-Query-Optimization-？" class="headerlink" title="What is the technology Of Query Optimization ？"></a>What is the technology Of Query Optimization ？</h2><p>数据库查询优化技术主要包括查询重用技术、查询重写规则、查询算法优化技术、并行查询优化技术、分布式查询优化技术及其他方面（如框架结构）的优化技术，这6项技术构成了一个“广义的数据库查询优化”的概念。</p><p>“查询重写规则”和“查询算法优化”是很多书籍在提及”数据库查询优化“时所限定的范围，这两项技术称为”狭义的数据库查询优化“。从优化的内容角度看，查询优化又分为<strong>代数优化</strong>和<strong>非代数优化</strong>，或称为<strong>逻辑优化</strong>和<strong>物理优化</strong>。<br>逻辑优化主要依据关系代数的等价变换做一些逻辑变换。<br>物理优化主要根据数据读取、表连接方式、表连接顺序、排序等技术对查询进行优化。<br>”查询重写规则“属于逻辑优化方式，运用了关系代数和启发式规则；<br>”查询算法优化“属于物理优化方式，运用了基于代价估算的多表连接算法求解最小花费的技术。  </p><ol><li><strong>Query reuse</strong>   <ol><li>The query result reuse  </li><li>The query plan reuse  </li></ol></li><li><strong>The Rule Of Query Rewrite</strong>  <ol><li>Based on Relational Algebra and Heuristic Rule</li><li>View Rewrite、Sub-query Optimization、Equivalent Predicate Rewrite、Condition Simplification、Outer Join Elimination、Join Elimination、Nest Join Elimination</li><li>Sematic Optimization</li></ol></li><li><strong>The Algorithm Of Query Optimization</strong><ol><li>Single Table Scan Algorithm</li><li>Two Table Join Algorithm</li><li>Multi-table Join Algorithm</li></ol></li><li><strong>Parallel Query Optimization</strong></li><li><strong>Distribute Query Optimization</strong></li></ol><h2 id="What-is-the-Query-Optimization-Of-MySQL-？"><a href="#What-is-the-Query-Optimization-Of-MySQL-？" class="headerlink" title="What is the Query Optimization Of MySQL ？"></a>What is the Query Optimization Of MySQL ？</h2><p><img src="/img/markdown-img-paste-20161227143544896.png" alt=""></p><h2 id="How-to-learn-and-master-it？"><a href="#How-to-learn-and-master-it？" class="headerlink" title="How to learn and master it？"></a>How to learn and master it？</h2><p>修习心法</p><ol><li><p>读书而明理</p></li><li><p>听讲而释疑</p></li><li><p>练习而掌握</p></li><li><p>实践中巧遇大造化</p></li><li><p>再：读书/听讲/交流/思考/实践……</p></li></ol><p><img src="/img/markdown-img-paste-2016122714422483.png" alt=""></p><h2 id="What-is-database-optimization？"><a href="#What-is-database-optimization？" class="headerlink" title="What is database optimization？"></a>What is database optimization？</h2><h3 id="数据库调优-Database-Tuning"><a href="#数据库调优-Database-Tuning" class="headerlink" title="数据库调优/Database Tuning"></a>数据库调优/Database Tuning</h3><p>数据库调优可以使数据库应用运行得更快，其目标是：</p><p>使数据库<br>  有更高的吞吐量<br>  更短的响应时间  </p><p>被调优的对象是整个数据库管理系统总体。</p><h3 id="数据库调优的方式"><a href="#数据库调优的方式" class="headerlink" title="数据库调优的方式"></a>数据库调优的方式</h3><p>1）人工调优。<br>  主要依赖于人，效率低下；要求操作者完全理解常识所依赖的原理，还需要对应用、数据库管理系统、操作系统以及硬件有广泛而深刻的理解。</p><p>2）基于案例的调优。<br>  总结典型应用案例情况中数据库参数的推荐配置值、数据逻辑层设计等情况，从而为用户的调优工作提供一定的参考和借鉴。但这种方式忽略了系统的动态性和不同系统间存在的差异。</p><p>3）自调优。<br>  为数据库系统建立一个模型，根据“影响数据库系统性能效率的因素”，数据库系统自动进行参数的配置。一些商业数据库，实现了部分自调优技术。</p><h3 id="数据库调优主要分为五个阶段"><a href="#数据库调优主要分为五个阶段" class="headerlink" title="数据库调优主要分为五个阶段"></a>数据库调优主要分为五个阶段</h3><p><img src="/img/markdown-img-paste-20161227144451523.png" alt=""></p><p>数据库调优五个阶段的主要技术   </p><ol><li><p>应用情况的估算。<br>应用的使用方式（把业务逻辑转换为数据库的读写分布逻辑，以是读多写少还是读写均衡等来区分OLTP和OLAP；应用对数据库的并发情况、并发是否可以池化等）、数据量、对数据库的压力、峰值压力等做一个预估。</p></li><li><p>系统选型策略。<br>确定什么样的数据库可以适用应用需求，并确定数据库是使用开源的还是商业的，是使用集群还是单机的系统，同时对操作系统、中间件、硬件、网络等进行选型。</p></li><li><p>数据模型的设计。<br>主要是根据业务逻辑，从几个角度考虑表的逻辑结构，内容如下：</p><ol><li><p>E-R模型设计：遵循E-R模型设计原理。偶尔的适当程度的非规范化可以改善系统查询性能。</p></li><li><p>数据逻辑分布策略：目的是减少数据请求的不必要的数据量，把用户需要的数据返回；可用的技术如分区、用E-R模型分表等（如互联网企业典型的用法，根据业务的不同，进行分库、分表等操作）。</p></li><li><p>数据物理存储策略：目的是减少IO，如启用压缩技术、把索引和表数据的存储分开，不同的表数据分布于不同的表空间，不同表空间分布在不同的物理存储上（尤其是读写量大的表空间分布在不同的物理存储上）、日志、索引和数据分布在不同的物理存储上等。</p></li><li><p>索引：在查询频繁的对象上建立合适的索引，使索引的正效应大于负效应（索引的维护存在消耗）。</p></li></ol></li><li><p>SQL设计。<br>编写正确的、查询效率高的SQL语句。这依据的主要是“查询重写规则”，编写语句的过程中要注意，要有意识地保障SQL能利用到索引。</p></li><li><p>数据库功能的启用。<br>数据库为提高性能提供了一些功能，可合理使用，具体如下：</p><ol><li>查询重用：根据实际情况进行配置，可缓存查询执行计划、查询结果等。</li><li>数据库参数的设置：可设置合适的参数如数据缓冲区等。<br>模型系统预运行。在备用系统上模拟实际运行环境，加大压力进行系统测试，提前发现问题。</li></ol></li><li><p>系统监控与分析。<br>在工业环境下，加强对系统的运行监控和日常的分析工作，具体如下：</p><ol><li>应用系统表现：收集用户对应用系统的使用意见、系统存在问题等，因为这些可能是用户在第一时间发现的。</li><li>OS环境监控：实时监控CPU、内存、IO等，并对比实时情况与历史正常情况。</li><li>数据库内部状况监控：一些数据库提供系统表、视图、工具等手段，向用户提供数据库运行过程中内部状况的信息，如锁的情况，这些都需要实时监控，并对比实时情况与历史正常情况。</li><li>日志分析：在数据库的日志、操作系统的日志中找出异常事件，定位问题。</li></ol></li></ol><hr><p>Good luck!<br>冬日暖阳</p>]]></content>
    
    <summary type="html">
    
      MySQL优化
    
    </summary>
    
      <category term="MySQL" scheme="http://mydba.xyz/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL5.7新特性</title>
    <link href="http://mydba.xyz/mysql/163/mysql33.html"/>
    <id>http://mydba.xyz/mysql/163/mysql33.html</id>
    <published>2016-11-11T08:13:23.000Z</published>
    <updated>2016-11-11T08:13:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL5-7新特性"><a href="#MySQL5-7新特性" class="headerlink" title="MySQL5.7新特性"></a>MySQL5.7新特性</h1><h2 id="MySQL版本时间轴"><a href="#MySQL版本时间轴" class="headerlink" title="MySQL版本时间轴"></a>MySQL版本时间轴</h2><p><img src="/img/markdown-img-paste-20161111161507737.png" alt=""></p><h2 id="MySQL5-7-简介"><a href="#MySQL5-7-简介" class="headerlink" title="MySQL5.7 简介"></a>MySQL5.7 简介</h2><ul><li>更强大的功能：原生JSON支持；新增安全性功能；新增地理位置支持GeoJSON，GeoHash特性</li><li>更强大的性能：某些场景性能较MySQL5.6提升2-3倍，Innodb只读事务优化；临时表改进；并行复制优化</li><li>更强大的运维：InnoDB Buffer Pool动态修改；sys schema引入；在线修改表结构等</li></ul><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><ul><li>原生支持JSON。包括字段的JSON类型和一系列JSON处理函数</li><li>BLOB存储</li><li>混合存储结构化与非结构化数据</li><li>事务特性<br><img src="/img/markdown-img-paste-20161111162051691.png" alt=""></li></ul><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><ul><li>初始化数据库： root密码由空变成了随机密码；不在自动创建test数据库</li><li><p>设置密码过期策略</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">'user'</span>@<span class="string">'localhost'</span> <span class="keyword">PASSWORD</span> <span class="keyword">EXPIRE</span> <span class="built_in">INTERVAL</span> <span class="number">30</span> <span class="keyword">DAY</span>;</span><br></pre></td></tr></table></figure></li><li><p>锁定用户、解锁用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">'user'</span>@<span class="string">'localhost'</span> <span class="keyword">ACCOUNT</span> <span class="keyword">LOCK</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">'user'</span>@<span class="string">'localhost'</span> <span class="keyword">ACCOUNT</span> <span class="keyword">UNLOCK</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="虚拟列"><a href="#虚拟列" class="headerlink" title="虚拟列"></a>虚拟列</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> order_lines(</span><br><span class="line">orderid <span class="built_in">bigint</span>,</span><br><span class="line">userid <span class="built_in">bigint</span>,</span><br><span class="line">price <span class="built_in">decimal</span>(<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">qty <span class="built_in">int</span>,</span><br><span class="line">sum_price <span class="built_in">decimal</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">generated</span></span><br><span class="line"><span class="keyword">always</span> <span class="keyword">as</span> (qty*price) <span class="keyword">stored</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><table><thead><tr><th>STORED</th><th>VIRTUAL</th></tr></thead><tbody><tr><td>Primary &amp; secondary index</td><td>secondary index only</td></tr><tr><td>B-TREE, Full text search,R-TREE</td><td>B-TREE only</td></tr><tr><td>Duplication of data in base table and index</td><td>less storage</td></tr><tr><td>Independent of SE</td><td>Requires SE support</td></tr><tr><td>Online operation</td><td>Online operation</td></tr></tbody></table><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><h3 id="只读事务"><a href="#只读事务" class="headerlink" title="只读事务"></a>只读事务</h3><ul><li>绝大多数业务都是读多写少，优化只读事务意义重大</li><li>只读事务<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span> <span class="keyword">read</span> <span class="keyword">only</span></span><br></pre></td></tr></table></figure></li></ul><p>autocommit 下的不加锁的select语句</p><ul><li>MySQL5.7 通过不再为只读事务分配事务ID，不分配回滚段，降低内存开销，减少锁竞争等多种方式，优化了只读事务的开销</li></ul><h3 id="临时表"><a href="#临时表" class="headerlink" title="临时表"></a>临时表</h3><ul><li>临时表：不需要严格一致性，重启MySQL或断开连接生命周期结束；只在当前会话中可见</li><li>优化策略：<ul><li>元数据修改不持久化</li><li>DML操作不写redo，关闭change buffer</li><li>通过减少不必要的IO操作，提高临时表各种操作的性能</li></ul></li></ul><h3 id="并行复制"><a href="#并行复制" class="headerlink" title="并行复制"></a>并行复制</h3><ul><li>基于MariaDB并行复制策略的改进，提升提交并行度</li><li>基于组提交的并行复制：从库按照主库的事务提交顺序提交，一个组提交的事务都是可以并行回放的</li><li>slave-parallel-type：<ul><li>DATABASE（默认） 基于库的并行复制方式</li><li>LOGICAL_CLOCK</li></ul></li></ul><h3 id="基准测试对比"><a href="#基准测试对比" class="headerlink" title="基准测试对比"></a>基准测试对比</h3><p><img src="/img/markdown-img-paste-20161111163801686.png" alt=""></p><h2 id="运维"><a href="#运维" class="headerlink" title="运维"></a>运维</h2><h3 id="InnoDB-Buffer-Pool-动态修改"><a href="#InnoDB-Buffer-Pool-动态修改" class="headerlink" title="InnoDB Buffer Pool 动态修改"></a>InnoDB Buffer Pool 动态修改</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">set</span> global <span class="attribute">innodb_buffer_pool_size</span>=402653184;</span><br></pre></td></tr></table></figure><ul><li>innodb_buffer_pool_size=N<em>(innodb_buffer_pool_chunk_size</em>innodb_buffer_pool_instances)</li><li>调整buffer pool的过程，用户的新请求都会堵塞</li><li>查看buffer pool 调整状态<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">STATUS</span> <span class="keyword">WHERE</span> variable_name=<span class="string">'innodb_buffer_pool_resize_status'</span></span><br></pre></td></tr></table></figure></li></ul><p>或者 查看 error log</p><h3 id="sys-schema"><a href="#sys-schema" class="headerlink" title="sys schema"></a>sys schema</h3><ul><li>sys schema 是MySQL5.7.7中引入的一个系统库，包含了一系列视图、函数和存储过程</li><li>包含：系统运行状态；用户会话信息与资源占用；数据对象信息；SQL执行情况；索引覆盖；锁信息</li><li>基于performance schma的汇总与统计</li><li><a href="http://dev.mysql.com/doc/refman/5.7/en/sys-schema.html" target="_blank" rel="noopener">官方手册</a></li><li><p>全表扫描的查询语句</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> statements_with_full_table_scans;</span><br></pre></td></tr></table></figure></li><li><p>用户会话信息与资源占用</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span>  host_summary;</span><br></pre></td></tr></table></figure></li><li><p>InnoDB锁等待情况</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span>  innodb_lock_waits;</span><br></pre></td></tr></table></figure></li></ul><h3 id="在线修改表结构"><a href="#在线修改表结构" class="headerlink" title="在线修改表结构"></a>在线修改表结构</h3><ul><li>在线修改表结构<ul><li>是否拷贝表；是否允许DML；是否允许select</li></ul></li><li>MySQL5.7版本新增alter table rename index 无需copy table</li><li>支持较好的操作：新增索引、删除索引、重命名字段</li><li>支持不好的操作：新增字段、删除字段、修改字段类型</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>MySQL5.7 是未来的趋势，拥抱变化</li><li>可运维性、易用性提升明显</li><li>在合适的场合选择合理的MySQL版本</li></ul><hr><p>Good luck!<br>冬日暖阳</p>]]></content>
    
    <summary type="html">
    
      MySQL5.7新特性
    
    </summary>
    
      <category term="MySQL" scheme="http://mydba.xyz/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL分布式架构</title>
    <link href="http://mydba.xyz/mysql/163/mysql32.html"/>
    <id>http://mydba.xyz/mysql/163/mysql32.html</id>
    <published>2016-11-11T03:37:42.000Z</published>
    <updated>2016-11-11T03:37:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL分布式架构"><a href="#MySQL分布式架构" class="headerlink" title="MySQL分布式架构"></a>MySQL分布式架构</h1><h2 id="分布式数据库"><a href="#分布式数据库" class="headerlink" title="分布式数据库"></a>分布式数据库</h2><ul><li>区别单机，突破单台服务器的性能瓶颈上限</li><li>一般由管理节点机器，计算节点，数据节点组成</li><li>数据节点统一由分布式数据库管理节点控制</li></ul><h2 id="分布式数据库的分类"><a href="#分布式数据库的分类" class="headerlink" title="分布式数据库的分类"></a>分布式数据库的分类</h2><ul><li>shared Nothing VS Shared Anything<br><img src="/img/markdown-img-paste-20161111114807700.png" alt=""></li></ul><h3 id="Shared-Nothing"><a href="#Shared-Nothing" class="headerlink" title="Shared Nothing"></a>Shared Nothing</h3><p><img src="/img/markdown-img-paste-20161111114921125.png" alt=""></p><h3 id="Shared-Anything"><a href="#Shared-Anything" class="headerlink" title="Shared Anything"></a>Shared Anything</h3><p><img src="/img/markdown-img-paste-20161111115004872.png" alt=""></p><h2 id="MySQL分布式架构-1"><a href="#MySQL分布式架构-1" class="headerlink" title="MySQL分布式架构"></a>MySQL分布式架构</h2><ul><li>分布式事务处理与XA协议</li><li>MySQL分布式事务处理</li><li>MySQL分布式事务的局限与改进</li></ul><h3 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h3><ul><li>Distributed（XA）Transactions</li><li>2pc（Two Phase Commit）Transactions<br><img src="/img/markdown-img-paste-20161111115341556.png" alt=""></li></ul><h3 id="MySQL分布式事务"><a href="#MySQL分布式事务" class="headerlink" title="MySQL分布式事务"></a>MySQL分布式事务</h3><ul><li>什么是分布式事务处理<br>分布式事务一般包含3个部分<ul><li>APP<br>一般指事务的发起者</li><li>Resource Manager，RM<br>资源管理器，主要是提供外部程序进行资源共享访问</li><li>Transaction Manager/Coordinator(TM or TC)<br>TM或者TC是事务的协调者，对于分布式，在提交时，可能有部分节点会提交失败，这个时候，需要TC来决定哪些事务需要重新提交，哪些事务需要回滚</li></ul></li></ul><h3 id="XA-In-MySQL"><a href="#XA-In-MySQL" class="headerlink" title="XA In MySQL"></a>XA In MySQL</h3><ul><li>Only a Resource Manager</li><li>InnoDB Only：innodb_support_xa</li></ul><h3 id="MySQL-XA事务的局限"><a href="#MySQL-XA事务的局限" class="headerlink" title="MySQL XA事务的局限"></a>MySQL XA事务的局限</h3><ul><li><p>客户端退出，prepare状态的XA事务被回滚<br>根据分布式事务的原理，所有prepare成功的事务都应该被提交，比如下面的客户端操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xa <span class="keyword">start</span> <span class="string">'111'</span> ;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t <span class="keyword">values</span>(<span class="number">1</span>);</span><br><span class="line">xa <span class="keyword">end</span> <span class="string">'111'</span> ;</span><br><span class="line">xa <span class="keyword">prepare</span> <span class="string">'111'</span> ;</span><br></pre></td></tr></table></figure></li><li><p>Server Crash 后重启，提交prepare的事务，造成主从数据不一致<br>MySQL官方手册中有一段话：<br>“If an XA Transaction has reached the PREPARE state and the MySQL server is killed(for example,with kill -9 on Unix) or shutdown abnormally, the Transaction can be continued after the server restarts. Howerver, if the client reconnects and commits the Transaction,the Transaction will be absent from the binary log even though it has been committed. This means the data and the binary log have gone out of synchrony. An implication is that XA cannot be used safely together with replication. “</p></li><li><p>为什么一直没有人修复<br>看似简单，其实解决代价很大，另外，MySQL的XA事务用的真不多，官方觉得没必要</p></li><li><p>MySQL官方最终修复<br><a href="http://dev.mysql.com/worklog/task/?id=6860" target="_blank" rel="noopener">http://dev.mysql.com/worklog/task/?id=6860</a><br><img src="/img/markdown-img-paste-20161111153252783.png" alt=""></p></li></ul><h2 id="开源分布式软件MyCat"><a href="#开源分布式软件MyCat" class="headerlink" title="开源分布式软件MyCat"></a>开源分布式软件MyCat</h2><h3 id="Mycat的由来"><a href="#Mycat的由来" class="headerlink" title="Mycat的由来"></a>Mycat的由来</h3><ul><li>java语言编写</li><li>JDK版本要求&gt;1.7版本</li><li>基于阿里的cobar实现，完全兼容MySQL协议</li><li>有专业的维护团队，更新频繁，文档写的比较好</li><li>功能较为完善</li><li>分布式事务支持的不够好</li><li>支持各种数据库：MySQL、Oracle、MongoDB</li><li>目前不支持在线水平扩容</li><li>要做MySQL界的Tomcat</li></ul><h3 id="Mycat架构"><a href="#Mycat架构" class="headerlink" title="Mycat架构"></a>Mycat架构</h3><p><img src="/img/markdown-img-paste-20161111153832112.png" alt=""></p><h3 id="Mycat的功能特点"><a href="#Mycat的功能特点" class="headerlink" title="Mycat的功能特点"></a>Mycat的功能特点</h3><ul><li>数据拆分，丰富的拆分策略，数据库水平扩容</li><li>读写分离，支持用户友好的读写分离策略</li><li>兼容MySQL协议，用户可以以最小的代价接入Mycat</li></ul><h3 id="数据拆分"><a href="#数据拆分" class="headerlink" title="数据拆分"></a>数据拆分</h3><ul><li><p>枚举算法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">"sharding-by-intfile"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>hash-int<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">"hash-int"</span> <span class="attr">class</span>=<span class="string">"org.opencloudb.route.function.PartitionByFileMap"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapFile"</span>&gt;</span>partition-hash-int.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"type"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultNode"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Range算法</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">"auto-sharding-long"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">rule</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns?</span></span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>rang-long<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">"rang-long"</span> <span class="attr">class</span>=<span class="string">"org.opencloudb.route.function.AutoPartitionByLong"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapFile"</span>&gt;</span>autopartiton-long.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultNode"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>Hash取模算法</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">"mod-long"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">rule</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns?</span></span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>mod-long<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">"mod-long"</span> <span class="attr">class</span>=<span class="string">"org.opencloudb.route.function.PartitionByMod"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- how many data nodes --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"count"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Mycat里的重要概念"><a href="#Mycat里的重要概念" class="headerlink" title="Mycat里的重要概念"></a>Mycat里的重要概念</h3><ul><li><p>全局ID</p><ul><li>MySQL： auto_increment</li><li>Mycat： global sequnce number<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;system&gt;<span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sequnceHandlerType"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">system</span>&gt;</span></span></span><br><span class="line">conf/server.xml</span><br></pre></td></tr></table></figure></li></ul></li><li><p>基于文件</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cat sequence_conf.properties</span><br><span class="line">#<span class="keyword">default</span> <span class="keyword">global</span> <span class="keyword">sequence</span></span><br><span class="line"><span class="keyword">GLOBAL</span>.HISIDS=</span><br><span class="line"><span class="keyword">GLOBAL</span>.MIMID=<span class="number">10001</span></span><br><span class="line"><span class="keyword">GLOBAL</span>.MAXID=<span class="number">20000</span></span><br><span class="line"><span class="keyword">GLOBAL</span>.CURID=<span class="number">10000</span></span><br><span class="line"></span><br><span class="line">insert <span class="keyword">into</span> table1(id,name) values(next value <span class="keyword">for</span> MYCATSEQ_GLOBAL,<span class="string">'test'</span>);</span><br></pre></td></tr></table></figure></li></ul><p>实现简单、安全性较差</p><ul><li>基于数据库<br>比直接存文件要安全的多<br>但是DB要支持高可用<br><img src="/img/markdown-img-paste-20161111155841450.png" alt=""></li><li>基于本地时间戳<br>不依赖任何服务<br>ID分配一般都较大<br><img src="/img/markdown-img-paste-20161111160000531.png" alt=""></li></ul><p>###Mycat的部署与安装</p><ul><li><p>重要概念</p><ul><li>DataHost</li><li>DataBase Node（DBN）</li><li>分区规则</li><li>分区键</li></ul></li><li><p>部署安装<br><img src="/img/markdown-img-paste-20161111160226501.png" alt=""></p></li><li><p>启动Mycat<br><img src="/img/markdown-img-paste-2016111116030921.png" alt=""><br><img src="/img/markdown-img-paste-20161111160348465.png" alt=""><br><img src="/img/markdown-img-paste-20161111160418120.png" alt=""><br><img src="/img/markdown-img-paste-20161111160442868.png" alt="">  </p></li><li><p>使用Mycat<br><img src="/img/markdown-img-paste-20161111160519290.png" alt="">  </p></li></ul><hr><p>Good luck!<br>冬日暖阳</p>]]></content>
    
    <summary type="html">
    
      MySQL分布式架构
    
    </summary>
    
      <category term="MySQL" scheme="http://mydba.xyz/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL读写分离</title>
    <link href="http://mydba.xyz/mysql/163/mysql31.html"/>
    <id>http://mydba.xyz/mysql/163/mysql31.html</id>
    <published>2016-11-10T07:01:53.000Z</published>
    <updated>2016-11-10T07:01:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL读写分离"><a href="#MySQL读写分离" class="headerlink" title="MySQL读写分离"></a>MySQL读写分离</h1><h2 id="MySQL读写分离概述"><a href="#MySQL读写分离概述" class="headerlink" title="MySQL读写分离概述"></a>MySQL读写分离概述</h2><h3 id="读写分离-What"><a href="#读写分离-What" class="headerlink" title="读写分离 - What"></a>读写分离 - What</h3><ul><li>在高并发查询场景下，为了满足应用访问需求，通常都会部署多个从库提供查询服务以提升数据库查询的扩展性，将查询分发到从库，让从库分担主库查询负载的技术，我们通常称为读写分离<br><img src="/img/markdown-img-paste-20161110150550728.png" alt=""></li></ul><h3 id="读写分离-Why"><a href="#读写分离-Why" class="headerlink" title="读写分离 - Why"></a>读写分离 - Why</h3><p><img src="/img/markdown-img-paste-20161110161053462.png" alt=""><br><img src="/img/markdown-img-paste-20161110161226636.png" alt=""><br><img src="/img/markdown-img-paste-20161110161319923.png" alt=""><br><img src="/img/markdown-img-paste-20161110161420860.png" alt="">   </p><h3 id="读写分离-How"><a href="#读写分离-How" class="headerlink" title="读写分离 - How"></a>读写分离 - How</h3><p><img src="/img/markdown-img-paste-20161110161450249.png" alt=""><br><img src="/img/markdown-img-paste-20161110161526576.png" alt="">  </p><h3 id="读写分离主要问题"><a href="#读写分离主要问题" class="headerlink" title="读写分离主要问题"></a>读写分离主要问题</h3><p>缺点：</p><ol><li>数据可能不一致</li><li>部署、实现相对复杂<br><img src="/img/markdown-img-paste-20161110161728463.png" alt=""></li></ol><h2 id="读写分离常见方案"><a href="#读写分离常见方案" class="headerlink" title="读写分离常见方案"></a>读写分离常见方案</h2><ul><li>MySQL Proxy</li><li>Amoeba For MySQL</li><li>MySQL Router</li><li>应用端实现</li></ul><h3 id="MySQL-Proxy"><a href="#MySQL-Proxy" class="headerlink" title="MySQL Proxy"></a>MySQL Proxy</h3><p>MySQL Proxy 是MySQL官方开发的一款读写分离中间件，开发多年一直未GA，在功能上存在许多缺陷，目前官方已经放弃开发</p><ul><li>使用C/C++ 开发服务模块</li><li>使用lua脚本语言分析sql语句进行读写分离<br><img src="/img/markdown-img-paste-20161110175403769.png" alt=""></li></ul><h3 id="MySQL-Proxy-（Atlas）"><a href="#MySQL-Proxy-（Atlas）" class="headerlink" title="MySQL Proxy （Atlas）"></a>MySQL Proxy （Atlas）</h3><p>Atlas是360公司开发改进的一款MySQL Proxy分支，基于MySQL Proxy0.8.2，修正大量bug，并添加许多使用功能。已经大规模运行于360公司的各种业务中，经过线上大并发业务考验，也有许多其他公司在使用，开发者与使用者比较活跃<br>Fix：</p><ul><li>Lua 改为C语言，提高性能</li><li>并发下字符集修正</li><li>避免死等待</li><li>主库宕机仍可以读</li><li>MySQL新版兼容等</li></ul><p>Add：</p><ul><li>从库动态上下线</li><li>分库分表</li><li>从库指定负载权重</li><li>IP过滤等</li></ul><p>安装<br>准备：<br>Atlas： <a href="https://github.com/Qihoo360/Atlas/releases" target="_blank" rel="noopener">https://github.com/Qihoo360/Atlas/releases</a></p><p>操作：</p><ol><li>sudo dpkg -i Atlas-2.2-debian7.0-x86_64.deb</li><li>编辑配置文件</li><li>/usr/local/mysql-proxy/bin/mysql-proxyd instancename start</li></ol><h3 id="Amoeba-for-MySQL"><a href="#Amoeba-for-MySQL" class="headerlink" title="Amoeba for MySQL"></a>Amoeba for MySQL</h3><p>Amoeba是类似MySQL Proxy的中间件，采用java语言编写，具有读写分离、数据切分和过滤等功能，是非常早的一款国产MySQL读写分离软件</p><ul><li>支持读写分离</li><li>支持数据拆分</li><li>对事务支持不好</li><li>数据拆分比较简单<br><img src="/img/markdown-img-paste-20161110180125249.png" alt=""></li></ul><h3 id="MySQL-Router"><a href="#MySQL-Router" class="headerlink" title="MySQL Router"></a>MySQL Router</h3><p>MySQL Router 是MySQL官方开发的一款一个轻量级的用来实现高可用和扩展性的中间件，支持读写分离负载均衡，支持跟MySQL Fabric一起使用，刚GA，稳定性等还有待考验</p><p>MySQL Router提供2个端口，读写1个，只读端口1个<br>读写端口：first available<br>只读端口：round robin<br><img src="/img/markdown-img-paste-2016111018245511.png" alt=""></p><hr><p>Good luck!<br>冬日暖阳</p>]]></content>
    
    <summary type="html">
    
      MySQL读写分离
    
    </summary>
    
      <category term="MySQL" scheme="http://mydba.xyz/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL高可用架构</title>
    <link href="http://mydba.xyz/mysql/163/mysql30.html"/>
    <id>http://mydba.xyz/mysql/163/mysql30.html</id>
    <published>2016-11-09T02:03:36.000Z</published>
    <updated>2016-11-09T02:03:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL高可用架构"><a href="#MySQL高可用架构" class="headerlink" title="MySQL高可用架构"></a>MySQL高可用架构</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="高可用（High-Availability）"><a href="#高可用（High-Availability）" class="headerlink" title="高可用（High Availability）"></a>高可用（High Availability）</h3><ul><li>应用提供持续不间断（可用）的服务的能力</li><li>系统高可用性的评价通常用可用率表示<br><img src="/img/markdown-img-paste-20161109101110110.png" alt=""></li></ul><h3 id="造成不可用的原因"><a href="#造成不可用的原因" class="headerlink" title="造成不可用的原因"></a>造成不可用的原因</h3><ul><li>硬件故障（各种）</li><li>预期中的系统软硬件维护</li><li>软件缺陷（应用代码，服务程序都可能存在bug…）</li><li>攻击，泄露，人为失误…等安全事件</li><li>对于系统来说，不可用时间是各关键组件不可用时间的总和</li></ul><h3 id="提高可用性的主要手段"><a href="#提高可用性的主要手段" class="headerlink" title="提高可用性的主要手段"></a>提高可用性的主要手段</h3><ul><li>冗余，Redundancy</li><li>关键软硬件通过备用冗余避免故障时长时间的不可用</li><li>数据软件，硬件，存储的数据，都要通过冗余确保故障时可替换<br><img src="/img/markdown-img-paste-20161109101529804.png" alt=""></li></ul><h3 id="数据库冗余与可用性"><a href="#数据库冗余与可用性" class="headerlink" title="数据库冗余与可用性"></a>数据库冗余与可用性</h3><ul><li>数据库服务在冗余实现上有其特殊性<ul><li>数据：服务“有状态” 与数据冗余</li></ul></li><li>实现方式多种多样，同一种数据也会有多种实现方案</li><li>可用性目标循序渐进<ul><li>任何故障都不会造成数据丢失 –&gt; 可以较快速恢复服务（高可用）</li></ul></li></ul><h2 id="MySQL高可用常见方案"><a href="#MySQL高可用常见方案" class="headerlink" title="MySQL高可用常见方案"></a>MySQL高可用常见方案</h2><h3 id="基于共享存储的单活方案（极不常用）"><a href="#基于共享存储的单活方案（极不常用）" class="headerlink" title="基于共享存储的单活方案（极不常用）"></a>基于共享存储的单活方案（极不常用）</h3><p><img src="/img/markdown-img-paste-20161109102821801.png" alt=""></p><h3 id="基于存储复制的数据冗余单活（不常用）"><a href="#基于存储复制的数据冗余单活（不常用）" class="headerlink" title="基于存储复制的数据冗余单活（不常用）"></a>基于存储复制的数据冗余单活（不常用）</h3><p><img src="/img/markdown-img-paste-20161109102927615.png" alt=""></p><h3 id="基于MySQL主从复制（常用，普适）"><a href="#基于MySQL主从复制（常用，普适）" class="headerlink" title="基于MySQL主从复制（常用，普适）"></a>基于MySQL主从复制（常用，普适）</h3><p><img src="/img/markdown-img-paste-20161109103031751.png" alt=""></p><h3 id="基于集群提交通信协议的多主复制（一定场景适用）"><a href="#基于集群提交通信协议的多主复制（一定场景适用）" class="headerlink" title="基于集群提交通信协议的多主复制（一定场景适用）"></a>基于集群提交通信协议的多主复制（一定场景适用）</h3><p>Percona XtraDB Cluster（Galera cluster）<br><img src="/img/markdown-img-paste-20161109103318671.png" alt=""></p><h2 id="MySQL主从复制方案"><a href="#MySQL主从复制方案" class="headerlink" title="MySQL主从复制方案"></a>MySQL主从复制方案</h2><h3 id="主从复制高可用方案需要改进的问题"><a href="#主从复制高可用方案需要改进的问题" class="headerlink" title="主从复制高可用方案需要改进的问题"></a>主从复制高可用方案需要改进的问题</h3><ul><li>主从服务器各自有IP地址，发生主从切换后应用需要修改重启</li><li>人工判断主库是否故障再发起切换需要花较多时间</li><li>主从复制存在客观延迟，切换后可能造成事务数据丢失</li></ul><h3 id="主从复制高可用方案改进"><a href="#主从复制高可用方案改进" class="headerlink" title="主从复制高可用方案改进"></a>主从复制高可用方案改进</h3><ul><li>为了避免应用人工修改切换IP，引入VIP漂移方案<br><img src="/img/markdown-img-paste-20161109103809769.png" alt=""><br><img src="/img/markdown-img-paste-20161109103842969.png" alt=""></li><li>为了减少人工介入处理的时间开销引入自动探活处理机制<br><img src="/img/markdown-img-paste-20161109104014343.png" alt=""></li></ul><h3 id="高可用中间层与RDS"><a href="#高可用中间层与RDS" class="headerlink" title="高可用中间层与RDS"></a>高可用中间层与RDS</h3><ul><li>VIP解决应用切换问题</li><li>监控和管理服务器解决自动判断故障切换和VIP漂移</li><li>VIP管理+探活+主从关系切换 = 高可用中间层</li><li>云环境+高可用中间层+底层数据库 = 一种PaaS = 基本RDS</li></ul><h4 id="高可用中间层的两种方案"><a href="#高可用中间层的两种方案" class="headerlink" title="高可用中间层的两种方案"></a>高可用中间层的两种方案</h4><ul><li>MHA<ul><li>自动选择复制延迟最小的从节点并试图补全日志（但大部分主机故障情况下行不通）</li><li>通常要求两从以上，会进行主从关系切换</li><li>不提供VIP管理方案</li></ul></li><li>MMM<ul><li>提供了基本的VIP管理功能</li><li>适合双主配置的一对主机，不会主动切换主从关系</li><li>不支持主从数据延迟判断和补全</li></ul></li></ul><h3 id="主从复制延迟"><a href="#主从复制延迟" class="headerlink" title="主从复制延迟"></a>主从复制延迟</h3><ul><li>日志传输为什么会延迟<br><img src="/img/markdown-img-paste-20161109104833925.png" alt=""><br><img src="/img/markdown-img-paste-20161109104925267.png" alt=""><br><img src="/img/markdown-img-paste-20161109180036373.png" alt=""><br><img src="/img/markdown-img-paste-20161109180133558.png" alt=""></li></ul><h3 id="比较完善的MySQL高可用方案"><a href="#比较完善的MySQL高可用方案" class="headerlink" title="比较完善的MySQL高可用方案"></a>比较完善的MySQL高可用方案</h3><ul><li>半同步复制 + 高可用中间层 + VIP管理方案<br>例如：<ul><li>半同步复制 + MHA + Keepalive</li><li>半同步复制 + RDS</li></ul></li></ul><h3 id="MySQL高可用框架-MHA"><a href="#MySQL高可用框架-MHA" class="headerlink" title="MySQL高可用框架 - MHA"></a>MySQL高可用框架 - MHA</h3><ul><li>用一个管理节点监控后端数据库主库可用性</li><li>提供VIP漂移接口，不提供具体方法</li><li>提供补全从库日志的脚本<br><img src="/img/markdown-img-paste-20161109180638353.png" alt=""></li></ul><h3 id="MHA的安装步骤"><a href="#MHA的安装步骤" class="headerlink" title="MHA的安装步骤"></a>MHA的安装步骤</h3><ol><li>规划</li><li>配置服务器间域名和ssh互信访问</li><li>在manager节点安装MHA node 和 manage组件及其依赖包</li><li>在数据库服务器安装MHA node组件及其依赖包</li><li>配置VIP管理脚本master_ip_failover和master_ip_online_change</li><li>配置MHA配置文件mha_manager.cnf</li><li>数据库配置主从，添加mha连接用户…etc</li><li>启动MHA开始监控数据库主从集群<br><img src="/img/markdown-img-paste-20161109181110980.png" alt=""></li></ol><hr><p>Good luck!<br>冬日暖阳</p>]]></content>
    
    <summary type="html">
    
      MySQL高可用架构
    
    </summary>
    
      <category term="MySQL" scheme="http://mydba.xyz/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL参数调优</title>
    <link href="http://mydba.xyz/mysql/163/mysql29.html"/>
    <id>http://mydba.xyz/mysql/163/mysql29.html</id>
    <published>2016-11-08T05:27:53.000Z</published>
    <updated>2016-11-08T05:27:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL参数调优"><a href="#MySQL参数调优" class="headerlink" title="MySQL参数调优"></a>MySQL参数调优</h1><h2 id="为什么要调整参数"><a href="#为什么要调整参数" class="headerlink" title="为什么要调整参数"></a>为什么要调整参数</h2><ul><li>不同服务器之间的配置、性能不一样</li><li>不同业务场景对数据的需求不一样</li><li>MySQL的默认参数只是个参考值，并不适合所有的应用场景</li></ul><h2 id="优化之前我们需要知道什么"><a href="#优化之前我们需要知道什么" class="headerlink" title="优化之前我们需要知道什么"></a>优化之前我们需要知道什么</h2><ul><li>服务器相关配置</li><li>业务相关情况</li><li>MySQL相关配置</li></ul><h2 id="服务器关注点"><a href="#服务器关注点" class="headerlink" title="服务器关注点"></a>服务器关注点</h2><ul><li>硬件情况</li><li>操作系统版本</li><li>CPU、网卡节电模式</li><li>服务器numa设置</li><li>RAID缓存<br><img src="/img/markdown-img-paste-20161108133214912.png" alt="">  </li></ul><h3 id="磁盘调度策略-Write-Back"><a href="#磁盘调度策略-Write-Back" class="headerlink" title="磁盘调度策略 - Write Back"></a>磁盘调度策略 - Write Back</h3><ul><li>数据写入cache即返回，数据异步地从cache刷入存储介质<br><img src="/img/markdown-img-paste-20161108133552224.png" alt=""><h3 id="磁盘调度策略-Write-Through"><a href="#磁盘调度策略-Write-Through" class="headerlink" title="磁盘调度策略 - Write Through"></a>磁盘调度策略 - Write Through</h3></li><li>数据同时写入cache和存储介质才返回写入成功<br><img src="/img/markdown-img-paste-20161108133709267.png" alt=""></li></ul><h3 id="Write-Back-VS-Write-Through"><a href="#Write-Back-VS-Write-Through" class="headerlink" title="Write Back VS Write Through"></a>Write Back VS Write Through</h3><ul><li>Write Back 性能优于 Write Through</li><li>Write Through 比 Write Back 安全性高</li></ul><h3 id="RAID"><a href="#RAID" class="headerlink" title="RAID"></a>RAID</h3><ul><li><p>RAID （<code>R</code>edundant <code>A</code>rray of <code>I</code>ndependent <code>D</code>isks）</p><ul><li>生产环境里一般不太会用裸设备，通常会使用RAID卡对一块盘或多块盘做RAID</li><li>RAID卡会预留一块内存，来保证数据高效的存储与读取</li><li>常见的RAID类型有：RAID1、RAID0、RAID10和RAID5</li></ul></li><li><p>RAID0 VS RAID1<br><img src="/img/markdown-img-paste-20161108134441183.png" alt=""></p></li><li><p>RAID5 VS RAID10<br><img src="/img/markdown-img-paste-20161108134541895.png" alt=""></p></li><li><p>RAID如何保证数据安全</p><ul><li>BBU（<code>B</code>ackup <code>B</code>attery <code>U</code>nit）<br>BBU保证在WB策略下，即使服务器发生掉电或宕机，也能够将缓存中的数据写入到磁盘，从而保证数据的安全</li></ul></li></ul><h2 id="MySQL有哪些注意事项"><a href="#MySQL有哪些注意事项" class="headerlink" title="MySQL有哪些注意事项"></a>MySQL有哪些注意事项</h2><h3 id="MySQL的部署安装"><a href="#MySQL的部署安装" class="headerlink" title="MySQL的部署安装"></a>MySQL的部署安装</h3><ul><li>推荐的MySQL版本 &gt;= MySQL5.5</li><li>推荐的MySQL存储引擎： InnoDB</li></ul><h3 id="MySQL的监控-系统的调优依据"><a href="#MySQL的监控-系统的调优依据" class="headerlink" title="MySQL的监控 - 系统的调优依据"></a>MySQL的监控 - 系统的调优依据</h3><ul><li>实时监控MySQL的Slow Log</li><li>实时监控数据库服务器的负载情况</li><li>实时监控MySQL内部状态值<ul><li>binlog文件大小（MB）</li><li>BufferPool命中率（%）</li><li>CPU利用率（%）</li><li>磁盘读操作延时（ms/op）</li><li>磁盘读取字节数（KB/s）</li><li>磁盘读取次数（次/秒）</li><li>占用磁盘存储空间（MB）</li><li>磁盘写操作延时（ms/op）</li><li>磁盘写入字节数（KB/s）</li><li>磁盘写入次数（次/秒）</li><li>磁盘IO利用率（%）</li><li>占用内存量（MB）</li><li>内存使用率（%）</li><li>一般事务提交操作（次/秒）</li><li>删除操作（次/秒）</li><li>插入操作（次/秒）</li><li>查询操作（次/秒）</li><li>更新操作（次/秒）</li><li>二阶段事务提交操作（次/秒）</li></ul></li></ul><h4 id="重点关注哪些MySQL-Status"><a href="#重点关注哪些MySQL-Status" class="headerlink" title="重点关注哪些MySQL Status"></a>重点关注哪些MySQL Status</h4><ul><li>Com_Select/Update/Delete/Insert</li><li>Bytes_received/Bytes_sent</li><li>Buffer Pool Hit Rate</li><li>Threads_connected/Threads_created/Threads_running</li></ul><h3 id="MySQL参数调优-1"><a href="#MySQL参数调优-1" class="headerlink" title="MySQL参数调优"></a>MySQL参数调优</h3><h4 id="读优化"><a href="#读优化" class="headerlink" title="读优化"></a>读优化</h4><ul><li>合理利用索引对MySQL查询性能至关重要</li><li><p>适当的调整MySQL参数也能提升查询性能</p></li><li><p>innodb_buffer_pool_size</p><ul><li>InnoDB存储引擎自己维护一块内存区域完成新老数据的替换</li></ul></li><li>innodb_thread_concurrency<ul><li>InnoDB内部并发控制参数，设置为0代表不做控制</li><li>如果并发请求较多，参数设置较小，后进来的请求将会排队</li></ul></li></ul><h4 id="写优化"><a href="#写优化" class="headerlink" title="写优化"></a>写优化</h4><ul><li>表结构设计上使用自增字段作为表的主键</li><li>只对合适的字段加索引，索引太多影响写入性能</li><li>监控服务器磁盘IO情况，如果写延迟较大则需要扩容</li><li><p>选择正确的MySQL版本，合理设置参数</p></li><li><p>有助于提高写入性能的参数</p><ul><li>innodb_flush_log_at_trx_commit &amp;&amp; sync_binlog</li><li>innodb log file size</li><li>innodb_io_capacity</li><li>innodb insert buffer</li></ul></li><li><p>主要影响MySQL写性能的两个参数</p><ul><li>innodb_flush_log_at_trx_commit</li><li>sync_binlog</li></ul></li><li><p>innodb_flush_log_at_trx_commit<br>控制InnoDB事务的刷新方式，一共有三个值：0,1,2<br>N=0 - 每隔一秒，把事务日志缓存区的数据写到日志文件中，以及把日志文件的数据刷新到磁盘上（高效，但不安全）<br>N=1 - 每个事务提交的时候，就把事务日志从缓存区写到日志文件中，并且刷新日志文件的数据到磁盘上，优先使用此模式保障数据安全性（低效，非常安全）<br>N=2 - 每个事务提交的时候，把事务日志从缓存区写到日志文件中；每隔一秒，刷新一次日志文件，但不一定刷新到磁盘上，而是取决于操作系统的调度（高效，但不安全）</p></li><li><p>sync_binlog<br>控制每次写入binlog，是否都需要进行一次持久化</p></li></ul><h4 id="如何保证事务安全"><a href="#如何保证事务安全" class="headerlink" title="如何保证事务安全"></a>如何保证事务安全</h4><ul><li>innodb_flush_log_at_trx_commit 和 sync_binlog 都设置为 1</li><li><p>事务要和binlog保持一致性<br><img src="/img/markdown-img-paste-20161108143340403.png" alt=""></p></li><li><p>串行有哪些问题</p><ul><li>SAS盘一般每秒只能有150-200个Fsync</li><li>换算到数据库每秒只能执行50~60个事务</li></ul></li><li><p>社区和官方的改进</p><ul><li>MariaDB 提出改进，即使这两个参数都是1也能做到合并效果，性能得到了大幅提高</li><li>官方吸收了MariaDB的思想，并在此基础上进行了改进，性能再次得到了提高<br>※ 官方在MySQL5.6版本之后才做了这个优化<br>※ Percona和MariaDB版本在MySQL5.5已经包含了这个优化</li></ul></li><li><p>性能提升<br><img src="/img/markdown-img-paste-20161108143836193.png" alt=""></p></li></ul><h4 id="InnoDB-Redo-log"><a href="#InnoDB-Redo-log" class="headerlink" title="InnoDB Redo log"></a>InnoDB Redo log</h4><p>Write ahead log （WAL）<br><img src="/img/markdown-img-paste-20161108144005727.png" alt=""></p><ul><li><p>Redo log有哪些问题</p><ul><li>如果写入频繁导致Redo log 里对应的最老的数据脏页还没有刷新到磁盘，此时数据库将卡住，强制刷新脏页到磁盘</li><li>MySQL 默认配置两个文件才10M，非常容易写满，生产环境中应适当调整大小</li></ul></li><li><p>innodb_io_capacity</p><ul><li>InnoDB每次刷多少个脏页，决定InnoDB存储引擎的吞吐能力</li><li>在SSD等高性能存储介质下，应该提高该参数以提高数据库的性能</li></ul></li></ul><h4 id="Insert-Buffer"><a href="#Insert-Buffer" class="headerlink" title="Insert Buffer"></a>Insert Buffer</h4><ul><li><p>顺序读写 VS 随机读写<br><img src="/img/markdown-img-paste-20161108144453251.png" alt=""></p></li><li><p>随机请求性能远小于顺序请求<br><img src="/img/markdown-img-paste-20161108144549466.png" alt=""></p></li></ul><p>※ 将尽可能多的 随机请求合并为顺序请求才是提高数据库性能的关键</p><ul><li>MySQL从5.1 版本开始支持Insert Buffer</li><li>MySQL5.5版本之后同时支持update和delete的Merge</li><li>Insert Buffer 只对二级索引且非唯一索引有效<br><img src="/img/markdown-img-paste-20161108144820156.png" alt=""></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>服务器配置要合理（内核版本、磁盘调度策略、RAID卡缓存）</li><li>完善的监控系统，提前发现问题</li><li>数据库版本要跟上，不要太新，也不要太老</li><li>数据库性能优化：<br>查询优化：索引优化为主，参数优化为辅<br>写入优化：业务优化为主，参数优化为辅</li></ul><hr><p>Good luck!<br>冬日暖阳</p>]]></content>
    
    <summary type="html">
    
      MySQL参数调优
    
    </summary>
    
      <category term="MySQL" scheme="http://mydba.xyz/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL日常运维</title>
    <link href="http://mydba.xyz/mysql/163/mysql28.html"/>
    <id>http://mydba.xyz/mysql/163/mysql28.html</id>
    <published>2016-11-07T07:01:51.000Z</published>
    <updated>2016-11-07T07:01:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL日常运维"><a href="#MySQL日常运维" class="headerlink" title="MySQL日常运维"></a>MySQL日常运维</h1><h2 id="DBA运维工作"><a href="#DBA运维工作" class="headerlink" title="DBA运维工作"></a>DBA运维工作</h2><p>日常</p><ul><li>导数据、数据修改、表结构变更</li><li>加权限、问题处理<br>其他</li><li>数据库选型部署、设计、监控、备份、优化等</li></ul><h3 id="日常运维工作"><a href="#日常运维工作" class="headerlink" title="日常运维工作"></a>日常运维工作</h3><h4 id="导数据及注意事项"><a href="#导数据及注意事项" class="headerlink" title="导数据及注意事项"></a>导数据及注意事项</h4><ol><li>数据最终形式（csv、sql文本，还是直接导入某库中）</li><li>导数据的方法（mysqldump、select into outfile ）</li><li>导数据注意事项<ul><li>导出为csv格式需要FILE权限，并且只能数据库本地导</li><li>避免锁库锁表（mysqldump使用–single-transaction选项不锁表）</li><li>避免对业务造成影响，尽量在镜像库做</li></ul></li></ol><h4 id="数据修改及注意事项"><a href="#数据修改及注意事项" class="headerlink" title="数据修改及注意事项"></a>数据修改及注意事项</h4><ol><li>修改前切记做好备份</li><li>开事务做，修改完检查好了再提交</li><li>避免一次修改大量数据，可以分批修改</li><li>避免业务高峰期做</li></ol><h4 id="表结构变更注意事项"><a href="#表结构变更注意事项" class="headerlink" title="表结构变更注意事项"></a>表结构变更注意事项</h4><ol><li>在低峰期做</li><li>表结构变更是否会有锁（5.6包含online ddl功能）</li><li>使用pt-online-schema-change 完成表结构变更<ul><li>可以避免主从延时</li><li>可以避免负载过高，可以限速</li></ul></li></ol><h4 id="问题处理（数据库慢）"><a href="#问题处理（数据库慢）" class="headerlink" title="问题处理（数据库慢）"></a>问题处理（数据库慢）</h4><ol><li>数据库慢在哪？</li><li>show processlist 查看mysql连接信息</li><li>查看系统状态（iostat，top，vmstat，tcprstat）</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>日常工作比较简单，但是任何一个操作都可能影响线上服务</li><li>结合不同环境，不同要求，选择最合适的方法处理</li><li>日常工作应该求稳不求快，保障线上稳定是DBA的最大责任</li></ol><hr><p>Good luck!<br>冬日暖阳</p>]]></content>
    
    <summary type="html">
    
      MySQL日常运维
    
    </summary>
    
      <category term="MySQL" scheme="http://mydba.xyz/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL主从复制</title>
    <link href="http://mydba.xyz/mysql/163/mysql27.html"/>
    <id>http://mydba.xyz/mysql/163/mysql27.html</id>
    <published>2016-11-07T06:01:40.000Z</published>
    <updated>2016-11-07T06:01:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL主从复制"><a href="#MySQL主从复制" class="headerlink" title="MySQL主从复制"></a>MySQL主从复制</h1><h2 id="主从复制的模式"><a href="#主从复制的模式" class="headerlink" title="主从复制的模式"></a>主从复制的模式</h2><p><img src="/img/markdown-img-paste-20161107140710955.png" alt=""></p><h2 id="主从复制用途"><a href="#主从复制用途" class="headerlink" title="主从复制用途"></a>主从复制用途</h2><ul><li>实时灾备，用于故障切换<br><img src="/img/markdown-img-paste-20161107140848670.png" alt=""><br><img src="/img/markdown-img-paste-20161107140929722.png" alt=""></li><li>读写分离，提供查询服务<br><img src="/img/markdown-img-paste-20161107141007526.png" alt=""></li><li>备份，避免影响业务<br><img src="/img/markdown-img-paste-20161107141041288.png" alt=""></li></ul><h2 id="主从复制部署"><a href="#主从复制部署" class="headerlink" title="主从复制部署"></a>主从复制部署</h2><h3 id="主从部署必要条件"><a href="#主从部署必要条件" class="headerlink" title="主从部署必要条件"></a>主从部署必要条件</h3><ul><li>主库开启binlog日志（设置log-bin参数）</li><li>主从server-id不同</li><li>从库服务器能连通主库</li></ul><h3 id="主从部署步骤"><a href="#主从部署步骤" class="headerlink" title="主从部署步骤"></a>主从部署步骤</h3><ul><li>备份还原（mysqldump或xtrabackup）</li><li>授权（grant replication slave on <em>.</em> ）</li><li>配置复制，并启动（change master to）</li><li>查看主从复制信息（show slave status\G）</li></ul><h2 id="主从复制原理"><a href="#主从复制原理" class="headerlink" title="主从复制原理"></a>主从复制原理</h2><p><img src="/img/markdown-img-paste-2016110714143736.png" alt=""></p><h2 id="主从复制存在的问题"><a href="#主从复制存在的问题" class="headerlink" title="主从复制存在的问题"></a>主从复制存在的问题</h2><p>存在问题</p><ul><li>主库宕机后，数据可能丢失</li><li>从库只有一个sql thread，主库写压力大，复制很可能延迟<br>解决方法</li><li>半同步复制</li><li>并行复制</li></ul><h2 id="MySQL-semi-sync（半同步复制）"><a href="#MySQL-semi-sync（半同步复制）" class="headerlink" title="MySQL semi-sync（半同步复制）"></a>MySQL semi-sync（半同步复制）</h2><ul><li>5.5集成到MySQL，以插件的形式存在，需要单独安装</li><li>确保事务提交后binlog至少传输到一个从库</li><li>不保证从库应用完这个事务的binlog</li><li>性能有一定的降低，响应时间会更长</li><li>网络异常或从库宕机，会卡住主库，直到超时或从库恢复<br><img src="/img/markdown-img-paste-20161107143028630.png" alt=""><br><img src="/img/markdown-img-paste-20161107142225811.png" alt=""></li></ul><h3 id="配置半同步复制"><a href="#配置半同步复制" class="headerlink" title="配置半同步复制"></a>配置半同步复制</h3><ul><li>安装semisync，只需要安装一次</li><li><p>主库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">install</span> <span class="keyword">plugin</span> rpl_semi_sync_master <span class="keyword">SONAME</span> <span class="string">'semisync_master.so'</span>;</span><br></pre></td></tr></table></figure></li><li><p>从库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">install</span> <span class="keyword">plugin</span> rpl_semi_sync_slave <span class="keyword">SONAME</span> <span class="string">'semisync_slave.so'</span>;</span><br></pre></td></tr></table></figure></li></ul><p>动态设置</p><ul><li><p>主库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> rpl_semi_sync_master_enabled = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> rpl_semi_sync_master_timeout = N; <span class="comment">-- master延迟切换为异步</span></span><br></pre></td></tr></table></figure></li><li><p>从库</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> global <span class="comment">rpl_semi_sync_slave_enabled = 1</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="半同步复制状态"><a href="#半同步复制状态" class="headerlink" title="半同步复制状态"></a>半同步复制状态</h3><p><img src="/img/markdown-img-paste-20161107142834533.png" alt=""></p><h2 id="MySQL并行复制"><a href="#MySQL并行复制" class="headerlink" title="MySQL并行复制"></a>MySQL并行复制</h2><ul><li>官方社区版5.6中新增</li><li>并行是指从库多线程apply binlog</li><li>库级别并行应用binlog，同一个库数据更改还是串行（5.7版本并行复制基于事务组）</li></ul><h3 id="并行复制设置"><a href="#并行复制设置" class="headerlink" title="并行复制设置"></a>并行复制设置</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">set</span> global <span class="attribute">slave_parallel_workers</span>=10; --设置sql线程数为10</span><br></pre></td></tr></table></figure><h3 id="部分数据复制"><a href="#部分数据复制" class="headerlink" title="部分数据复制"></a>部分数据复制</h3><ul><li><p>主库添加参数</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">binlog_do_db</span>=db1</span><br><span class="line"><span class="attr">binlog_ignore_db</span>=db2</span><br><span class="line"><span class="attr">binlog_ignore_db</span>=db3</span><br></pre></td></tr></table></figure></li><li><p>或者在从库添加参数</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">replicate_do_db</span>=db1</span><br><span class="line"><span class="attr">replicate_ignore_db</span>=db1</span><br><span class="line"><span class="attr">replicate_do_table</span>=db1.t1</span><br><span class="line"><span class="attr">replicate_ignore_table</span>=db1.t1</span><br><span class="line"><span class="attr">replicate_wild_do_table</span>=db%.%</span><br><span class="line"><span class="attr">replicate_wild_ignore_table</span>=db1.%</span><br></pre></td></tr></table></figure></li></ul><h2 id="级联复制"><a href="#级联复制" class="headerlink" title="级联复制"></a>级联复制</h2><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">A</span> <span class="literal">-</span><span class="literal">-</span>&gt; <span class="comment">B</span> <span class="literal">-</span><span class="literal">-</span>&gt; <span class="comment">C</span></span><br></pre></td></tr></table></figure><p>B中添加参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log_slave_updates</span><br></pre></td></tr></table></figure></p><p>B将把A的binlog记录到自己的binlog日志中</p><h2 id="复制监控"><a href="#复制监控" class="headerlink" title="复制监控"></a>复制监控</h2><p>查询从库状态<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">show</span> <span class="string">slave</span> <span class="string">status\G</span></span><br><span class="line"></span><br><span class="line"><span class="string">***************************</span> <span class="number">1.</span> <span class="string">row</span> <span class="string">***************************</span></span><br><span class="line"><span class="attr">               Slave_IO_State:</span> <span class="string">Waiting</span> <span class="string">for</span> <span class="string">master</span> <span class="string">to</span> <span class="string">send</span> <span class="string">event</span></span><br><span class="line"><span class="attr">                  Master_Host:</span> <span class="number">10.170</span><span class="number">.235</span><span class="number">.110</span></span><br><span class="line"><span class="attr">                  Master_User:</span> <span class="string">eprep1</span></span><br><span class="line"><span class="attr">                  Master_Port:</span> <span class="number">3308</span></span><br><span class="line"><span class="attr">                Connect_Retry:</span> <span class="number">60</span></span><br><span class="line"><span class="attr">              Master_Log_File:</span> <span class="string">mysql-bin.000065</span></span><br><span class="line"><span class="attr">          Read_Master_Log_Pos:</span> <span class="number">46615397</span></span><br><span class="line"><span class="attr">               Relay_Log_File:</span> <span class="string">mysql-relay-bin.001619</span></span><br><span class="line"><span class="attr">                Relay_Log_Pos:</span> <span class="number">46615610</span></span><br><span class="line"><span class="attr">        Relay_Master_Log_File:</span> <span class="string">mysql-bin.000065</span></span><br><span class="line"><span class="attr">             Slave_IO_Running:</span> <span class="literal">Yes</span></span><br><span class="line"><span class="attr">            Slave_SQL_Running:</span> <span class="literal">Yes</span></span><br><span class="line"><span class="attr">              Replicate_Do_DB:</span></span><br><span class="line"><span class="attr">          Replicate_Ignore_DB:</span></span><br><span class="line"><span class="attr">           Replicate_Do_Table:</span></span><br><span class="line"><span class="attr">       Replicate_Ignore_Table:</span></span><br><span class="line"><span class="attr">      Replicate_Wild_Do_Table:</span></span><br><span class="line"><span class="attr">  Replicate_Wild_Ignore_Table:</span> <span class="string">information_schema.%,performance_schema.%</span></span><br><span class="line"><span class="attr">                   Last_Errno:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">                   Last_Error:</span></span><br><span class="line"><span class="attr">                 Skip_Counter:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">          Exec_Master_Log_Pos:</span> <span class="number">46615397</span></span><br><span class="line"><span class="attr">              Relay_Log_Space:</span> <span class="number">46615864</span></span><br><span class="line"><span class="attr">              Until_Condition:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">               Until_Log_File:</span></span><br><span class="line"><span class="attr">                Until_Log_Pos:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">           Master_SSL_Allowed:</span> <span class="literal">No</span></span><br><span class="line"><span class="attr">           Master_SSL_CA_File:</span></span><br><span class="line"><span class="attr">           Master_SSL_CA_Path:</span></span><br><span class="line"><span class="attr">              Master_SSL_Cert:</span></span><br><span class="line"><span class="attr">            Master_SSL_Cipher:</span></span><br><span class="line"><span class="attr">               Master_SSL_Key:</span></span><br><span class="line"><span class="attr">        Seconds_Behind_Master:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">Master_SSL_Verify_Server_Cert:</span> <span class="literal">No</span></span><br><span class="line"><span class="attr">                Last_IO_Errno:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">                Last_IO_Error:</span></span><br><span class="line"><span class="attr">               Last_SQL_Errno:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">               Last_SQL_Error:</span></span><br><span class="line"><span class="attr">  Replicate_Ignore_Server_Ids:</span></span><br><span class="line"><span class="attr">             Master_Server_Id:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">                  Master_UUID:</span> <span class="number">0</span><span class="string">b08572b-8c3e-11e5-bf6f-00163e005ac3</span></span><br><span class="line"><span class="attr">             Master_Info_File:</span> <span class="string">/datavol/mysql/data/master.info</span></span><br><span class="line"><span class="attr">                    SQL_Delay:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">          SQL_Remaining_Delay:</span> <span class="literal">NULL</span></span><br><span class="line"><span class="attr">      Slave_SQL_Running_State:</span> <span class="string">Slave</span> <span class="string">has</span> <span class="string">read</span> <span class="string">all</span> <span class="string">relay</span> <span class="string">log;</span> <span class="string">waiting</span> <span class="string">for</span> <span class="string">more</span> <span class="string">updates</span></span><br><span class="line"><span class="attr">           Master_Retry_Count:</span> <span class="number">86400</span></span><br><span class="line"><span class="attr">                  Master_Bind:</span></span><br><span class="line"><span class="attr">      Last_IO_Error_Timestamp:</span></span><br><span class="line"><span class="attr">     Last_SQL_Error_Timestamp:</span></span><br><span class="line"><span class="attr">               Master_SSL_Crl:</span></span><br><span class="line"><span class="attr">           Master_SSL_Crlpath:</span></span><br><span class="line"><span class="attr">           Retrieved_Gtid_Set:</span></span><br><span class="line"><span class="attr">            Executed_Gtid_Set:</span></span><br><span class="line"><span class="attr">                Auto_Position:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">         Replicate_Rewrite_DB:</span></span><br><span class="line"><span class="attr">                 Channel_Name:</span></span><br><span class="line"><span class="number">1</span> <span class="string">row</span> <span class="string">in</span> <span class="string">set</span> <span class="string">(0.00</span> <span class="string">sec</span></span><br></pre></td></tr></table></figure></p><h2 id="复制出错处理"><a href="#复制出错处理" class="headerlink" title="复制出错处理"></a>复制出错处理</h2><p>常见： 1062（主键冲突）  1032（记录不存在）<br>解决： 手动处理<br>或 跳过复制出错<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">set</span> global <span class="attribute">sql_slave_skip_counter</span>=1</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>MySQL主从复制是MySQL高可用性、高性能（负责均衡）的基础</li><li>简单、灵活，部署方式多样，可以根据不同业务场景部署不同复制结构</li><li>MySQL主从复制目前也存在一些问题，可以根据需要部署复制增强功能来解决问题</li><li>复制过程中应该时刻监控复制状态，复制出差或延时可能给系统造成影响</li><li>MySQL复制是MySQL数据库工程师必知必会的一项基本技能</li></ul><hr><p>Good luck!<br>冬日暖阳</p>]]></content>
    
    <summary type="html">
    
      MySQL主从复制
    
    </summary>
    
      <category term="MySQL" scheme="http://mydba.xyz/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL线上部署</title>
    <link href="http://mydba.xyz/mysql/163/mysql26.html"/>
    <id>http://mydba.xyz/mysql/163/mysql26.html</id>
    <published>2016-11-07T05:35:59.000Z</published>
    <updated>2016-11-07T05:35:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL线上部署"><a href="#MySQL线上部署" class="headerlink" title="MySQL线上部署"></a>MySQL线上部署</h1><h2 id="线上部署考虑因素"><a href="#线上部署考虑因素" class="headerlink" title="线上部署考虑因素"></a>线上部署考虑因素</h2><ul><li>版本选择，5.1、5.5、5.6、5.7</li><li>分支选择，官方社区版、percona server、Mariadb</li><li>安装方式，包安装，二进制包安装，源码安装</li><li>路径配置，参数配置（尽量模板化，标准化）</li><li>一个实例多个库 or 多个实例单个库</li></ul><h2 id="编译安装及二进制安装"><a href="#编译安装及二进制安装" class="headerlink" title="编译安装及二进制安装"></a>编译安装及二进制安装</h2><h3 id="二进制安装"><a href="#二进制安装" class="headerlink" title="二进制安装"></a>二进制安装</h3><ol><li>下载软件安装包</li><li>解压放到指定目录（比如/usr/local）</li><li>将MySQL目录放到PATH中</li><li>初始化实例，编辑配置文件，并启动</li><li>账户安全设置</li></ol><h3 id="编译安装MySQL"><a href="#编译安装MySQL" class="headerlink" title="编译安装MySQL"></a>编译安装MySQL</h3><ol><li>下载MySQL源码安装包</li><li>安装必要的包（make cmake bison-devel ncurses-devel build-essential）</li><li>cmake配置mysql编译选项，可以定制需要安装的功能，<a href="http://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html" target="_blank" rel="noopener">编译选项参考</a></li><li>make &amp;&amp; make install</li><li>初始化实例，编辑配置文件并启动</li><li>账户安全设置</li></ol><h2 id="升级MySQL"><a href="#升级MySQL" class="headerlink" title="升级MySQL"></a>升级MySQL</h2><p>例如从5.5升级到5.6</p><ol><li>下载MySQL5.6安装包并配置MySQL5.6安装包路径</li><li>关闭MySQL5.5的实例，修改部分参数，使用MySQL5.6软件启动</li><li>执行MySQL5.6路径下mysql_upgrade脚本</li><li>验证是否成功升级</li></ol><h2 id="多实例部署MySQL数据库"><a href="#多实例部署MySQL数据库" class="headerlink" title="多实例部署MySQL数据库"></a>多实例部署MySQL数据库</h2><ol><li>部署好MySQL软件</li><li>编辑多个配置文件，初始化多个实例</li><li>启动MySQL实例<br>※ 不推荐使用mysqld_multi脚本启动多个实例，多个实例使用一个配置文件不容易维护。</li></ol><h3 id="多实例部署的好处"><a href="#多实例部署的好处" class="headerlink" title="多实例部署的好处"></a>多实例部署的好处</h3><ol><li>充分利用系统资源</li><li>资源隔离</li><li>业务、模块 隔离</li></ol><h2 id="合理部署MySQL线上库"><a href="#合理部署MySQL线上库" class="headerlink" title="合理部署MySQL线上库"></a>合理部署MySQL线上库</h2><ol><li>根据需求选择合适的版本及分支，建议使用或升级到较高版本5.6或5.7</li><li>如果需要定制MySQL功能的话，可以考虑编译安装，否则的话，建议使用二进制包安装，比较省事</li><li>根据机器配置选择部署多个MySQL实例还是单个实例，机器配置非常好的话，建议部署多实例</li></ol><hr><p>Good luck!<br>冬日暖阳</p>]]></content>
    
    <summary type="html">
    
      MySQL线上部署
    
    </summary>
    
      <category term="MySQL" scheme="http://mydba.xyz/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL恢复</title>
    <link href="http://mydba.xyz/mysql/163/mysql25.html"/>
    <id>http://mydba.xyz/mysql/163/mysql25.html</id>
    <published>2016-11-04T06:52:47.000Z</published>
    <updated>2016-11-04T06:52:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL恢复"><a href="#MySQL恢复" class="headerlink" title="MySQL恢复"></a>MySQL恢复</h1><ul><li>使用MySQL恢复命令、工具</li><li>不同场景MySQL恢复方法</li></ul><h2 id="什么时候需要恢复数据"><a href="#什么时候需要恢复数据" class="headerlink" title="什么时候需要恢复数据"></a>什么时候需要恢复数据</h2><ul><li>硬件故障（如磁盘损坏）</li><li>人为删除（如误删数据、被黑）</li><li>业务回滚（如游戏bug需要回档）</li><li>正常需求（如部署镜像库，查看历史某时刻数据）</li></ul><h2 id="数据恢复的必要条件"><a href="#数据恢复的必要条件" class="headerlink" title="数据恢复的必要条件"></a>数据恢复的必要条件</h2><ul><li>有效备份</li><li>完整的数据库操作日志（binlog）</li></ul><h2 id="数据恢复思路"><a href="#数据恢复思路" class="headerlink" title="数据恢复思路"></a>数据恢复思路</h2><p><img src="/img/markdown-img-paste-20161104153340569.png" alt=""></p><ol><li>备份4 + binlog4 恢复到故障时间点（适用于各种数据丢失场景）</li><li>挖掘binlog4 获取相关SQL语句，构造反转SQL语句并应用到数据库（只适用于记录丢失，且binlog必须是row格式）</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">t1(id primary key , a int)</span><br><span class="line"></span><br><span class="line">##反转SQL语句：</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t1(<span class="keyword">id</span>,a) <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">1</span>) <span class="comment">--&gt; delete t1 where id=1 and a=1</span></span><br><span class="line"><span class="keyword">update</span> t1 <span class="keyword">set</span> a=<span class="number">5</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span>     <span class="comment">--&gt; update t1 set a=1 where id=1</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span>        <span class="comment">--&gt; insert into t1(id,a) values(1,1)</span></span><br></pre></td></tr></table></figure><h2 id="数据库恢复工具与命令"><a href="#数据库恢复工具与命令" class="headerlink" title="数据库恢复工具与命令"></a>数据库恢复工具与命令</h2><ul><li>mysqldump备份  –&gt; source恢复</li><li>xtrabackup备份 –&gt; xtrabackup恢复</li><li>binlog备份     –&gt; mysqlbinlog恢复</li></ul><h3 id="mysqldump-的还原方法"><a href="#mysqldump-的还原方法" class="headerlink" title="mysqldump 的还原方法"></a>mysqldump 的还原方法</h3><p>因mysqldump 是导出的sql语句，直接应用即可还原数据</p><p><code>mysql -uroot -proot test &lt; t.sql</code><br>或<br><code>mysql&gt; source t.sql</code></p><h3 id="xtrabackup-的还原方法"><a href="#xtrabackup-的还原方法" class="headerlink" title="xtrabackup 的还原方法"></a>xtrabackup 的还原方法</h3><p>因为xtrabackup 是物理备份，因此，如果数据库磁盘故障，都是数据文件，可以使用此方法还原。</p><p>copy-back 时需要 mysql datadir 目录为空，并且mysql 数据库停止。</p><ul><li><p>完整备份的还原</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> innobackupex --apply-log  BACK-BASE-DIR</span><br><span class="line"><span class="number">2.</span> innobackupex --defaults-file=/home/sdy/mysql/bin/my.cnf --user=root --password=root --copy-back ./<span class="number">2016</span><span class="number">-01</span><span class="number">-26</span>_13<span class="number">-51</span><span class="number">-26</span>/</span><br></pre></td></tr></table></figure></li><li><p>增量备份还原</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1. innobackupex --apply-<span class="keyword">log</span> --redo-only  BACK-BASE-<span class="keyword">DIR</span></span><br><span class="line">2. innobackupex --apply-<span class="keyword">log</span> --redo-only  BACK-BASE-<span class="keyword">DIR</span>  --incremental-<span class="keyword">dir</span>=INCREMENTAL-<span class="keyword">DIR</span>-1</span><br><span class="line">3. innobackupex --apply-<span class="keyword">log</span> --redo-only  BACK-BASE-<span class="keyword">DIR</span>  --incremental-<span class="keyword">dir</span>=INCREMENTAL-<span class="keyword">DIR</span>-2  </span><br><span class="line">    ......</span><br><span class="line"><span class="keyword">n</span>. innobackupex --apply-<span class="keyword">log</span>  BACK-BASE-<span class="keyword">DIR</span>  --incremental-<span class="keyword">dir</span>=INCREMENTAL-<span class="keyword">DIR</span>-<span class="keyword">n</span></span><br><span class="line"><span class="keyword">n</span>+1. innobackupex --defaults-<span class="keyword">file</span>=/home/sdy/mysql/bin/my.cnf --user=root --password=root --<span class="keyword">copy</span>-back BACK-BASE-<span class="keyword">DIR</span></span><br></pre></td></tr></table></figure></li><li><p>压缩备份还原</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">解压</span><br><span class="line"><span class="number">1.</span> innobackupex --decompress /home/sdy/backup/<span class="number">2016</span><span class="number">-01</span><span class="number">-26</span>_15<span class="number">-04</span><span class="number">-37</span>     并且   find ./ -name <span class="string">"*.qp"</span> | xargs rm -f \&#123;&#125;</span><br><span class="line">应用日志</span><br><span class="line"><span class="number">2.</span> innobackupex --apply-log /home/sdy/backup/<span class="number">2016</span><span class="number">-01</span><span class="number">-26</span>_15<span class="number">-04</span><span class="number">-37</span></span><br><span class="line">还原</span><br><span class="line"><span class="number">3.</span> innobackupex --defaults-file=/home/sdy/mysql/bin/my.cnf --user=root --password=root --copy-back BACK-BASE-DIR</span><br></pre></td></tr></table></figure></li><li><p>流备份还原<br>xbstream 格式</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">解压</span><br><span class="line">1. mkdir stream  ;  xbstream -C stream  -x &lt; stream.bak</span><br><span class="line">应用日志</span><br><span class="line">2. innobackupex <span class="attribute">--parallel</span>=4 --apply-log <span class="attribute">--use-memory</span>=200MB /home/sdy/backup/stream</span><br><span class="line">还原</span><br><span class="line">3. innobackupex <span class="attribute">--defaults-file</span>=/home/sdy/mysql/bin/my.cnf <span class="attribute">--user</span>=root <span class="attribute">--password</span>=root --copy-back /home/sdy/backup/stream</span><br></pre></td></tr></table></figure><p>tar 格式</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">解压</span><br><span class="line"><span class="number">1.</span> mkdir tar ; cd tar ; tar xf ../tar.bak</span><br><span class="line"><span class="number">2.</span>应用日志</span><br><span class="line"><span class="number">3.</span>还原</span><br></pre></td></tr></table></figure></li></ul><h3 id="mysqlbinlog-工具恢复数据"><a href="#mysqlbinlog-工具恢复数据" class="headerlink" title="mysqlbinlog 工具恢复数据"></a>mysqlbinlog 工具恢复数据</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog <span class="attribute">--start-position</span>=120 <span class="attribute">--stop-position</span>=2150  mysql-bin.000008 | mysql -uroot -proot</span><br></pre></td></tr></table></figure><h2 id="恢复示例"><a href="#恢复示例" class="headerlink" title="恢复示例"></a>恢复示例</h2><h3 id="恢复误删数据"><a href="#恢复误删数据" class="headerlink" title="恢复误删数据"></a>恢复误删数据</h3><p>case：误操作，删除数据忘记带完整条件，执行delete from user where age&gt;30 [and sex=male]<br>需求：将删除数据还原<br>恢复前提：完整的数据库操作日志（binlog）</p><h3 id="恢复误删表、库"><a href="#恢复误删表、库" class="headerlink" title="恢复误删表、库"></a>恢复误删表、库</h3><p>case：业务被黑，表被删除了（drop table user）<br>需求：将表恢复<br>前提：备份+备份以来完整binlog</p><h3 id="将数据库恢复到指定时间点"><a href="#将数据库恢复到指定时间点" class="headerlink" title="将数据库恢复到指定时间点"></a>将数据库恢复到指定时间点</h3><p>case：游戏bug，导致很多玩家利用bug刷金币<br>需求：游戏回滚，数据库也需要回滚<br>前途：有效备份+完整的数据库操作日志（binlog）</p><blockquote><p>恢复是一件非常苦逼的差事，尽量避免做。我们要做数据卫士而不是救火队员。<br>（限速应该严格把控权限，数据变更操作应事先测试，操作时做好备份）<br>有效备份（+binlog）是重中之重，对数据库定期备份是必须的<br>备份是一切数据恢复的基础</p></blockquote><hr><p>Good luck!<br>冬日暖阳</p>]]></content>
    
    <summary type="html">
    
      MySQL恢复
    
    </summary>
    
      <category term="MySQL" scheme="http://mydba.xyz/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL备份</title>
    <link href="http://mydba.xyz/mysql/163/mysql24.html"/>
    <id>http://mydba.xyz/mysql/163/mysql24.html</id>
    <published>2016-11-03T07:36:25.000Z</published>
    <updated>2016-11-03T07:36:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL备份"><a href="#MySQL备份" class="headerlink" title="MySQL备份"></a>MySQL备份</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="备份用途"><a href="#备份用途" class="headerlink" title="备份用途"></a>备份用途</h3><ul><li>数据灾备<ul><li>应对硬件故障数据丢失</li><li>应对人为或程序bug导致数据误删除</li></ul></li><li>制作镜像库以供服务<ul><li>需要将数据迁移、统计分析等用途</li><li>需要为线上数据建立建立一个镜像</li></ul></li></ul><h3 id="备份内容"><a href="#备份内容" class="headerlink" title="备份内容"></a>备份内容</h3><ul><li>数据<ul><li>数据文件或文本格式数据</li></ul></li><li>操作日志(binlog)<ul><li>数据库变更日志<br><img src="/img/markdown-img-paste-20161103154539948.png" alt=""></li></ul></li></ul><h3 id="冷备份与热备份"><a href="#冷备份与热备份" class="headerlink" title="冷备份与热备份"></a>冷备份与热备份</h3><ul><li>冷备份<ul><li>关闭数据库服务，完整拷贝数据文件</li></ul></li><li>热备份<ul><li>在不影响数据库读写服务的情况下备份数据库</li></ul></li></ul><h3 id="物理备份与逻辑备份"><a href="#物理备份与逻辑备份" class="headerlink" title="物理备份与逻辑备份"></a>物理备份与逻辑备份</h3><ul><li>物理备份<ul><li>以数据页的形式拷贝数据文件</li></ul></li><li>逻辑备份<ul><li>导出为裸数据或者SQL(insert)语句</li></ul></li></ul><h3 id="本地备份与远程备份"><a href="#本地备份与远程备份" class="headerlink" title="本地备份与远程备份"></a>本地备份与远程备份</h3><ul><li>本地备份<ul><li>在数据库服务器本地进行备份</li></ul></li><li>远程备份<ul><li>远程连接数据库进行备份</li></ul></li></ul><h3 id="全量备份与增量备份"><a href="#全量备份与增量备份" class="headerlink" title="全量备份与增量备份"></a>全量备份与增量备份</h3><ul><li>全量备份<ul><li>备份完整的数据库</li></ul></li><li>增量备份<ul><li>只备份上一次备份以来发生修改的数据<br><img src="/img/markdown-img-paste-20161103155256846.png" alt=""></li></ul></li></ul><h3 id="备份周期"><a href="#备份周期" class="headerlink" title="备份周期"></a>备份周期</h3><p>考虑因素：</p><ul><li>数据库大小（决定备份时间）</li><li>恢复速度要求（快速or慢速）</li><li>备份方式（全量or增量）</li></ul><h2 id="常用工具及用法"><a href="#常用工具及用法" class="headerlink" title="常用工具及用法"></a>常用工具及用法</h2><ul><li>mysqldump - 逻辑备份，热备</li><li>xtrabackup - 物理备份，热备</li><li>Lvm/zfs snapshot - 物理备份</li><li>mydumper - 逻辑备份，热备</li><li>cp - 物理备份，冷备</li></ul><h3 id="mysqldump"><a href="#mysqldump" class="headerlink" title="mysqldump"></a>mysqldump</h3><p>MySQL官方自带的命令行工具<br>主要示例：</p><ol><li>使用mysqldump备份表，库，实例</li><li>使用mysqldump制作一致性备份</li><li>使用mysqldump导出数据为csv格式<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1)mysqldump -uroot -p123456 <span class="comment">--socket=XXX --all-databases &gt; XXX.sql</span></span><br><span class="line">2)mysqldump -uroot -p123456 <span class="comment">--socket=XXX --databases db2 &gt; XXX.sql</span></span><br><span class="line">3)mysqldump -uroot -p123456 <span class="comment">--socket=XXX db2 t1 &gt; XXX.sql</span></span><br><span class="line">4)</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> db3;</span><br><span class="line">surce XXX.sql;</span><br><span class="line">5)mysqldump <span class="comment">--single-transaction -uroot -p123456 --all-databases &gt; XXX.sql</span></span><br><span class="line">6)mysqldump -utest -ptest -hXXX -P3306 <span class="comment">--all-databases &gt; XXX.sql</span></span><br><span class="line">7)mysqldump <span class="comment">--single-transaction -uroot -p123456 db1 -T XXX</span></span><br><span class="line">8)mysqldump <span class="comment">--single-transaction -uroot -p123456 db1 -T XXX</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="xtrabackup"><a href="#xtrabackup" class="headerlink" title="xtrabackup"></a>xtrabackup</h3><p>特点：</p><ul><li>开源，在线备份InnoDB表</li><li>支持限速备份，避免对业务造成影响</li><li>支持流备</li><li>支持增量备份</li><li>支持备份文件压缩与加密</li><li>支持并行备份与恢复，速度快<br><a href="https://www.percona.com/downloads/XtraBackup/" target="_blank" rel="noopener">官方网站</a><br><a href="https://github.com/percona/percona-xtrabackup/tree/release-2.4.4" target="_blank" rel="noopener">代码地址</a></li></ul><h4 id="xtrabackup备份原理"><a href="#xtrabackup备份原理" class="headerlink" title="xtrabackup备份原理"></a>xtrabackup备份原理</h4><ul><li>基于InnoDB的crash-recovery功能</li><li>备份期间允许用户读写，写请求产生redo日志</li><li>从磁盘上拷贝数据文件</li><li>从InnoDB redo log file 实时拷贝走备份期间产生的所有redo日志</li><li>恢复的时候  数据文件+redo日志 = 一致性备份<br><img src="/img/markdown-img-paste-20161103175351142.png" alt=""></li></ul><h4 id="实用脚本innobackupex"><a href="#实用脚本innobackupex" class="headerlink" title="实用脚本innobackupex"></a>实用脚本innobackupex</h4><ul><li>开源Perl脚本，封装调用xtrabackup及一系列相关工具与OS操作，最终完成备份过程</li><li>支持备份InnoDB和其他引擎的表</li><li><p>备份一致性保证</p></li><li><p>innobackupex备份基本流程<br><img src="/img/markdown-img-paste-20161103175631788.png" alt=""></p></li><li><p>innobackupex使用示例</p></li></ul><ol><li><p>全量备份</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">默认在BACKUP-ROOT-DIR下面产生时间戳备份子目录</span><br><span class="line">innobackupex --defaults-<span class="keyword">file</span>=<span class="regexp">/home/</span>sdy<span class="regexp">/mysql/</span>bin<span class="regexp">/my.cnf --user=root --password=root /</span>home<span class="regexp">/sdy/</span>backup<span class="regexp">/innoback/</span></span><br><span class="line"></span><br><span class="line">可以自定义备份子目录名称，使用  --no-timestamp 选项</span><br><span class="line">innobackupex --defaults-<span class="keyword">file</span>=<span class="regexp">/home/</span>sdy<span class="regexp">/mysql/</span>bin<span class="regexp">/my.cnf --user=root --password=root  --no-timestamp /</span>home<span class="regexp">/sdy/</span>backup<span class="regexp">/innoback/</span>full_back</span><br></pre></td></tr></table></figure></li><li><p>增量备份</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">innobackupex <span class="attribute">--defaults-file</span>=/home/sdy/mysql/bin/my.cnf <span class="attribute">--user</span>=root <span class="attribute">--password</span>=root --incremental /home/sdy/backup/innoback/   <span class="attribute">--incremental-basedir</span>=/home/sdy/backup/innoback/2016-01-21_07-24-37</span><br><span class="line">或</span><br><span class="line">innobackupex <span class="attribute">--defaults-file</span>=/home/sdy/mysql/bin/my.cnf <span class="attribute">--user</span>=root <span class="attribute">--password</span>=root --incremental  <span class="attribute">--incremental-basedir</span>=/home/sdy/backup/innoback/2016-01-21_07-24-37   /home/sdy/backup/innoback/</span><br></pre></td></tr></table></figure></li><li><p>流方式备份</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xbstream格式</span><br><span class="line">innobackupex --defaults-<span class="keyword">file</span>=<span class="regexp">/home/</span>sdy<span class="regexp">/mysql/</span>bin<span class="regexp">/my.cnf --user=root --password=root  --stream=xbstream /</span>home<span class="regexp">/sdy/</span>backup<span class="regexp">/innoback &gt; /</span>home<span class="regexp">/sdy/</span>backup<span class="regexp">/innoback/</span>stream_bak</span><br><span class="line">或</span><br><span class="line">tar格式</span><br><span class="line">innobackupex --defaults-<span class="keyword">file</span>=<span class="regexp">/home/</span>sdy<span class="regexp">/mysql/</span>bin<span class="regexp">/my.cnf --user=root --password=root  --stream=tar /</span>home<span class="regexp">/sdy/</span>backup<span class="regexp">/innoback &gt; /</span>home<span class="regexp">/sdy/</span>backup<span class="regexp">/innoback/</span>stream_bak.tar</span><br></pre></td></tr></table></figure></li><li><p>并行备份</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innobackupex <span class="attribute">--defaults-file</span>=/home/sdy/mysql/bin/my.cnf <span class="attribute">--user</span>=root <span class="attribute">--password</span>=root <span class="attribute">--parallel</span>=4  /home/sdy/backup/innoback</span><br></pre></td></tr></table></figure></li><li><p>限流备份</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">限流10M</span><br><span class="line">innobackupex <span class="attribute">--defaults-file</span>=/home/sdy/mysql/bin/my.cnf <span class="attribute">--user</span>=root <span class="attribute">--password</span>=root <span class="attribute">--throttle</span>=10  /home/sdy/backup/innoback</span><br></pre></td></tr></table></figure></li><li><p>压缩备份</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innobackupex <span class="attribute">--defaults-file</span>=/home/sdy/mysql/bin/my.cnf <span class="attribute">--user</span>=root <span class="attribute">--password</span>=root  --compress <span class="attribute">--compress-threads</span>=4 /home/sdy/backup/innoback</span><br></pre></td></tr></table></figure></li><li><p>常用参数介绍</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--kill-long-queries-timeout=#</span></span><br><span class="line">                      This option specifies the number of seconds innobackupex</span><br><span class="line">                      waits between starting <span class="keyword">FLUSH</span> <span class="keyword">TABLES</span> <span class="keyword">WITH</span> <span class="keyword">READ</span> <span class="keyword">LOCK</span> <span class="keyword">and</span></span><br><span class="line">                      killing those queries that <span class="keyword">block</span> it. <span class="keyword">Default</span> <span class="keyword">is</span> <span class="number">0</span></span><br><span class="line">                      seconds, which means innobackupex will <span class="keyword">not</span> attempt <span class="keyword">to</span></span><br><span class="line">                      <span class="keyword">kill</span> <span class="keyword">any</span> queries.</span><br><span class="line"></span><br><span class="line"><span class="comment">--kill-long-query-type=all | update</span></span><br><span class="line">                      This <span class="keyword">option</span> specifies which types <span class="keyword">of</span> queries should be</span><br><span class="line">                      killed <span class="keyword">to</span> unblock the <span class="keyword">global</span> lock. <span class="keyword">Default</span> <span class="keyword">is</span> <span class="string">"all"</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment">--slave-info        This option is useful when backing up a replication slave</span></span><br><span class="line">                      server. It prints the <span class="built_in">binary</span> <span class="keyword">log</span> <span class="keyword">position</span> <span class="keyword">and</span> <span class="keyword">name</span> <span class="keyword">of</span> the</span><br><span class="line">                      <span class="keyword">master</span> server. It also writes this information <span class="keyword">to</span> the</span><br><span class="line">                      <span class="string">"xtrabackup_slave_info"</span> <span class="keyword">file</span> <span class="keyword">as</span> a <span class="string">"CHANGE MASTER"</span></span><br><span class="line">                      command. A <span class="keyword">new</span> <span class="keyword">slave</span> <span class="keyword">for</span> this <span class="keyword">master</span> can be <span class="keyword">set</span> up <span class="keyword">by</span></span><br><span class="line">                      <span class="keyword">starting</span> a <span class="keyword">slave</span> <span class="keyword">server</span> <span class="keyword">on</span> this <span class="keyword">backup</span> <span class="keyword">and</span> issuing a</span><br><span class="line">                      <span class="string">"CHANGE MASTER"</span> command <span class="keyword">with</span> the <span class="built_in">binary</span> <span class="keyword">log</span> <span class="keyword">position</span></span><br><span class="line">                      saved <span class="keyword">in</span> the <span class="string">"xtrabackup_slave_info"</span> file.</span><br></pre></td></tr></table></figure></li></ol><h2 id="如何制定数据库备份策略"><a href="#如何制定数据库备份策略" class="headerlink" title="如何制定数据库备份策略"></a>如何制定数据库备份策略</h2><p>需要考虑的因素</p><ol><li>数据库是不是都是innodb引擎表    –&gt;  备份方式，热备or冷备</li><li>数据量大小                     –&gt;  逻辑备份or物理备份，全量or增量</li><li>数据库本地空间是否充足          –&gt;  备份到本地or远程</li><li>需要多快恢复                   –&gt;  备份频率 小时or天</li></ol><hr><p>Good luck!<br>冬日暖阳</p>]]></content>
    
    <summary type="html">
    
      MySQL备份
    
    </summary>
    
      <category term="MySQL" scheme="http://mydba.xyz/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL慢日志分析</title>
    <link href="http://mydba.xyz/mysql/163/mysql23.html"/>
    <id>http://mydba.xyz/mysql/163/mysql23.html</id>
    <published>2016-11-03T02:54:39.000Z</published>
    <updated>2016-11-03T02:54:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL慢日志分析"><a href="#MySQL慢日志分析" class="headerlink" title="MySQL慢日志分析"></a>MySQL慢日志分析</h1><h2 id="通过MySQL-Processlist定位慢查询"><a href="#通过MySQL-Processlist定位慢查询" class="headerlink" title="通过MySQL Processlist定位慢查询"></a>通过MySQL Processlist定位慢查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">processlist</span> ;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">full</span> <span class="keyword">processlist</span> ; <span class="comment">-- 打印全部sql语句</span></span><br></pre></td></tr></table></figure><h2 id="MySQL-Slowlog-使用与介绍"><a href="#MySQL-Slowlog-使用与介绍" class="headerlink" title="MySQL Slowlog 使用与介绍"></a>MySQL Slowlog 使用与介绍</h2><ul><li><p>slowlog设置</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> slow_query_log=<span class="keyword">ON</span>/<span class="keyword">OFF</span>; <span class="comment">--打开关闭slowlog</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> long_query_time=<span class="number">1</span>/<span class="number">5</span>/<span class="number">0.2</span>; <span class="comment">--设置慢查询阈值</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> log_output=<span class="string">"FILE"</span>/<span class="string">"TABLE"</span>; <span class="comment">-- 设置慢查询存储位置</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'slow_query_log_file'</span>; <span class="comment">--查询slowlog文件位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> @@slow_query_log,@@long_query_time,@@log_output,@@slow_query_log_file;</span><br><span class="line">+<span class="comment">------------------+-------------------+--------------+--------------------------------------------+</span></span><br><span class="line">| @@slow_query_log | @@long_query_time | @@log_output | @@slow_query_log_file                      |</span><br><span class="line">+<span class="comment">------------------+-------------------+--------------+--------------------------------------------+</span></span><br><span class="line">|                0 |         10.000000 | FILE         | /home/mysql/mysql8/data/archlinux-slow.log |</span><br><span class="line">+<span class="comment">------------------+-------------------+--------------+--------------------------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>慢查询表（mysql.slow_log）</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">desc slow_log;</span><br><span class="line">+----------------+---------------------+------+-----+----------------------+--------------------------------+</span><br><span class="line">|<span class="string"> Field          </span>|<span class="string"> Type                </span>|<span class="string"> Null </span>|<span class="string"> Key </span>|<span class="string"> Default              </span>|<span class="string"> Extra                          </span>|</span><br><span class="line">+----------------+---------------------+------+-----+----------------------+--------------------------------+</span><br><span class="line">|<span class="string"> start_time     </span>|<span class="string"> timestamp(6)        </span>|<span class="string"> NO   </span>|<span class="string">     </span>|<span class="string"> CURRENT_TIMESTAMP(6) </span>|<span class="string"> on update CURRENT_TIMESTAMP(6) </span>|</span><br><span class="line">|<span class="string"> user_host      </span>|<span class="string"> mediumtext          </span>|<span class="string"> NO   </span>|<span class="string">     </span>|<span class="string"> NULL                 </span>|<span class="string">                                </span>|</span><br><span class="line">|<span class="string"> query_time     </span>|<span class="string"> time(6)             </span>|<span class="string"> NO   </span>|<span class="string">     </span>|<span class="string"> NULL                 </span>|<span class="string">                                </span>|</span><br><span class="line">|<span class="string"> lock_time      </span>|<span class="string"> time(6)             </span>|<span class="string"> NO   </span>|<span class="string">     </span>|<span class="string"> NULL                 </span>|<span class="string">                                </span>|</span><br><span class="line">|<span class="string"> rows_sent      </span>|<span class="string"> int(11)             </span>|<span class="string"> NO   </span>|<span class="string">     </span>|<span class="string"> NULL                 </span>|<span class="string">                                </span>|</span><br><span class="line">|<span class="string"> rows_examined  </span>|<span class="string"> int(11)             </span>|<span class="string"> NO   </span>|<span class="string">     </span>|<span class="string"> NULL                 </span>|<span class="string">                                </span>|</span><br><span class="line">|<span class="string"> db             </span>|<span class="string"> varchar(512)        </span>|<span class="string"> NO   </span>|<span class="string">     </span>|<span class="string"> NULL                 </span>|<span class="string">                                </span>|</span><br><span class="line">|<span class="string"> last_insert_id </span>|<span class="string"> int(11)             </span>|<span class="string"> NO   </span>|<span class="string">     </span>|<span class="string"> NULL                 </span>|<span class="string">                                </span>|</span><br><span class="line">|<span class="string"> insert_id      </span>|<span class="string"> int(11)             </span>|<span class="string"> NO   </span>|<span class="string">     </span>|<span class="string"> NULL                 </span>|<span class="string">                                </span>|</span><br><span class="line">|<span class="string"> server_id      </span>|<span class="string"> int(10) unsigned    </span>|<span class="string"> NO   </span>|<span class="string">     </span>|<span class="string"> NULL                 </span>|<span class="string">                                </span>|</span><br><span class="line">|<span class="string"> sql_text       </span>|<span class="string"> mediumblob          </span>|<span class="string"> NO   </span>|<span class="string">     </span>|<span class="string"> NULL                 </span>|<span class="string">                                </span>|</span><br><span class="line">|<span class="string"> thread_id      </span>|<span class="string"> bigint(21) unsigned </span>|<span class="string"> NO   </span>|<span class="string">     </span>|<span class="string"> NULL                 </span>|<span class="string">                                </span>|</span><br><span class="line">+----------------+---------------------+------+-----+----------------------+--------------------------------+</span><br><span class="line">12 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">select <span class="symbol">*</span> from slow_log limit 1 \G</span><br></pre></td></tr></table></figure></li><li><p>慢查询日志</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Time: 2016-11-02T13:19:54.723779Z</span></span><br><span class="line"><span class="comment"># User@Host: root[root] @ localhost []  Id:   106</span></span><br><span class="line"><span class="comment"># Query_time: 211.696652  Lock_time: 0.000000 Rows_sent: 0  Rows_examined: 0</span></span><br><span class="line"><span class="builtin-name">SET</span> <span class="attribute">timestamp</span>=1478092794;</span><br><span class="line">call proc_t1(10000,@a);</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用pt-query-digest分析慢查询"><a href="#使用pt-query-digest分析慢查询" class="headerlink" title="使用pt-query-digest分析慢查询"></a>使用pt-query-digest分析慢查询</h2><ol><li><p>使用tcpdump抓取mysql协议包</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -s 65535 -x -nn -q -tttt -i any -c 1000<span class="built_in"> port </span>3306 &gt; mysql.tcp.txt</span><br></pre></td></tr></table></figure></li><li><p>使用pt-query-digest分析包</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">pt-query-digest</span> <span class="selector-tag">--type</span> <span class="selector-tag">tcpdump</span> <span class="selector-tag">--limit</span> 100 <span class="selector-tag">--watch-server</span> 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.11</span><span class="selector-pseudo">:3306</span> <span class="selector-tag">mysql</span><span class="selector-class">.tcp</span><span class="selector-class">.txt</span> &gt; <span class="selector-tag">mysql</span><span class="selector-class">.slow</span><span class="selector-class">.sql</span></span><br></pre></td></tr></table></figure></li><li><p>使用pt-query-digest分析慢日志</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pt-<span class="keyword">query</span>-digest --<span class="keyword">type</span> slowlog --<span class="keyword">order</span>-<span class="keyword">by</span> Rows_examined:<span class="keyword">sum</span>/--<span class="keyword">order</span>-<span class="keyword">by</span> Query_time:cnt  /tmp/mysql-slow.<span class="keyword">log</span> &gt; /tmp/slow3306.sql</span><br></pre></td></tr></table></figure></li></ol><ul><li>tcpdump 参数含义<ul><li><code>-s</code>  截取报文的长度，0为全部报文，默认为68字节。  </li><li><code>-x</code>  当分析和打印时, tcpdump 会打印每个包的头部数据, 同时会以16进制打印出每个包的数据(但不包括连接层的头部).总共打印的数据大小不会超过整个数据包的大小与snaplen 中的最小值. 必须要注意的是, 如果高层协议数据没有snaplen 这么长,并且数据链路层(比如, Ethernet层)有填充数据, 则这些填充数据也会被打印.</li><li><code>-nn</code>  不转换协议和端口号</li><li><code>-q</code>   快速输入，打印更少的协议信息，从而使输出行更短。</li><li><code>-tttt</code> 在每一dump行，打印一个默认格式的时间戳。</li><li><code>-i</code> any  监听接口</li><li><code>-c</code>  接收到指定数量的数据包后退出</li><li><code>port</code> 监听端口</li></ul></li></ul><hr><p>Good luck!<br>冬日暖阳</p>]]></content>
    
    <summary type="html">
    
      MySQL慢日志分析
    
    </summary>
    
      <category term="MySQL" scheme="http://mydba.xyz/categories/MySQL/"/>
    
    
  </entry>
  
</feed>
